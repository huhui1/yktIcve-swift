//
//  ZQSocketManager.swift
//  云课堂2
//
//  Created by 尤增强 on 2018/6/12.
//  Copyright © 2018年 zqyou. All rights reserved.
//

import UIKit
import SocketIO
import SwiftyJSON
import Alamofire


@objc protocol ZQSocketManagerDelegate:NSObjectProtocol  {
    //pc socket连接成功
    func pcSocketConnected() -> ()
}


class ZQSocketManager: NSObject {

    static var isConnected:Bool = false {

        didSet {
            print("------------11")
         }
    }
   
    var  delegate: ZQSocketManagerDelegate?
    static let share = ZQSocketManager()
    let manager = SocketManager(socketURL: URL(string: "http://socket.icve.com.cn:6001")!)
    static var LocalSocket = SocketManager(socketURL: URL(string: "http://socket.icve.com.cn:6001")!)
    var socketId = "";
    var socketP2PId = "";
    var isRemote = true
    func addHandlers() {

        let socket = manager.defaultSocket

        socket.on(clientEvent: .connect) {data, ack in
            print("socket connected")
        }

        socket.on(clientEvent: .statusChange) {data, ack in
            print(data)
        }
        socket.on(clientEvent: .reconnectAttempt) {data, ack in
            print("socket reconnectAttempt")
        }
        socket.on(clientEvent: .ping) {data, ack in
            print("socket ping")
        }
        socket.on(clientEvent: .pong) {data, ack in
            print("socket pong")
        }
        socket.on("connected") {data, ack in
            guard let cur = data[0] as? String else { return }
            print(cur)
            if Account.defaultAccount.id != nil {
                let t = ["userId": Account.defaultAccount.id!,
                         "userName":Account.defaultAccount.displayName!,
                         "userType":"teacher","equipment":"mobile"]
                socket.emit("login", with:[JSON.init(t).debugDescription] )
            }
        }
        socket.on("connection") {data, ack in
            guard let cur = data[0] as? String else { return }
            print(cur)

        }

        socket.on("message") {data, ack in
          let cur = JSON.init(parseJSON: data[0] as! String)
            switch cur["type"] {
            case "otherLogin":
                 self.otherLogin(msg: cur["msg"].stringValue)
                   print("otherLogin")
            case "connected":
                 ZQSocketManager.isConnected = true
            case "disconnected":
                 ZQSocketManager.isConnected = false
            case "exited":
                 ZQSocketManager.isConnected = false
            default:
               print("11")
            }
            print("-------------socket 在发送接收消息\(data)")

        }
        socket.connect()
    }




    //登陆冲突
    func otherLogin(msg:String){
        let socket = manager.defaultSocket
        let alertController = UIAlertController(title: "下线通知",
                                                message: msg,
                                                preferredStyle: .alert)
        let cancelAction = UIAlertAction(title: "退出登录", style: .cancel, handler: {
            action in
            var account = Account.defaultAccount
            account.id = nil
            account.schoolId = nil
            Account.saveAccount(account)
//            let vc = LogInController()
//           // let vc = loginCheckViewController()
//            vc.hidesBottomBarWhenPushed = true
//            vc.navigationController?.navigationBar.isHidden = true
//            NavigatorService.navigateToPage(vc, animated: true)

        })
        let okAction = UIAlertAction(title: "重新登录", style: .default, handler: {
            action in
            let t = ["userId": Account.defaultAccount.id!,
                     "userName":Account.defaultAccount.displayName!,
                     "userType":"teacher","equipment":"mobile"]
            socket.emit("login", with:[JSON.init(t).debugDescription] )
        })
        alertController.addAction(cancelAction)
        alertController.addAction(okAction)
        NavigatorService.modelToPage(alertController, animated: true, completion: {})
    }


    //扫码后的判断连接问题
    func qrcode(result:String){
         let strs = result.components(separatedBy: ";")
        if(strs.count < 3){
            return
        }
         self.socketId = strs[0]
         self.socketP2PId = strs[1]
        if(common.share.getUsedSSID() == "4G"){
            ZQSocketManager.LocalSocket =  SocketManager(socketURL: URL(string: "http://socket.icve.com.cn:6001")!, config: [.log(true), .compress])
            self.addLocalHandlers()
        }else {
            Alamofire.request("http://" + strs[2] + ":4000/version", method: .get, parameters: nil, encoding: URLEncoding.default, headers: nil).responseJSON { (response) in
                if let value = response.result.value {
                    let r = JSON(value)
                    if(r["code"] == 1){
                        self.isRemote = false
                        let url = "http://" + strs[2] + ":6001"
                        self.socketId = self.socketP2PId
                        ZQSocketManager.LocalSocket =  SocketManager(socketURL: URL(string: url)!)
                            //SocketManager(socketURL: URL(string: url)!, config: [.log(true), .compress])

                        self.addLocalHandlers()
                    }
                }else{

                    ZQSocketManager.LocalSocket =  SocketManager(socketURL: URL(string: "http://socket.icve.com.cn:6001")!)
//                    SocketManager(socketURL: URL(string: "http://socket.icve.com.cn:6001")!, config: [.log(true), .compress])
                    self.addLocalHandlers()
                }
            }
        }
    }
    //pc 投屏连接
    func addLocalHandlers() {


        let LocalSocket = ZQSocketManager.LocalSocket.defaultSocket

        LocalSocket.on(clientEvent: .connect) {data, ack in
            print("----------------------socket connected")
            print(data)
        }

        LocalSocket.on(clientEvent: .statusChange) {data, ack in
             print("----------------------socket statusChange")
            print(data)
        }
        LocalSocket.on(clientEvent: .disconnect) {data, ack in
            print("----------------------socket disconnect")
            print(data)
        }
        LocalSocket.on(clientEvent: .reconnectAttempt) {data, ack in

             print("---------------socket reconnectAttempt zq\(data)")
            LocalSocket.off(clientEvent: .reconnectAttempt)

        }

        LocalSocket.on("connect") {data, ack in
            guard let cur = data[0] as? String else { return }
            print(cur)

            let t = ["userId": Account.defaultAccount.id!,
                     "displayName":Account.defaultAccount.displayName!,
                     "avatorUrl":Account.defaultAccount.avatar!]
            let action = ["actionType":"login","token":""]
            let send = ["sendId":Account.defaultAccount.id!,
                        "receiveType":"id",
                        "socketId":self.socketId,
                        "action":action] as [String : Any]
            if(!ZQSocketManager.isConnected){
                LocalSocket.emit("order", [JSON.init(send).description]);
            }
        }

        LocalSocket.on("connected") {data, ack in
            print(data)
              print("---------------connected")
            self.delegate?.pcSocketConnected()
        }


        LocalSocket.on("connection") {data, ack in
            guard let cur = data[0] as? String else { return }
            print(cur)

        }
        LocalSocket.on("login") {data, ack in
            print("login")
            print(data)
        }
        LocalSocket.on("videoInfo") {data, ack in
            print(data)

        }
        LocalSocket.on("videoReady") {data, ack in
            print("videoReady")
            print(data)

        }
        LocalSocket.on("order") {data, ack in
            print("order")
            print(data)

        }
        LocalSocket.on("tips") {data, ack in
            print("tips")
            print(data)

        }
        LocalSocket.on("exited") {data, ack in
            print("exited")
            print(data)

        }
        LocalSocket.on("message") {data, ack in
             print("message")
            print(data)
            let t = JSON.init(data)

            switch t["type"] {
            case "tips":
                ZQSocketManager.isConnected = false
            default:
              print("11")
            }
        }

        LocalSocket.connect()
    }



    //接收监听消息
    func notificationSocketManager(data:[String:String]) {

            switch data["type"]! {
            case "openRes":
                self.openRes(data:data)
            case "closeRes":
                self.closeRes()
            case "videoEvents":
                self.videoEvents(data: data)
            case "exit":
                 print("退出")
                self.exitPC(data: data)
            case "confirmLogin":
                self.confirmLogin(data: data)
            case "openBoard":
                 self.openBoard(data: data)
            case "whiteboard":

                let params = JSON.init(parseJSON:data["params"]! )
                self.whiteboardSwitch(params: params)
            case "face":
                let params = JSON.init(parseJSON:data["params"]!)
                self.teachingActivity(data: params)

            default:
                print(11)
            }
    }

    fileprivate  func  whiteboardSwitch (params:JSON){
        switch params["type"] {
        case "jumpPage":
            self.jumpPage(params: params)
        case "pptView":
            self.pptView(params: params)
        default:
            self.imageOperate(data: params)
        }

    }

    /**
     * ppt word 翻页 发送 socket
     * @return {this}
     */
    fileprivate func jumpPage(params:JSON){
        let pcSocket = ZQSocketManager.LocalSocket.defaultSocket
        var  action = [
            "actionType": "control",
            "cellId": params["cellId"].stringValue,
            "courseId":"",
            "classId": "",
            "page": params["page"].intValue,
            "operate": "to"
            ] as [String : Any] ,receiver = [
            "userType": "teacher",
            "equipment": "web",
            "userId": Account.defaultAccount.id!
        ];
        if (!params["animateIndex"].stringValue.isEmpty) {
            action["animateIndex"] = params["animateIndex"].intValue;
        }
       let send = [
            "sendId": Account.defaultAccount.id!,
            "receiveType": "user",
            "receiver":receiver,
            "action":action
        ] as [String : Any];
        pcSocket.emit("order",[JSON.init(send).description] );
    }

    /**
     * HTML5 PPT 预览  上一页，下一页通知
     * params
     * @return {this}
     */
    fileprivate func pptView(params:JSON){
        let pcSocket = ZQSocketManager.LocalSocket.defaultSocket
        let screenW = UIScreen.main.bounds.width,
        screenH = UIScreen.main.bounds.height;
        var   screen = [ "width": screenH, "height": screenW - 40, "scale": UIScreen.main.scale ]
        if (screenW > screenH) {
            screen = [ "width": screenW, "height": screenH - 40, "scale": UIScreen.main.scale ]
        }
        let action = [
            "actionType": "control",
            "cellId": params["cellId"].stringValue,
            "courseId": "",
            "operate":  params["direction"].stringValue ,
            "page":  params["page"].intValue,
            "animateIndex": params["animateIndex"].intValue,
            "screen": screen,
            "classId":""
            ] as [String : Any],
        receiver = [
                "userType": "teacher",
                "equipment": "web",
                "userId": Account.defaultAccount.id!
        ];

        let send = [
            "sendId": Account.defaultAccount.id!,
            "receiveType": "user",
            "receiver":receiver,
            "action":action
            ] as [String : Any];
        pcSocket.emit("order",[JSON.init(send).description] );
    }

    //确认登陆
    func confirmLogin(data:[String : Any]){
        let pcSocket = ZQSocketManager.LocalSocket.defaultSocket
        let action = ["actionType":"confirmLogin","token":"111111"]
        let send = ["sendId":Account.defaultAccount.id!,
                    "receiveType":"id",
                    "socketId":self.socketId,
                    "action":action] as [String : Any]

        pcSocket.emit("order",[JSON.init(send).description] );
    }
    //退出投屏
    func exitPC(data:[String : Any]){
        let pcSocket = ZQSocketManager.LocalSocket.defaultSocket
        let action = ["actionType":"exit"]
        let receiver = ["userType":"teacher",
                        "equipment":"web",
                        "userId":Account.defaultAccount.id!]
        let send = ["sendId":Account.defaultAccount.id!,
                    "receiveType":"user",
                    "action":action,
                    "receiver":receiver] as [String : Any]

        pcSocket.emit("order",[JSON.init(send).description] );

        //注意并没有断开

    }


    ///  打开课件
    ///
    /// - Parameter data: 指令

    fileprivate func openRes(data:[String : String]){
        let pcSocket = ZQSocketManager.LocalSocket.defaultSocket
        let screenW = UIScreen.main.bounds.width,
        screenH = UIScreen.main.bounds.height;
        var   screen = [ "width": screenH, "height": screenW - 40, "scale": UIScreen.main.scale ]
        if (screenW > screenH) {
            screen = [ "width": screenW, "height": screenH - 40, "scale": UIScreen.main.scale ]
        }

        let action =  [
            "actionType": "open",
            "cellId": data["cellId"] ?? "",
            "courseId": "wsqw",
            "classId": "qwsqw" ,
            "fromRes": data["fromRes"] ?? "",
            "screen": screen
            ] as [String : Any],
        receiver =  [
            "userType": "teacher",
            "equipment": "web",
            "userId": Account.defaultAccount.id!,
            ],
        send = [
            "sendId": Account.defaultAccount.id!,
            "receiveType": "user",
            "receiver":receiver,
            "action":action
            ] as [String : Any]

         pcSocket.emit("order",[JSON.init(send).description] );


    }

    //关闭投屏内容，回到起始页
    fileprivate func closeRes(){
        let pcSocket = ZQSocketManager.LocalSocket.defaultSocket,
        send = [
                "sendId": Account.defaultAccount.id!,
                "receiveType": "user",
                "receiver": [
                    "userType": "teacher",
                    "equipment": "web",
                    "userId": Account.defaultAccount.id!
                ],
                "action": [
                    "actionType": "close",
                ]
            ] as [String : Any];
         pcSocket.emit("order",[JSON.init(send).description] );
    }

    //打开白板 - 图片
    fileprivate func openBoard(data:[String : Any]){

        let pcSocket = ZQSocketManager.LocalSocket.defaultSocket
        let screenW = UIScreen.main.bounds.width,
        screenH = UIScreen.main.bounds.height;
        var   screen = [ "width": screenH, "height": screenW - 40, "scale": UIScreen.main.scale ]
        if (screenW > screenH) {
            screen = [ "width": screenW, "height": screenH - 40, "scale": UIScreen.main.scale ]
        }

        let action =  [
            "actionType": "openBoard",
            "courseId": "wsqw",
            "classId": "qwsqw" ,
            "fromRes": data["fromRes"] as? String ?? "" ,
            "screen": screen,
            "img": data["img"] as? String ?? "" 
            ] as [String : Any],
        receiver =  [
            "userType": "teacher",
            "equipment": "web",
            "userId": Account.defaultAccount.id!,
            ],
        send = [
            "sendId": Account.defaultAccount.id!,
            "receiveType": "user",
            "receiver":receiver,
            "action":action
            ] as [String : Any]

        pcSocket.emit("order",[JSON.init(send).description] );

    }

    /**
     * 发送画笔操作指令
     * @return {this}
     */

    ///
    ///发送画笔操作指令
    /// - Parameter data: <#data description#>

    fileprivate func imageOperate(data:JSON){

        let pcSocket = ZQSocketManager.LocalSocket.defaultSocket
        var  receiver = [
                    "userType": "teacher",
                    "equipment": "web",
                    "userId": Account.defaultAccount.id!,
                    "socketType": "myComputer"],
            action = [
                    "actionType": "imageOperate",
                    "operate": data["operate"],
                    "classId": "无"]


        // 画笔操作
        if (data["operate"] == "pen") {
            action["color"] = data["color"];
            action["width"] = data["width"];
            action["paint"] = data["points"];
        }

        // 橡皮擦操作
        if (data["operate"]  == "eraser") {
             action["operate"] = "open";
             action["paint"] =  data["points"];
//             action["paint"]!!["size"] = data["size"];
        }
//
//        // 白板图片内容
//        if (data.img) {
//            send.action.img = data.img;
//        }
//
//        //图片的缩放
        if (data["operate"] == "zoom") {
            action["scale"] = data["scale"];
            action["left"] = data["left"];
            action["top"] = data["top"];
        }
//
//        //旋转
        if (data["operate"] == "rotate") {
            action["scale"] = data["scale"];
            action["angle"] = data["angle"];
            action["left"] = data["left"];
            action["top"] = data["top"];
        }
//
//        //加载白板
        if (data["operate"] == "reload") {
            action["noInternet"] =  ""//data["noInternet"];

            action["img"] = data["img"];
         }

        let send = [
            "sendId": Account.defaultAccount.id!,
            "receiveType": "user",
            "receiver":receiver,
            "action":action] as [String : Any];
        pcSocket.emit("order",[JSON.init(send).description] );

    }
    //投屏视频播放操作
    fileprivate func videoEvents(data:[String : String]){

        let pcSocket = ZQSocketManager.LocalSocket.defaultSocket;

        let receiver = [
            "userType": "teacher",
            "equipment": "web",
            "userId":Account.defaultAccount.id!
        ],
        action = [
            "actionType": "control",
            "operate": data["name"]!,
            "cellId": data["cellId"]!,
            "courseId": data["courseId"]!,
            "fromRes": "",
            "position" : data["position"] ?? "0"
            ] as [String : Any],
        send = [
            "sendId": Account.defaultAccount.id!,
            "receiveType": "user",
            "receiver":receiver,
            "action":action
            ] as [String : Any];
       
         pcSocket.emit("order",[JSON.init(send).description] );
    }


    /// 课堂教学中的活动
    ///
    /// - Parameter data: json
    fileprivate func teachingActivity(data:JSON){
        let pcSocket = ZQSocketManager.LocalSocket.defaultSocket;
        
        let receiver = [
            "userType": "teacher",
            "equipment": "web",
            "userId":Account.defaultAccount.id!
        ];

       var action = [
            "actionType": data["type"].stringValue,
            "courseId": data["courseId"].stringValue,
            "courseName": data["courseName"].stringValue,
            "studycount": data["studycount"].stringValue,
            "studentNumber" : data["studentNumber"].stringValue,
            "title":data["title"].stringValue,
            "content":data["content"].stringValue,
            "teacherId":Account.defaultAccount.id!,
            "activityId":data["activityId"].stringValue,
            "send2student":data["send2student"].boolValue,
            "classId": data["classId"] ?? "0",
            ] as [String : Any];

            switch (data["type"]) {
            case "signing":
                 action["signId"] = data["signId"].stringValue
                 action["signType"] = data["signType"].stringValue
                 action["numbers"] = data["numbers"].stringValue
            case "signed":


                action = ["actId":data["actId"].stringValue,
                          "name":data["displayName"].stringValue,
                          "sendId":data["userId"].stringValue,
                          "actionType": data["type"].stringValue]
                print(action)

            case "signResult":
                action = ["notSignUser":data["notSignUser"],
                          "actionType": data["type"].stringValue]
            case "signAnalysis":

                
                action = ["activityId":data["activityId"].stringValue,
                          "courseOpenId":data["courseOpenId"].stringValue,
                          "signId":data["signId"].stringValue,
                          "fromRes": false,
                          "actionType": data["type"].stringValue]
                print(action)
            case "discussDetail":

                action = ["avatar":data["avatar"].stringValue,
                          "appreciate":data["appreciate"].stringValue,
                          "content":data["content"].stringValue,
                          "name":data["name"].stringValue,
                         
                          "actionType": data["type"].stringValue]
            case "pkinfo":
                action = ["pkgroup":data["pkgroup"],
                          "actionType": data["type"].stringValue]
            case "brainStorming":
                action["stormId"] = data["stormId"].stringValue
            case "brainStormEnd":
                action["actId"] = data["brainStormId"].stringValue
            case "brainstorming_student":

                action = ["id":data["actId"].stringValue,
                          "isFirst":data["isFirst"].boolValue,
                          "userId":data["userId"].stringValue,
                          "name":data["displayName"].stringValue,
                          "actionType": data["type"].stringValue]
            case "brainstormInfo":

                action = ["actionType": data["type"].stringValue,
                          "name":data["name"].stringValue,
                          "content":data["content"].stringValue,
                          "appreciate":data["appreciate"].stringValue,
                          "stormId":data["stormId"].stringValue]
            case "shakeStudents":
                action = ["userInfo":data["userInfo"],
                          "actionType": data["type"].stringValue]
            case "markScoreForStudent":
                action = ["score":data["score"],
                          "name":data["name"],
                          "id":data["id"].stringValue,
                          "actionType": data["type"].stringValue]
            case "discussing":
                action = ["actionType":data["type"],
                          "actId":data["discussId"],
                          "courseId":"",
                          "studycount": data["studycount"],
                          "topicId":data["topicId"],
                          "classId":""]
            case "responding":

                action = ["actionType":data["type"],
                          "askId":data["askId"],
                          "activityId":data["activityId"],
                          "send2student": data["send2student"],
                          "courseOpenId":data["courseOpenId"],
                          "teacherId":Account.defaultAccount.id!]
            case "examing":
              action  = ["actionType":"examing",
                              "examId":data["examId"],
                              "classId":data["classId"],
                              "courseId":data["courseId"],
                            "studycount":data["studycount"],
                              "studentNumber":data["studentNumber"] ,
                              "fromRes":false] as [String : Any];
            case "examed":

                action = ["actionType":data["type"],
                          "actId":data["actId"],
                          "name":data["displayName"],
                          "isFirst": data["isFirst"]
                         ]
            case "examAnalysis":

                action = ["actionType":data["type"],
                "data":data["data"],
                "fromRes":data["fromRes"]
                ]
            case "questionAnalysis":

               let  d = ["data":data["data"]]
                action = ["actionType":data["type"].stringValue,
                          "data":d,
                          "order":data["order"]
                ]
            case "questionAnalysisBack":

                action = ["actionType":data["type"],
                          "fromRes":data["fromRes"]
                ]
            case "control":
                action = ["actionType":data["type"],
                          "operate":data["name"]
                ]
            case "vote" :

                action = ["actionType":data["type"],
                          "data":data["data"]]
            default:
                break;
            }

       let send = [
            "sendId":data["userId"],
            "receiveType": "user",
            "receiver":receiver,
            "action":action
            ] as [String : Any];
        
        pcSocket.emit("order",[JSON.init(send).description] );

    }
 

}
