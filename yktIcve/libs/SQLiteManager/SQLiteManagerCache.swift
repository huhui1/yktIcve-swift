//
//  SQLiteManagerCache.swift
//  云课堂2
//SQLiteManagerCache
//  Created by 尤增强 on 2018/5/28.
//  Copyright © 2018年 jcjy. All rights reserved.
//

import UIKit
import SQLite

struct SQLiteManagerCache {

    private var db: Connection!
    private let CacheDoc = Table("CacheDoc") //表名
    private let id = Expression<String>("id")      //主键
    private let userId = Expression<String>("userId")  //用户ID
    private let docPath = Expression<String>("docPath") //存储路径
    private let docType = Expression<Int>("docType")      //文件类型
    private let docTitle = Expression<String>("docTitle")  //文件名称
    private let docSize = Expression<Int64>("docSize") //文件大小



    init() {
        createdsqlite3()
    }

    //创建数据库文件
    mutating func createdsqlite3(filePath: String = "/Documents")  {

        let sqlFilePath = NSHomeDirectory() + filePath + "/db.sqlite3"
        do {
            db = try Connection(sqlFilePath)
            try db.run(CacheDoc.create { t in
                t.column(id, primaryKey: true)
                t.column(userId)
                t.column(docPath, unique: true)
                t.column(docType)
                t.column(docTitle, unique: true)
                t.column(docSize, unique: true)
            })
        } catch { print(error) }
    }

    //插入数据
    func insertData(_id:String ,_userId: String, _docPath: String,_docTitle:String,_docSize:Int64,_docType:Int){
        do {
            let insert = CacheDoc.insert(id <- _id, userId <- _userId,docPath <- _docPath,docTitle <- _docTitle,docSize <- _docSize,docType <- _docType)
            try db.run(insert)
        } catch {
            print(error)
        }
    }

    //读取数据
    func readData(_userId:String) -> [CacheDocModel] {

        var cacheDataArr = [CacheDocModel]()
        for doc in try! db.prepare(CacheDoc.filter(userId == _userId)) {

            let cacheData = CacheDocModel.init(Id: doc[id], userId: doc[userId], docPath: doc[docPath], docTitle: doc[docTitle],docSize: doc[docSize] , docType: doc[docType])
            cacheDataArr.append(cacheData)
        }
        return cacheDataArr
    }


    func readOneData(_userId:String,docId:String) -> CacheDocModel {
        let cacheData = CacheDocModel.init(Id: "", userId: "", docPath: "", docTitle: "", docSize: Int64(0) , docType: 0)

        for doc in try! db.prepare(CacheDoc.filter(userId == _userId && id == docId)) {
            cacheData.id = doc[id]
            cacheData.userId = doc[userId]
            cacheData.docPath = doc[docPath]
            cacheData.docTitle = doc[docTitle]
            cacheData.docSize = doc[docSize]
            cacheData.docType = doc[docType]
        }
        return cacheData
    }

    //更新数据
//    func updateData(Id: String , old_name: String, new_name: String) {
//        let currCacheDoc = CacheDoc.filter(id == Id)
//        do {
//            try db.run(currCacheDoc.update(name <- name.replace(old_name, with: new_name)))
//        } catch {
//            print(error)
//        }
//
//    }

    //删除数据
    func delData(Id: String) {
        let currCacheDoc = CacheDoc.filter(id == Id)
        do {
            try db.run(currCacheDoc.delete())
        } catch {
            print(error)
        }
    }
}


