//
//  SQLiteManagerMask.swift
//  云课堂2
//
//  Created by 尤增强 on 2018/5/28.
//  Copyright © 2018年 jcjy. All rights reserved.
//

import UIKit
import SQLite

struct SQLiteManagerMask{

    private var db: Connection!
    private let Mask = Table("Mask1") //表名
    private let userId = Expression<String>("userId")
    //主键
    private let isbrowseDiscuss = Expression<Bool>("isbrowseDiscuss")
    //是否浏览过讨论提示
    private let isbrowseTest = Expression<Bool>("isbrowseTest")
    //是否浏览过测验
    private let isbrowseQrcode = Expression<Bool>("isbrowseQrcode")
    //是否浏览过学生二维码
    private let isbrowserefresh = Expression<Bool>("isbrowserefresh")
    //是否浏览过刷新
    private let isbrowserequireInfo = Expression<Bool>("isbrowserequireInfo")
    //是否浏览过课前要求评论
    private let isbrowselessonmore = Expression<Bool>("isbrowselessonmore")
    //是否浏览过更多
    private let isbrowselessonTuwen = Expression<Bool>("isbrowselessonTuwen")
    //学生课件下图文的讨论
    private let isbrowselessonaudioDiscuss = Expression<Bool>("isbrowselessonaudioDiscuss")
    //音频播放下的讨论
    private let isbrowselessonVideoDiscuss = Expression<Bool>("isbrowselessonVideoDiscuss")
    //视频下的讨论
    private let isbrowselessonH5PPTDiscuss = Expression<Bool>("isbrowselessonH5PPTDiscuss")
    //H5ppt下的讨论
    private let isbrowselessonPPTDiscuss = Expression<Bool>("isbrowselessonPPTDiscuss")
    //ppt下的讨论
    init() {
        createdsqlite3()
    }

    //创建数据库文件
    mutating func createdsqlite3(filePath: String = "/Documents")  {

        let sqlFilePath = NSHomeDirectory() + filePath + "/db.sqlite3"
        print(sqlFilePath)
        do { // 与数据库建立连接
            db = try Connection(sqlFilePath)
            print("与数据库建立连接 成功")
        } catch {
            print("与数据库建立连接 失败：\(error)")
        }
        
//        do {
//            db = try Connection(sqlFilePath)
//            try db.run(Mask.create { t in
//                t.column(userId, primaryKey: true)
//                t.column(isbrowseDiscuss,unique: true)
//                t.column(isbrowseQrcode, unique: true)
//                t.column(isbrowserefresh,unique: true)
//                t.column(isbrowserequireInfo, unique: true)
//                t.column(isbrowseTest, unique: true)
//                t.column(isbrowselessonmore, unique: true)
//                t.column(isbrowselessonTuwen, unique: true)
//                t.column(isbrowselessonaudioDiscuss, unique: true)
//                t.column(isbrowselessonVideoDiscuss, unique: true)
//                t.column(isbrowselessonH5PPTDiscuss, unique: true)
//                t.column(isbrowselessonPPTDiscuss, unique: true)
//            })
//        } catch { print(error) }
    }
    // 建表
    func tableLampCreate() -> Void {
        do {
            try db.run(Mask.create { t in
                t.column(userId, primaryKey: true)
                t.column(isbrowseDiscuss)
                t.column(isbrowseQrcode)
                t.column(isbrowserefresh)
                t.column(isbrowserequireInfo)
                t.column(isbrowseTest)
                t.column(isbrowselessonmore)
                t.column(isbrowselessonTuwen)
                t.column(isbrowselessonaudioDiscuss)
                t.column(isbrowselessonVideoDiscuss)
                t.column(isbrowselessonH5PPTDiscuss)
                t.column(isbrowselessonPPTDiscuss)
            })
             print("创建表 TABLE_LAMP 成功")
        } catch {
            print(error)
            print("创建表 TABLE_LAMP 失败：\(error)")
        }
        
    }
    
    
    //插入数据
    func insertData(_userId:String ,_isbrowseDiscuss: Bool, _isbrowseQrcode: Bool,_isbrowserefresh:Bool,_isbrowserequireInfo:Bool,_isbrowseTest:Bool,_isbrowselessonmore:Bool,_isbrowselessonTuwen:Bool,_isbrowselessonaudioDiscuss:Bool,_isbrowselessonVideoDiscuss:Bool,_isbrowselessonH5PPTDiscuss:Bool,_isbrowselessonPPTDiscuss:Bool){
        do {
            let insert = Mask.insert(userId <- _userId, isbrowseDiscuss <- _isbrowseDiscuss,isbrowseQrcode <- _isbrowseQrcode,isbrowserefresh <- _isbrowserefresh,isbrowserequireInfo <- _isbrowserequireInfo,isbrowseTest <- _isbrowseTest,isbrowselessonmore <- _isbrowselessonmore,isbrowselessonTuwen <- _isbrowselessonTuwen,isbrowselessonaudioDiscuss <- _isbrowselessonaudioDiscuss,isbrowselessonVideoDiscuss <- _isbrowselessonVideoDiscuss,isbrowselessonH5PPTDiscuss <- _isbrowselessonH5PPTDiscuss,isbrowselessonPPTDiscuss <- _isbrowselessonPPTDiscuss)
            try db.run(insert)
        } catch {
            print(error)
        }
    }

    func readOneData(_userId:String) -> MaskModel {
        let t = MaskModel.init(userId: _userId, isbrowseDiscuss: false, isbrowseTest: false, isbrowseQrcode: false, isbrowserefresh: false, isbrowselessonmore: false, isbrowserequireInfo: false,isbrowselessonTuwen: false, isbrowselessonaudioDiscuss: false, isbrowselessonVideoDiscuss: false,isbrowselessonH5PPTDiscuss: false,isbrowselessonPPTDiscuss:false)
        for doc in try! db.prepare(Mask.filter(userId == _userId)) {
            t.userId = doc[userId]
            t.isbrowseDiscuss = doc[isbrowseDiscuss]
            t.isbrowserefresh = doc[isbrowserefresh]
            t.isbrowselessonmore = doc[isbrowselessonmore]
            t.isbrowserequireInfo = doc[isbrowserequireInfo]
            t.isbrowseTest = doc[isbrowseTest]
            t.isbrowseQrcode = doc[isbrowseQrcode]
            t.isbrowselessonTuwen = doc[isbrowselessonTuwen]
            t.isbrowselessonaudioDiscuss = doc[isbrowselessonaudioDiscuss]
            t.isbrowselessonVideoDiscuss = doc[isbrowselessonVideoDiscuss]
            t.isbrowselessonH5PPTDiscuss = doc[isbrowselessonH5PPTDiscuss]
            t.isbrowselessonPPTDiscuss = doc[isbrowselessonPPTDiscuss]
        }
        return t
    }
    //更新数据
    func updateData(isType:String){
        let currMask = Mask.filter(userId == Account.defaultAccount.id!)
        do {
            switch isType {
            case "isbrowseQrcode":
                  try db.run(currMask.update(isbrowseQrcode <- true))
            case "isbrowseDiscuss":
                  try db.run(currMask.update(isbrowseDiscuss <- true))
            case "isbrowseTest":
                  try db.run(currMask.update(isbrowseTest <- true))
            case "isbrowserefresh":
                  try db.run(currMask.update(isbrowserefresh <- true))
            case "isbrowselessonmore":
                  try db.run(currMask.update(isbrowselessonmore <- true))
            case "isbrowserequireInfo":
                  try db.run(currMask.update(isbrowserequireInfo <- true))
            case "isbrowselessonTuwen":
                try db.run(currMask.update(isbrowselessonTuwen <- true))
            case "isbrowselessonaudioDiscuss":
                try db.run(currMask.update(isbrowselessonaudioDiscuss <- true))
            case "isbrowselessonVideoDiscuss":
                try db.run(currMask.update(isbrowselessonVideoDiscuss <- true))
            case "isbrowselessonH5PPTDiscuss":
                try db.run(currMask.update(isbrowselessonH5PPTDiscuss <- true))
            case "isbrowselessonPPTDiscuss":
                try db.run(currMask.update(isbrowselessonPPTDiscuss <- true))
            default:
                print("暂无类型")
            }
        } catch {
            print(error)
        }
    
    }

}
