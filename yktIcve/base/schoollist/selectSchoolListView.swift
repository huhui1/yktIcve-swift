//
//  schoolListView.swift
//  云课堂职教云
//
//  Created by 尤增强 on 2018/3/19.
//  Copyright © 2018年 jcjy. All rights reserved.
//

import UIKit
import SwiftyJSON

class selectSchoolListView: UIViewController,UITableViewDelegate,UITableViewDataSource,UISearchBarDelegate {
   
    //用于判断网络链接
    let reachability = Reachability()
    override func viewDidLoad() {
        
    
        super.viewDidLoad()
        self.view.backgroundColor = UIColor.white
        self.setUI()
        
        path = Bundle.main.path(forResource: "SchoolList", ofType: ".plist")!;
        self.schoolList = NSArray(contentsOfFile: path) as! [Dictionary<String, String>]
        self.Mlist = self.schoolList
       
    }
    
    //设置页面
    func setUI(){
            self.view.addSubview(sreachBar)
            if(common.share.isX()){
                ht = 30
            }
            if(self.navigationController == nil){
                let headUI = headBackUI()
                headUI.backgroundColor = UIColor.bg
                headUI.frame = CGRect.init(x: 0, y: 0, width: UIScreen.main.bounds.width, height: 60 + CGFloat(ht))
                
                self.view.addSubview(headUI)
                headUI.btn_back.addTarget(self, action: #selector(self.headUIBack), for: .touchUpInside)
                
                headUI.btn_refresh.addTarget(self, action: #selector(self.getschoolList), for: .touchUpInside)
                
                //判断是否连接
                if reachability?.connection != .nonenet{
                    headUI.btn_refresh.isHidden = false
                }
                else{
                     headUI.btn_refresh.isHidden = true
                }
                //搜索框
                self.sreachBar.snp.makeConstraints { (make) in
                    make.width.equalTo(UIScreen.main.bounds.width)
                    make.height.equalTo(40)
                    make.centerX.equalTo(self.view.snp.centerX)
                    make.top.equalTo(headUI.snp.bottom)
                }
                
              }else{
                
                let refreshItem = UIBarButtonItem.init(title: "刷新", style: UIBarButtonItemStyle.plain, target: self, action: #selector(self.getschoolList));
                self.navigationController?.navigationBar.tintColor = UIColor.white
                self.navigationItem.rightBarButtonItem = refreshItem;
                
                
                //带导航添加搜索框
                self.sreachBar.snp.makeConstraints { (make) in
                    make.width.equalTo(UIScreen.main.bounds.width)
                    make.height.equalTo(40)
                    make.centerX.equalTo(self.view.snp.centerX)
                    make.top.equalTo(0)
                }
                
            }
        
            self.sreachBar.delegate = self
            if(self.navigationController == nil){
             self.tableView = UITableView.init(frame:  CGRect(x:0, y:100 + CGFloat(ht), width:self.view.bounds.width, height:self.view.bounds.height - 100 -  CGFloat(ht)))
            }else{
             self.tableView = UITableView.init(frame:  CGRect(x:0, y:40, width:self.view.bounds.width, height:self.view.bounds.height - 40))
            }
            self.tableView.register(UITableViewCell.self, forCellReuseIdentifier: "cellID")
            self.tableView.delegate = self;
            self.tableView.dataSource = self;
            self.tableView.tableFooterView = UIView(frame:CGRect.zero)//除去多余的cell
            self.tableView.separatorInset = UIEdgeInsets.zero;
            self.tableView.layoutMargins = UIEdgeInsets.zero;
            // 设置索引值颜色
            self.tableView.sectionIndexColor = UIColor.gray
            // 设置选中时的索引背景颜色
            self.tableView.sectionIndexTrackingBackgroundColor = UIColor.colorWithHex(hexColor: 0xf2f2f2)
            // 设置索引的背景颜色
            self.tableView.sectionIndexBackgroundColor = UIColor.colorWithHex(hexColor: 0xf2f2f2)
            
            
            if #available(iOS 9.0, *) {
                self.tableView.cellLayoutMarginsFollowReadableWidth = false
            } else {
                // Fallback on earlier versions
            }
            self.view.addSubview(self.tableView);
        
        //判断是否连接,连接
        if(type != 1){
            if reachability?.connection != .nonenet{
                self.maskView()
            }
        }

    }
    

    //实现索引数据源代理方法
    func sectionIndexTitles(for tableView: UITableView) -> [String]? {
        return SchoolHeaders
    }
    //点击索引，移动TableView的组位置
    func tableView(_ tableView: UITableView,
                   sectionForSectionIndexTitle title: String, at index: Int) -> Int {
        var tpIndex:Int = 0
        //遍历索引值
        for character in SchoolHeaders{
            //判断索引值和组名称相等，返回组坐标
            
            if character == title{
                return tpIndex
            }
            tpIndex += 1
        }
        return 0
    }
    
    //设置分区数
    func numberOfSections(in tableView: UITableView) -> Int {
        // #warning Incomplete implementation, return the number of sections
        return SchoolHeaders.count
    }
    //返回表格行数
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        let t = self.getlistByLetter(letter: self.SchoolHeaders[section])
        self.Blist[self.SchoolHeaders[section]] = t
        return t.count
    }
    // UITableViewDataSource协议中的方法，该方法的返回值决定指定分区的头部
    func tableView(_ tableView: UITableView, titleForHeaderInSection
        section: Int) -> String? {
        
        return self.SchoolHeaders[section]
    }
    
    //设置分组尾的高度(将分组尾的高度设置为 0.01，消除分组尾空间)
    func tableView(_ tableView: UITableView, heightForFooterInSection section: Int)
        -> CGFloat {
            return 10
    }
    //将分组为设置为一个空的View（否则iOS11系统下光设个高度没用）
    func tableView(_ tableView: UITableView, viewForFooterInSection section: Int)
        -> UIView? {
            let v = UIView()
            
            return v
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell:UITableViewCell = UITableViewCell(style: UITableViewCellStyle.default, reuseIdentifier: "cellID")
        let data = self.Blist[self.SchoolHeaders[indexPath.section]]![indexPath.row]
        cell.textLabel?.text = data["NM"]
        return cell
    }
    //点击
     func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let data = self.Blist[self.SchoolHeaders[indexPath.section]]![indexPath.row]
        if(type==1){
            self.reloadSchoolClosure!(data["Id"]!,data["NM"]!)
            self.navigationController?.popViewController(animated: true)
        }else{
            self.reloadSchoolClosure!(data["Id"]!,data["NM"]!)
            self.presentingViewController?.dismiss(animated: true, completion: nil);
        }
    }
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 50
    }
    
    
    fileprivate func getlistByLetter(letter :String) ->Array<Dictionary<String,String>>{
        var t = [Dictionary<String,String>]()

        for i in 0..<self.Mlist.count{
            if self.Mlist[i]["letter"] == letter{
                t.append(self.Mlist[i])
            }
        }
        return t
    }
   
    @objc func headUIBack(){
        self.dismiss(animated: true, completion: nil)
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
   
    var reloadSchoolClosure :((_ SchoolId:String,_ SchoolName:String) ->Void)?
    //type==1是代表从主持课程进
    lazy var type :Int = {
        return 0
    }()
  
    lazy var makeView:UIView = {
        return UIView.init(frame: self.view.frame)
    }()

    func backallvcs(){
        self.presentingViewController?.dismiss(animated: true, completion: nil);
      
    }
   
    var tableView :UITableView!

  
    //临时存储容器
    lazy var Mlist = [Dictionary<String,String>]()
    //存储学校列表以键值对存数组
    fileprivate lazy var Blist = Dictionary<String,Array<Dictionary<String,String>>>()
    //所有数据来自本地或接口
    var schoolList = [Dictionary<String,String>]()
    
    var path:String = ""
    var schoolplistArray:[String]  = []
    var SchoolHeaders:[String] = ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","#"]
    var searchHeaders = [String]()
    lazy var sreachBar :UISearchBar  = {
        let searech = UISearchBar()
        searech.tintColor = UIColor.bg
        // 去除背景及上下两条横线
        searech.setBackgroundImage(UIImage(), for: .any, barMetrics: .default)
        searech.placeholder = "搜索学校"
        return searech
    }()
    var ht = 0
}




