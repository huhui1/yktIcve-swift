//
//  zjyVideoPlayViewController.swift
//  云课堂2
//
//  Created by 尤增强 on 2018/7/3.
//  Copyright © 2018年 zqyou. All rights reserved.
//

import UIKit
import  SwiftyJSON
import BMPlayer
import Alamofire
extension zjyVideoPlayView{

    //设置url
    func setvideoUrl(){
        let header = ["User-Agent":"BMPlayer"]
        let options = ["AVURLAssetHTTPHeaderFieldsKey":header]

        var res = [BMPlayerResourceDefinition]()
        
        if (self.videourls.count  > 1 ){
            //数组排序
            self.videourls.sort(){
                $0 < $1
            }
        }
       
        for i in self.videourls{
            let res0 = BMPlayerResourceDefinition(url: URL(string: i)!,
                                                  definition: self.judgevideo(str: i), options: options)
            res.append(res0)
        }
        let asset = BMPlayerResource(name:  self.videotittle,
                                     definitions: res,
                                     cover: URL(string: "http://img.wdjimg.com/image/video/447f973848167ee5e44b67c8d4df9839_0_0.jpeg"))
        if(asset.definitions.count < 1){
            ZKProgressHUD.showMessage("视频解析出错")
            return 
        }
        self.player.setVideo(resource: asset)

        if(self.leavelocation > 0){
            self.player.seek(TimeInterval(self.leavelocation))
        }
        //初使不播放
        self.player.pause()
    }


   //投屏事件
    func emitToPC(dict:[String:String]){

       ZQSocketManager.share.notificationSocketManager(data: dict)
    }

    //判断视频时原画，高清
  fileprivate  func judgevideo(str:String) -> String{
        var type = "标清"
        let result = String(str.suffix(8))
        switch result{
        case "360p.mp4":
            type = "标清"
        case "480p.mp4":
            type = "高清"
        case "720p.mp4":
            type = "原画"
        default:
            type = "标清"
        }
        return type
    }
    
    
    //网络状态
    func NetWorkState(){
        //判断是否连接
        if reachability?.connection != .nonenet{
            if reachability?.connection == .cellular {
                print("连接类型：移动网络")
                let alertController = UIAlertController(title: "温馨提示!", message: "当前为移动网络,是否继续", preferredStyle: .alert)
                //设置 Actions   点击出发的响应事件都写在相应的代码块里
                let noAction = UIAlertAction(title: "返回", style: .default){ (action) -> Void in
                    self.navigationController?.popViewController(animated: true)
                }
                let yesAction = UIAlertAction(title: "确定", style: .default)
                { (action) -> Void in
                    self.player.play()
                    if(self.leavelocation > 0){
                        self.player.seek(TimeInterval(self.leavelocation))
                    }
                }
                //添加 Actions，添加的先后和显示的先后顺序是有关系的
                alertController.addAction(noAction)
                alertController.addAction(yesAction)
                //展示Alert Controller
                self.present(alertController, animated: true, completion: nil)
            }
        }
        else{
            ZKProgressHUD.showError("网络环境异常请稍后再试！");
        }
    }


    @objc func actionBBSType(notice:NSNotification){
        let dict = notice.object as? Dictionary<String ,Any>
        if(dict!["type"] as! String == "create"){
            let vc = createCourseBBSView()
            vc.courseOpenId = self.courseOpenId
            vc.openClassId = self.openClassId
            vc.cellId = self.docId
            vc.activeType = "\(dict!["actionType"]!)"
            self.isPushed = true
            self.navigationController?.pushViewController(vc, animated: true)
        }else if(dict!["type"]  as! String  == "details"){
            let vc = CourseBBSDetailsView()
            vc.activeType = dict!["actionType"] as! Int
            vc.cellId = self.docId
            vc.openClassId = self.openClassId
            vc.courseOpenId = self.courseOpenId
            vc.evaluation = dict!["model"] as! evaluationModel
            vc.isMainTeacher = dict!["isMainTeacher"] as! Int
            self.isPushed = true
            self.navigationController?.pushViewController(vc, animated: true)
        }else if(dict!["type"]  as! String  == "teaching"){

            let vc = faceInfoView();
            vc.faceTimeStatus = dict!["state"] as! Int
            vc.activityId =  "\(dict!["activityId"]!)"
            vc.courseOpenId =  self.courseOpenId
            vc.openClassIds =   "\(dict!["openClassIds"]!)"
            self.isPushed = true
            self.navigationController?.pushViewController(vc, animated: true);
        }
    }
    
    //保存学习日志
    func savePlayLog(){
        let dict = ["openClassId":self.openClassId,
                    "courseOpenId":self.courseOpenId,
                    "cellId":self.docId,
                    "cellLogId":self.cellLogId,
                    "sourceType":3,
                    "studyCellTime":self.studyCellTime,
                    "picNum": 0,
                    "studyNewlyTime":self.Watchtime,
                    "studyNewlyPicNum":0,
                    "token":self.token] as [String : Any];
        XLBallLoading.show(in: self.view)
        Alamofire.request(appAPI.Student_stuProcessCellLog, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            
            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{
                    //已学习
                    self.StuCourseKJModel?.zjycellRefresh = "zjycellRefresh"
                }
                XLBallLoading.hide(in: self.view)
            }else{
                ZKProgressHUD.showError("网络环境异常请稍后再试！");
                XLBallLoading.hide(in: self.view)
            }
        }
        
        
    }
}

