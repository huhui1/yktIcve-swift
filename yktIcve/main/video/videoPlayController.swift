//
//  videoPlayController.swift
//  云课堂2
//
//  Created by 志辉教育 on 2018/6/5.
//  Copyright © 2018年 zqyou. All rights reserved.
//

import UIKit
import SwiftyJSON
import Alamofire
import BMPlayer
import AVFoundation
import SCLAlertView
import NVActivityIndicatorView
import SwiftyJSON
extension videoPlayView{
    //MOCC使用
    func getvideoUrl(){
        let dict = ["courseOpenId":self.courseOpenId,
                    "cellId":self.docId,
                    "userId":Account.defaultAccount.id!] as [String : Any]
        XLBallLoading.show(in: self.view)
        Alamofire.request(MOOCAPI.Mooc_coursestudy_viewDirectory, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
           
            if let value = response.result.value {
                XLBallLoading.hide(in: self.view)
                let json = JSON(value)
                self.videotittle = JSON(json["title"]).stringValue
                if json["code"] == 1{
                    getvideopage_count(jsonlist:json)
                }else{
                    ZKProgressHUD.showError(json["msg"].stringValue);
                }
                self.leavelocation = json["currentTime"].intValue
            }else{
                XLBallLoading.hide(in: self.view)
                ZKProgressHUD.showMessage("网络环境异常请稍后再试！")
            }
        }
        //MOOC请求pagecount
        func getvideopage_count(jsonlist:JSON){
            let str = JSON.init(parseJSON: jsonlist["resUrl"].stringValue)
            let strurl = str["urls"]["status"].stringValue
            XLBallLoading.show(in: self.view)
            Alamofire.request("\(strurl)", method: .post, encoding: URLEncoding.default).responseJSON { response in
                if let value = response.result.value {
                    XLBallLoading.hide(in: self.view)
                    let json = JSON(value)
                    self.videourls = []
                    //拼接URL
                    for (key, value) in json["args"]{
                        if str["urls"]["preview_oss_gen"].stringValue.isEmpty{
                            if value.boolValue{
                                let videoUrl = "\(str["urls"]["preview"].stringValue)/\(key).mp4"
                                self.videourls.append(videoUrl)
                            }
                        }else{
                            if value.boolValue{
                                let videoUrl = "\(str["urls"]["preview_oss_gen"].stringValue)/\(key).mp4"
                                self.videourls.append(videoUrl)
                            }
                        }
                        
                    }
                    self.setvideo()
                    }else{
                        XLBallLoading.hide(in: self.view)
                        ZKProgressHUD.showMessage("网络环境异常请稍后再试！")
                    }
                }
                XLBallLoading.hide(in: self.view)
            }
            
        }
    
    //MOOC记录日志
    @objc func savestudentlog(){
        let dict = ["courseOpenId":self.courseOpenId,
                    "cellId":self.docId,
                    "auvideoLength":Int(self.WatchMaxtime),
                    "videoTimeTotalLong":Int(self.videototalTime),
                    "userId":Account.defaultAccount.id!] as [String : Any]
        Alamofire.request(MOOCAPI.coursestudy_statStuProcessCellLogAndTimeLong, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{
                    if json["isStudy"].boolValue{
                        //已学习
                        self.MOOCCourseKJModel?.cellRefresh = "cellRefresh"
                    }
                }else{
                    //ZKProgressHUD.showError(json["msg"].stringValue);
                }
            }else{
                ZKProgressHUD.showMessage("网络环境异常请稍后再试！")
            }
        }
    }

    func setvideo(){
        let header = ["User-Agent":"BMPlayer"]
        let options = ["AVURLAssetHTTPHeaderFieldsKey":header]
        if( self.videourls.count < 1){

           SCLAlertView().showInfo("温馨提示！", subTitle: "文件暂无法查看，未完成转换或转换失败",closeButtonTitle: "确定")
            return 
        }
        //数组排序
        self.videourls.sort(){
            $0 < $1
        }

        var  Resource = [BMPlayerResourceDefinition]()
        for  i in self.videourls{
            if i.isEmpty {
                continue ;
            }
            let res = BMPlayerResourceDefinition(url: URL(string: i)!,
                                                definition: self.judgevideo(str: i), options: options)
            Resource.append(res)
        }

        let asset = BMPlayerResource(name:  self.videotittle,
                                     definitions: Resource,
                                     cover: URL(string: "http://img.wdjimg.com/image/video/447f973848167ee5e44b67c8d4df9839_0_0.jpeg"))
        self.player.setVideo(resource: asset)

        if(self.leavelocation > 0){
            self.player.seek(TimeInterval(self.leavelocation))
        }
        //初使不播放
//        self.player.pause()
        self.setLable()
    }
    //判断视频时原画，高清
    func judgevideo(str:String) -> String{
        var type = "标清"
        let result = String(str.suffix(8))
        switch result{
        case "360p.mp4":
            type = "标清"
        case "480p.mp4":
            type = "高清"
        case "720p.mp4":
            type = "超清"
        case "inal.mp4":
            type = "原画"
        default:
            type = "原画"
        }
        return type
    }
    
    //ZYk使用
    func getZykVideoResources(isRefresh:Bool){
        XLBallLoading.show(in: self.view)
        let dict = ["id": self.docId,
                    "courseId":self.courseOpenId,
                    "type":1,
                    "token":Account.defaultAccount.token!] as [String : Any]
        Alamofire.request(ZYKAPI.course_getVideo, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let json = JSON(value)
                XLBallLoading.hide(in: self.view)
                if json["code"] == 1{
                    self.videourls = []
                    let str = JSON.init(parseJSON: json["list"][0]["url"].stringValue)["urls"].dictionaryValue
                    //拼接URL
                    for (key, value) in str{
                        print(key)
                        print(value)
                        self.videourls.append(value.stringValue)
                    }
                    self.videototalTime = json["list"][0]["length"].intValue
                    self.ZykCourseKjModel?.sectionId = json["list"][0]["sectionId"].stringValue
                    self.setvideo()
                }else{
                    ZKProgressHUD.showError(json["msg"].stringValue);
                }
            }else{
                XLBallLoading.hide(in: self.view)
                ZKProgressHUD.showMessage("网络环境异常请稍后再试！")
            }
        }

    }
    //Zyk记录日志
    @objc func saveZykstudentlog(){
        if((Account.defaultAccount.id ) == nil){
            return
        }
        let dict = ["cellId":self.docId,
                    "length":Int(self.WatchMaxtime),
                    "userId":Account.defaultAccount.id!,
                    "token":Account.defaultAccount.token!] as [String : Any]
        Alamofire.request(ZYKAPI.course_updataDur, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{
                        //已学习
                    self.ZykCourseKjModel?.cellRefresh = "cellRefresh"
                }else{
                    //ZKProgressHUD.showError(json["msg"].stringValue);
                }
            }else{
                ZKProgressHUD.showMessage("网络环境异常请稍后再试！")
            }
        }
    }
    
    //网络状态
    func NetWorkState(){
        //判断是否连接
        if reachability?.connection != .nonenet{
            if reachability?.connection == .cellular {
                print("连接类型：移动网络")
                let alertController = UIAlertController(title: "温馨提示!", message: "当前为移动网络,是否继续？", preferredStyle: .alert)
                //设置 Actions   点击出发的响应事件都写在相应的代码块里
                let noAction = UIAlertAction(title: "返回", style: .default){ (action) -> Void in
                    self.navigationController?.popViewController(animated: true)
                }
                let yesAction = UIAlertAction(title: "确定", style: .default)
                { (action) -> Void in
                    self.player.play()
                }
                //添加 Actions，添加的先后和显示的先后顺序是有关系的
                alertController.addAction(noAction)
                alertController.addAction(yesAction)
                //展示Alert Controller
                self.present(alertController, animated: true, completion: nil)
            }
        }
        else{
            ZKProgressHUD.showError("网络环境异常请稍后再试！");
        }
    }
    
}
    
    
    
    
    
    


