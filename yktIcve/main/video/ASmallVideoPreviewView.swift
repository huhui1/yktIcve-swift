//
//  ASmallVideoPreviewView.swift
//  云课堂2
//  小视频预览
//  Created by 尤增强 on 2018/6/6.
//  Copyright © 2018年 zqyou. All rights reserved.
//

import UIKit
import BMPlayer
class ASmallVideoPreviewView: UIViewController {


    var videoURL :URL!
    override func viewDidLoad() {
        super.viewDidLoad()
        self.navigationController?.navigationBar.isHidden = true
        self.setUI()
        // Do any additional setup after loading the view.
    }
    //
    func setUI(){
        var resetBtnFrame = CGRect.init(x: 20, y: UIScreen.main.bounds.height - 80, width: 60, height: 30)
        let resetBtn = UIButton.init( )
        resetBtn.setTitle("重拍", for: .normal)

        resetBtn.setTitleColor(UIColor.lightGray, for: .normal)

         var doneBtnFrame = CGRect.init(x: UIScreen.main.bounds.width - 80, y: UIScreen.main.bounds.height - 80, width: 60, height: 30)
        let doneBtn =  UIButton.init()

        doneBtn.setTitle("发送", for: .normal)

        doneBtn.setTitleColor(UIColor.lightGray, for: .normal)
        if(UIDevice.current.model == "iPad"){
            doneBtnFrame = CGRect.init(x:  UIScreen.main.bounds.width - 80, y: UIScreen.main.bounds.height / 2 - 60, width: 60, height: 30)
            resetBtnFrame = CGRect.init(x:  UIScreen.main.bounds.width - 80, y: UIScreen.main.bounds.height / 2 + 60, width: 60, height: 30)
        }
        resetBtn.frame = resetBtnFrame
        doneBtn.frame = doneBtnFrame
        let  player = BMPlayer()

        player.addSubview(resetBtn)
        player.addSubview(doneBtn)

        view.addSubview(player)
        //        let header = ["User-Agent":"BMPlayer"]
        //        let options = ["AVURLAssetHTTPHeaderFieldsKey":header]
        player.snp.makeConstraints { (make) in
            make.top.height.width.equalTo(self.view)
            make.left.right.equalTo(self.view)
            // Note here, the aspect ratio 16:9 priority is lower than 1000 on the line, because the 4S iPhone aspect ratio is not 16:9
//            make.height.equalTo(player.snp.width).multipliedBy(9.0/16.0).priority(750)
        }
        // Back button event
        player.backBlock = { [unowned self] (isFullScreen) in
            if isFullScreen == true { return }
            let _ = self.navigationController?.popViewController(animated: true)
        }

        player.delegate = self

        player.backBlock = { [unowned self] (isFullScreen) in
            if isFullScreen {
                self.dismiss(animated: true, completion: nil)
            } else {
               self.dismiss(animated: true, completion: nil)

            }
        }

        let res0 = BMPlayerResourceDefinition(url: videoURL,
                                                  definition: "原画")

        let asset = BMPlayerResource(name: "",
                                                                          definitions: [res0],
                                                 cover: URL(string: "http://img.wdjimg.com/image/video/447f973848167ee5e44b67c8d4df9839_0_0.jpeg"))
        player.setVideo(resource: asset)

        resetBtn.addTarget(self, action: #selector(self.cancel), for: .touchUpInside)
        doneBtn.addTarget(self, action: #selector(self.done), for: .touchUpInside)
    }
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    

    //取消重拍
    @objc func cancel(){

        self.dismiss(animated: true, completion: nil)
    }

    //确定的事件
    @objc func done(){
        self.presentingViewController?.presentingViewController?.dismiss(animated: true, completion: nil)
        print("//确定的事件")
    }

}

// MARK:- BMPlayerDelegate example
extension ASmallVideoPreviewView: BMPlayerDelegate {
    func bmPlayerStartDownload() {
       print("")
    }

    func bmPlayer(player: BMPlayer, to: TimeInterval) {
        print(to)
    }

    // Call when player orinet changed
    func bmPlayer(player: BMPlayer, playerOrientChanged isFullscreen: Bool) {

        player.snp.remakeConstraints { (make) in
            make.top.equalTo(view.snp.top)
            make.left.equalTo(view.snp.left)
            make.right.equalTo(view.snp.right)
            if isFullscreen {
                make.bottom.equalTo(view.snp.bottom)
            } else {
                make.height.equalTo(view.snp.width).multipliedBy(9.0/16.0).priority(500)
            }
        }
    }

    // Call back when playing state changed, use to detect is playing or not
    func bmPlayer(player: BMPlayer, playerIsPlaying playing: Bool) {
        print("| BMPlayerDelegate | playerIsPlaying | playing - \(playing)")
    }

    // Call back when playing state changed, use to detect specefic state like buffering, bufferfinished
    func bmPlayer(player: BMPlayer, playerStateDidChange state: BMPlayerState) {
        print("| BMPlayerDelegate | playerStateDidChange | state - \(state)")
    }

    // Call back when play time change
    func bmPlayer(player: BMPlayer, playTimeDidChange currentTime: TimeInterval, totalTime: TimeInterval) {
        //        print("| BMPlayerDelegate | playTimeDidChange | \(currentTime) of \(totalTime)")
    }

    // Call back when the video loaded duration changed
    func bmPlayer(player: BMPlayer, loadedTimeDidChange loadedDuration: TimeInterval, totalDuration: TimeInterval) {
        //        print("| BMPlayerDelegate | loadedTimeDidChange | \(loadedDuration) of \(totalDuration)")
    }
    
    
    
    
}
