//
//  generalVideoPlayView.swift
//  云课堂2
//
//  Created by 尤增强 on 2018/6/22.
//  Copyright © 2018年 zqyou. All rights reserved.
//
import UIKit
import BMPlayer
import AVFoundation
import NVActivityIndicatorView
import SwiftyJSON

class generalVideoPlayView: UIViewController {

    let appDelegate = UIApplication.shared.delegate as! AppDelegate
    let reachability = Reachability()
    var isNet = false; //本地播放
    lazy var videoName:String = ""
    lazy var localurl:String = ""
    //存储url数组
    lazy var videourls = [String]()
    let  player = BMPlayer()
    var videotittle = ""
    override func viewDidLoad() {
        self.view.backgroundColor = UIColor.white
        super.viewDidLoad()
        self.setVideoUI()
        // Do any additional setup after loading the view.
        
        //初使不播放
        self.player.pause()
        //判断网络
        self.NetWorkState()
        if self.isNet{
            let url = URL.init(fileURLWithPath: self.localurl)
            let asset = BMPlayerResource(url: url,
                                         name: self.videoName)
            player.setVideo(resource: asset)
        }else{
            self.setVideoUrl()
        }
        self.resetPlayerManager()
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    fileprivate func setVideoUI(){

        view.addSubview(player)
        player.snp.makeConstraints { (make) in
            make.top.equalTo(self.view)
            make.left.right.equalTo(self.view)
            // Note here, the aspect ratio 16:9 priority is lower than 1000 on the line, because the 4S iPhone aspect ratio is not 16:9
            make.height.equalTo(player.snp.width).multipliedBy(9.0/16.0).priority(750)
        }
        // Back button event
        player.backBlock = { [unowned self] (isFullScreen) in
            if isFullScreen == true && UIDevice.current.model != "iPad" { return }
            let _ = self.navigationController?.popViewController(animated: true)
        }
        player.delegate = self
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)

        appDelegate.isEffective = false
        self.navigationController?.navigationBar.isHidden = true
        UIApplication.shared.setStatusBarStyle(UIStatusBarStyle.lightContent, animated: false)
        // If use the slide to back, remember to call this method
        // 使用手势返回的时候，调用下面方法
        player.autoPlay()
    }

    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        UIApplication.shared.setStatusBarStyle(UIStatusBarStyle.default, animated: false)

        // 使用手势返回的时候，调用下面方法
        player.pause(allowAutoPlay: true)
        appDelegate.isEffective = true

        self.navigationController?.navigationBar.isHidden = false
    }


    func resetPlayerManager() {
        BMPlayerConf.allowLog = false
        BMPlayerConf.shouldAutoPlay = true
        BMPlayerConf.tintColor = UIColor.white
        BMPlayerConf.topBarShowInCase = .always
        BMPlayerConf.loaderType  = NVActivityIndicatorType.ballRotateChase
    }


    func setVideoUrl(){
        let header = ["User-Agent":"BMPlayer"]
        let options = ["AVURLAssetHTTPHeaderFieldsKey":header]
        var urls = [BMPlayerResourceDefinition]()
        for i in self.videourls{
            let res0 = BMPlayerResourceDefinition(url: URL(string: i)!,
                                                  definition: self.judgevideo(str: i),
                                                options: options)
            urls.append(res0)
        }


        let asset = BMPlayerResource(name: self.videotittle,
                                     definitions: urls,
                                     cover: URL(string: "http://img.wdjimg.com/image/video/447f973848167ee5e44b67c8d4df9839_0_0.jpeg"))
        self.player.setVideo(resource: asset)

    }
    //判断视频时原画，高清
    func judgevideo(str:String) -> String{
        var type = "标清"
        let result = String(str.suffix(8))
        switch result{
        case "360p.mp4":
            type = "标清"
        case "480p.mp4":
            type = "高清"
        case "720p.mp4":
            type = "原画"
        default:
            type = "标清"
        }
        return type
    }

    /*
    // MARK: - Navigation

    // In a storyboard-based application, you will often want to do a little preparation before navigation
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        // Get the new view controller using segue.destinationViewController.
        // Pass the selected object to the new view controller.
    }
    */

}

// MARK:- BMPlayerDelegate example
extension generalVideoPlayView: BMPlayerDelegate {
    
    func bmPlayerStartDownload() {
         print("| BMPlayerDelegate | bmPlayerStartDownload")
    }


    func bmPlayer(player: BMPlayer, to: TimeInterval) {
        print(to)
    }

    // Call when player orinet changed
    func bmPlayer(player: BMPlayer, playerOrientChanged isFullscreen: Bool) {

        player.snp.remakeConstraints { (make) in
            make.top.equalTo(view.snp.top)
            make.left.equalTo(view.snp.left)
            make.right.equalTo(view.snp.right)
            if isFullscreen {
                make.bottom.equalTo(view.snp.bottom)
            } else {
                make.height.equalTo(view.snp.width).multipliedBy(9.0/16.0).priority(500)
            }
        }
    }

    // Call back when playing state changed, use to detect is playing or not
    func bmPlayer(player: BMPlayer, playerIsPlaying playing: Bool) {
        print("| BMPlayerDelegate | playerIsPlaying | playing - \(playing)")
    }

    // Call back when playing state changed, use to detect specefic state like buffering, bufferfinished
    func bmPlayer(player: BMPlayer, playerStateDidChange state: BMPlayerState) {
        print("| BMPlayerDelegate | playerStateDidChange | state - \(state)")
    }

    // Call back when play time change
    func bmPlayer(player: BMPlayer, playTimeDidChange currentTime: TimeInterval, totalTime: TimeInterval) {
        //   print("| BMPlayerDelegate | playTimeDidChange | \(currentTime) of \(totalTime)")

    }

    // Call back when the video loaded duration changed
    func bmPlayer(player: BMPlayer, loadedTimeDidChange loadedDuration: TimeInterval, totalDuration: TimeInterval) {
        //        print("| BMPlayerDelegate | loadedTimeDidChange | \(loadedDuration) of \(totalDuration)")
    }
    
    
    //网络状态
    func NetWorkState(){
        //判断是否连接
        if reachability?.connection != .nonenet{
            if reachability?.connection == .cellular {
                print("连接类型：移动网络")
                let alertController = UIAlertController(title: "温馨提示!", message: "当前为移动网络,是否继续？", preferredStyle: .alert)
                //设置 Actions   点击出发的响应事件都写在相应的代码块里
                let noAction = UIAlertAction(title: "返回", style: .default){ (action) -> Void in
                    self.navigationController?.popViewController(animated: true)
                }
                let yesAction = UIAlertAction(title: "确定", style: .default)
                { (action) -> Void in
                    self.player.play()
                }
                //添加 Actions，添加的先后和显示的先后顺序是有关系的
                alertController.addAction(noAction)
                alertController.addAction(yesAction)
                //展示Alert Controller
                self.present(alertController, animated: true, completion: nil)
            }
        }
        else{
            ZKProgressHUD.showError("网络环境异常请稍后再试！");
        }
    }

}
