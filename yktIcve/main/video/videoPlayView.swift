//
//  videoPlayView.swift
//  云课堂2
//
//  Created by 尤增强 on 2018/6/4.
//  Copyright © 2018年 zqyou. All rights reserved.
//

import UIKit
import BMPlayer
import AVFoundation
import NVActivityIndicatorView
import SwiftyJSON

class videoPlayView: UIViewController {
    
    var MOOCCourseKJModel: MOOCCourseKJModel?
    var ZykCourseKjModel: ZykCourseKjModel?
    let appDelegate = UIApplication.shared.delegate as! AppDelegate
    lazy var courseOpenId:String = ""
    lazy var docId:String = ""
    var isStudyFinish = false
    var isTeacher:Bool = false
    lazy var isFromZjyErrorQuestion:Bool = false
    lazy var IsFromZyk:Bool = false //是否从资源库进来的
    lazy var videoPlayurl:String = ""
    lazy var videotittle:String = ""
    lazy var Watchtime:Double = 0.0//当前观看时长
    lazy var WatchMaxtime:Double = 0.0 //视频观看的最大时长

    var videototalTime:Int = 0{
        willSet {
            if newValue != 0 {
               self.videoTime.text = "视频总长度\(newValue/60)分钟\(newValue%60)秒"
            }
        }
        didSet{
            print("\(oldValue)")
        }
    }
    var docvideoleavelist = [KJloctoionModel]();
    lazy var leavelocation:Int = 0     //离开时的位置
    var sqliteContext = SQLiteManagerKJrecord()
    let reachability = Reachability()
    var videoName : UILabel = {
        let lab = UILabel()
        return lab
    }()
    var videoTime : UILabel = {
        let lab = UILabel()
        return lab
    }()
    //存储url数组
    lazy var videourls = [""]
    let  player = BMPlayer()
    override func viewDidLoad() {
        super.viewDidLoad()
      
        self.setVideo()
        self.docvideoleavelist = [sqliteContext.readOneData(_userId: Account.defaultAccount.id!,docId:  self.docId)]
        let item = self.docvideoleavelist[0]
        self.leavelocation = item.location //上次离开时的位置
        if self.IsFromZyk{
            //zyk
            self.getZykVideoResources(isRefresh: true)
        }else{
            //从职教云错题集过来
            if self.isFromZjyErrorQuestion{
                self.resetPlayerManager()
                self.setvideo()
            }else{
                //MOOC
                self.getvideoUrl()
                self.resetPlayerManager()
            }
        }
        
        self.view.backgroundColor = UIColor.colorWithHex(hexColor: 0xf2f2f2)
       
        //判断网络
        self.NetWorkState()
    }

    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        UIApplication.shared.setStatusBarStyle(UIStatusBarStyle.default, animated: false)
        if self.IsFromZyk{
           self.saveZykstudentlog()
        }else{
           self.savestudentlog()
        }
        // 使用手势返回的时候，调用下面方法
        player.pause(allowAutoPlay: true)
        appDelegate.isEffective = true

        let item = self.docvideoleavelist[0]
        if item.id.isEmpty{
            //插入数据
            sqliteContext.insertData(_id: self.docId, _userId:Account.defaultAccount.id!, _location:Int(self.Watchtime))
        }else{
            sqliteContext.updateData(Id: self.docId, _location: Int(self.Watchtime))
        }
        self.navigationController?.navigationBar.isHidden = false
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)

        appDelegate.isEffective = false
        self.navigationController?.navigationBar.isHidden = true
        UIApplication.shared.setStatusBarStyle(UIStatusBarStyle.lightContent, animated: false)
        // If use the slide to back, remember to call this method
        // 使用手势返回的时候，调用下面方法
        player.autoPlay()
    }

    fileprivate func setVideo(){

        view.addSubview(player)
        player.snp.makeConstraints { (make) in
            make.top.equalTo(self.view)
            make.left.right.equalTo(self.view)
            // Note here, the aspect ratio 16:9 priority is lower than 1000 on the line, because the 4S iPhone aspect ratio is not 16:9
            make.height.equalTo(player.snp.width).multipliedBy(9.0/16.0).priority(750)
        }
       
        
        
        
        // Back button event
        player.backBlock = { [unowned self] (isFullScreen) in
            if isFullScreen == true && UIDevice.current.model != "iPad" { return }
            let _ = self.navigationController?.popViewController(animated: true)
        }

        player.delegate = self
    }
    func setLable(){
        view.addSubview(videoName);
        view.addSubview(videoTime);

        videoName.snp.makeConstraints({ (make) in
            make.width.equalTo(UIScreen.main.bounds.width-20);
            make.height.equalTo(40);
            make.left.equalTo(20);
            make.top.equalTo(player.snp.bottom).offset(20);
        })
        videoTime.snp.makeConstraints({ (make) in
            make.width.equalTo(UIScreen.main.bounds.width-20);
            make.height.equalTo(40);
            make.left.equalTo(20);
            make.top.equalTo(videoName.snp.bottom).offset(20);
        })
//        lab2.snp.makeConstraints({ (make) in
//            make.width.equalTo(UIScreen.main.bounds.width-20);
//            make.height.equalTo(40);
//            make.left.equalTo(20);
//            make.top.equalTo(lab1.snp.bottom).offset(20);
//        })
        videoName.text = self.videotittle
        if videototalTime != 0{
           videoTime.text = "视频总长度\(videototalTime/60)分钟\(videototalTime%60)秒"
        }
    }
   
    func resetPlayerManager() {
        BMPlayerConf.allowLog = false
        BMPlayerConf.shouldAutoPlay = true
        BMPlayerConf.tintColor = UIColor.white
        BMPlayerConf.topBarShowInCase = .always
        BMPlayerConf.loaderType  = NVActivityIndicatorType.ballRotateChase
    }
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }


}

// MARK:- BMPlayerDelegate example
extension videoPlayView: BMPlayerDelegate {
    func bmPlayer(player: BMPlayer, to: TimeInterval) {
        print(to)
        if !self.IsFromZyk && !self.isFromZjyErrorQuestion{
            if !self.isTeacher {
                if( self.WatchMaxtime + 10 < to  && !self.isStudyFinish){
                    print(self.WatchMaxtime)
                    self.player.seek(self.WatchMaxtime)
                }
            }
        }
    }

    // Call when player orinet changed
    func bmPlayer(player: BMPlayer, playerOrientChanged isFullscreen: Bool) {


       
        player.snp.remakeConstraints { (make) in
            make.top.equalTo(view.snp.top)
            make.left.equalTo(view.snp.left)
            make.right.equalTo(view.snp.right)
            if isFullscreen {
                make.bottom.equalTo(view.snp.bottom)
            } else {
                make.height.equalTo(view.snp.width).multipliedBy(9.0/16.0).priority(500)
            }
        }
    }

    // Call back when playing state changed, use to detect is playing or not
    func bmPlayer(player: BMPlayer, playerIsPlaying playing: Bool) {
        print("| BMPlayerDelegate | playerIsPlaying | playing - \(playing)")
    }

    func bmPlayerStartDownload(){
        print("| BMPlayerDelegate | bmPlayerStartDownload")
    }
    // Call back when playing state changed, use to detect specefic state like buffering, bufferfinished
    func bmPlayer(player: BMPlayer, playerStateDidChange state: BMPlayerState) {
        
        print("| BMPlayerDelegate | playerStateDidChange | state - \(state)")
    }

    // Call back when play time change
    func bmPlayer(player: BMPlayer, playTimeDidChange currentTime: TimeInterval, totalTime: TimeInterval) {
            print("| BMPlayerDelegate | playTimeDidChange | \(currentTime) of \(totalTime)")
            self.Watchtime = currentTime
            if(self.WatchMaxtime  < currentTime - 20){//往前拖了
                print("往前拖了")
            }else{
                self.WatchMaxtime = currentTime
            }
            if self.videototalTime == 0{
                self.videototalTime = Int(totalTime)
            }
    }

    // Call back when the video loaded duration changed
    func bmPlayer(player: BMPlayer, loadedTimeDidChange loadedDuration: TimeInterval, totalDuration: TimeInterval) {
        //        print("| BMPlayerDelegate | loadedTimeDidChange | \(loadedDuration) of \(totalDuration)")
    }
   

}

