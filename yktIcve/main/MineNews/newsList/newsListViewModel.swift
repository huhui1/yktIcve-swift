//
//  newsListViewModel.swift
//  yktIcve
//
//  Created by 志辉教育 on 2018/8/24.
//  Copyright © 2018年 zqyou. All rights reserved.
//
import RxSwift
import RxCocoa

class newsListViewModel {

    //表格数据序列
    let tableData = BehaviorRelay<[NewsModel]>(value: [])

    //停止头部刷新状态
    let endHeaderRefreshing: Driver<Bool>

    //停止尾部刷新状态
    let endFooterRefreshing: Driver<Bool>


    let disposeBag = DisposeBag()

    //ViewModel初始化（根据输入实现对应的输出）
    init(input: (
        headerRefresh: Driver<Void>,
        footerRefresh: Driver<Void> ),
        dependency: (
        disposeBag:DisposeBag,
        networkService: NetworkService ),
        parmes:[String : Any]) {


        //下拉结果序列
        let headerRefreshData = input.headerRefresh
            .startWith(()) //初始化时会先自动加载一次数据
            .flatMapLatest{   //也可考虑使用flatMapFirst
                return dependency.networkService.loadNewsList(parmes)
        }

        //上拉结果序列
        let footerRefreshData = input.footerRefresh
            .flatMapLatest{  //也可考虑使用flatMapFirst
                return dependency.networkService.loadNewsList(parmes)
        }

        //生成停止头部刷新状态序列
        self.endHeaderRefreshing = headerRefreshData.map{ _ in true }

        //生成停止尾部刷新状态序列
        self.endFooterRefreshing = footerRefreshData.map{ _ in true }

        //下拉刷新时，直接将查询到的结果替换原数据
        headerRefreshData.drive(onNext: { items in
            self.tableData.accept(items)
        }).disposed(by: dependency.disposeBag)

        //上拉加载时，将查询到的结果拼接到原数据底部
        footerRefreshData.drive(onNext: { items in
            self.tableData.accept(self.tableData.value + items )
        }).disposed(by: dependency.disposeBag)
    }


    /// 弹窗
    ///
    /// - Parameter data: <#data description#>
    func  popupWindow(data:NewsModel){

        if data.UserType == "1"  && data.HwOrExamZtway == 6{
            let msg = data.NewsType == 1 ? "此作业直接由老师打分，无需作答":"登分考试暂不支持手机端查看!"
            ZKProgressHUD.showMessage(msg)
            return
        }else if data.UserType == "1"  && data.NewsType == 1{
            //学生作业列表
            let vc = stuRecordView()
            vc.openClassId = data.openClassId!
            vc.courseOpenId = data.courseOpenId!
            vc.homeWorkId = data.HwOrExamId!
            vc.homeworkTermTimeId = data.HwOrExamTermTimeId!
            vc.ztWay = data.HwOrExamZtway!
            NavigatorService.navigateToPage(vc, animated: true)
//            self.navigationController?.pushViewController(vc, animated: true)
        }else if data.UserType == "1"{
            //学生考试
            let vc = stuExaminationHandleView()
            vc.openClassId = data.openClassId!
            vc.courseOpenId = data.courseOpenId!
            vc.examId = data.HwOrExamId!
            vc.examTermTimeId = data.HwOrExamTermTimeId!
             NavigatorService.navigateToPage(vc, animated: true)
//            self.navigationController?.pushViewController(vc, animated: true)

        }else if data.UserType == "2"  && data.HwOrExamZtway == 6 && data.NewsType == 1{
            //登分作业
            let vc = HomeworkMakeScoreListView()
            vc.openClassId = data.openClassId!
            vc.courseOpenId = data.courseOpenId!
            vc.homeworkTermTimeId = data.HwOrExamTermTimeId!
            vc.homeWorkId = data.HwOrExamId!
            vc.homeworkTitle = data.HwOrExamTitle!
            NavigatorService.navigateToPage(vc, animated: true)
//            self.navigationController?.pushViewController(vc, animated: true)
        }else if data.UserType == "2"  && data.HwOrExamZtway == 6{
            //登分考试
            let vc = examMakeScoreView()
            vc.openClassId = data.openClassId!
            vc.courseOpenId = data.courseOpenId!
            vc.examId = data.HwOrExamId!
            vc.examTermTimeId = data.HwOrExamTermTimeId!
            vc.examTitle = data.HwOrExamTitle!
             NavigatorService.navigateToPage(vc, animated: true)
//            self.navigationController?.pushViewController(vc, animated: true)
        }else if data.UserType == "2"  && data.NewsType == 1{
            let vc = HomeworkReviewListView()
            vc.openClassId = data.openClassId!
            vc.courseOpenId = data.courseOpenId!
            vc.homeworkTermTimeId = data.HwOrExamTermTimeId!
            vc.homeWorkId = data.HwOrExamId!
            vc.ztWay = data.HwOrExamZtway!
             NavigatorService.navigateToPage(vc, animated: true)
//            self.navigationController?.pushViewController(vc, animated: true)

        }else if data.UserType == "2" {
            let vc = examReviewView()
            vc.openClassId = data.openClassId!
            vc.courseOpenId = data.courseOpenId!
            vc.examId = data.HwOrExamId!
            vc.examTermTimeId = data.HwOrExamTermTimeId!
            vc.examTitle = data.HwOrExamTitle!
            NavigatorService.navigateToPage(vc, animated: true)
//            self.navigationController?.pushViewController(vc, animated: true)
        }
    }

    //修改为已读
    func setNewsIsReadById(Id:String){


        //初始化HUD窗口，并置于当前的View当中显示
        let hud = MBProgressHUD.showAdded(to: NavigatorService.navigateView(), animated: true)
        //设置提示文字
        hud.label.text = "请稍等"
        HttpbinProvider.rx.request(.setNewsIsReadById(Id))
            .subscribe(onSuccess: { response in
                //数据处理
                let str = String(data: response.data, encoding: String.Encoding.utf8)
                print("返回的数据是：", str ?? "")
            },onError: { error in
                print("数据请求失败!错误原因：", error)
            }).disposed(by: disposeBag)

    }
}
