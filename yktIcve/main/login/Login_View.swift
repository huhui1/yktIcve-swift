//
//  Login_View.swift
//  云课堂2
//
//  Created by 志辉教育 on 2018/7/26.
//  Copyright © 2018年 zqyou. All rights reserved.
//

import UIKit

class Login_View: UIView{
    var toolBar = UIToolbar();
    @IBOutlet var ScrollView: UIScrollView!
    @IBOutlet var contenViewSizeW: NSLayoutConstraint!
    @IBOutlet var contentView: UIView!
    @IBOutlet var NameImg: UIImageView!
    @IBOutlet var ImgView: UIImageView!
    @IBOutlet var loginCheckView: UIView!
    @IBOutlet var loginPhoneCheckView: UIView!
    //var isFirst:Bool = true
    //原图
    var originalImage = #imageLiteral(resourceName: "Login")
    lazy var context: CIContext = {
        return CIContext()
    }()
    var _selectUserNameView:selectUserNameView?
    var accountView :AccountView?
    var accountPhoneCheckView :AccountPhoneCheckView?
    var loginViewModel: loginViewModel!
    init(viewModel: loginViewModel) {
        super.init(frame: CGRect.zero)
        awakeFromNib(viewModel:viewModel)
        self.backgroundColor = UIColor.red
    }
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    func awakeFromNib(viewModel: loginViewModel) {
        super.awakeFromNib()
        let subView : UIView = Bundle.main.loadNibNamed("Login_View", owner: self, options: nil)?.first as! UIView
        subView.frame = self.frame
        self.addSubview(subView)
        self.contenViewSizeW.constant = UIScreen.main.bounds.width
        self.loginCheckView.frame.size = CGSize.init(width:  self.contenViewSizeW.constant / 2, height: UIScreen.main.bounds.height)
        self.loginPhoneCheckView.frame = CGRect.init(x:  self.contenViewSizeW.constant / 2, y: 0, width: UIScreen.main.bounds.width, height: UIScreen.main.bounds.height)
       
        loginViewModel = viewModel
        self.launchAnimation()
        self.addNotifyZjyLogin()
    }
    func addNotifyZjyLogin(){
        //监听事件
        let NotifyZjyLogin = NSNotification.Name("NotifyZjyLogin")
        NotificationCenter.default.addObserver(self, selector: #selector(self.PhoneCheck), name: NotifyZjyLogin, object: nil)
    }
    
    @objc func PhoneCheck(type:NSNotification){
        let dict = type.object as! Dictionary<String ,String>
        let loginCheck = dict["type"]!
        switch loginCheck {
        case "phoneLogin":
            accountPhoneCheckView?.UserName = dict["UserName"]!
            accountPhoneCheckView?.oldPwd = dict["oldPwd"]!
            //跳到第二个界面
            self.ScrollView.contentOffset = CGPoint(x: UIScreen.main.bounds.width, y:0);
        case "backAccountViewLogin":
            //返回第一个个界面
            self.ScrollView.contentOffset = CGPoint(x:0, y:0);
       
        case "selectUserNameViewLogin":
            self.accountView?.backgroundColor = UIColor.lightGray
            self.accountView?.textView.backgroundColor = UIColor.lightGray
            self.accountView?.iconfontRememberPassword.backgroundColor = UIColor.lightGray
        default:
            print("====")
        }
    }
    func setContentView() {
        self.accountView = AccountView.init(viewModel: self.loginViewModel,frame: CGRect.init(x: 0, y: 0, width: UIScreen.main.bounds.width, height: UIScreen.main.bounds.height))
        self.loginCheckView.addSubview(self.accountView!)
        //只添加一遍
        self.accountPhoneCheckView = AccountPhoneCheckView.init(frame: CGRect.init(x: 0, y: 0, width: UIScreen.main.bounds.width, height: UIScreen.main.bounds.height),viewModel: self.loginViewModel)
        self.loginPhoneCheckView.addSubview(self.accountPhoneCheckView!)
        self.ScrollView.isScrollEnabled = false
        self.ScrollView.bounces = false//不能反弹
        self.ScrollView.isPagingEnabled = true//整页滑动
        self.ScrollView.showsHorizontalScrollIndicator = false//不显示滚动条
    }
  


 
    
    //播放启动画
    private func launchAnimation() {
        //完毕后将登录添加上来
        UIView.animate(withDuration: 1, delay: 0, options: .beginFromCurrentState,
                       animations: {
                        self.ImgView.alpha = 0.5
                        self.ImgView.layer.transform = CATransform3DScale(CATransform3DIdentity, 1.5, 1.5, 1.0)
                        self.NameImg.alpha = 0.0
                        //异步加载
                        DispatchQueue.global().async {
                            //获取原始图片
                            let inputImage =  CIImage(image: self.originalImage)
                            //使用高斯模糊滤镜
                            let filter = CIFilter(name: "CIGaussianBlur")!
                            filter.setValue(inputImage, forKey:kCIInputImageKey)
                            //设置模糊半径值（越大越模糊）
                            filter.setValue(15, forKey: kCIInputRadiusKey)
                            let outputCIImage = filter.outputImage!
                            var rect = CGRect.init()
                            if(UIDevice.current.model == "iPad"){
                                rect = CGRect(origin: CGPoint(x: 50, y: 160), size: CGSize(width: UIScreen.main.bounds.height, height: UIScreen.main.bounds.width))
                            }else{
                                rect = CGRect(origin: CGPoint(x: 0, y: 200), size: CGSize(width: UIScreen.main.bounds.width * 1.5 , height: UIScreen.main.bounds.height * 1.5))
                            }
                            
                            let cgImage = self.context.createCGImage(outputCIImage, from: rect)
                        
                            DispatchQueue.main.async {

                                self.ImgView.image = UIImage(cgImage: cgImage!)
                            }
                        }
        }) { (finished) in
              self.NameImg.isHidden = true
              //还原图片尺寸
              self.ImgView.layer.transform = CATransform3DScale(CATransform3DIdentity, 1.0, 1.0, 1.0)
              self.ImgView.alpha = 1.0
              self.NameImg.alpha = 1.0
              self.contentView.isHidden = false
              self.contentView.alpha = 0.6
              self.setContentView()
            
        }
    }
    
    
    
}

