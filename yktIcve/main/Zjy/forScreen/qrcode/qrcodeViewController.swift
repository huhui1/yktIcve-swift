//
//  qrcodeViewController.swift
//  66iclasscloud
//
//  Created by 尤增强 on 2017/8/29.
//  Copyright © 2017年 zqy. All rights reserved.
//

import UIKit
import AVFoundation
import SwiftyJSON

class qrcodeViewController: UIViewController , AVCaptureMetadataOutputObjectsDelegate,UIAlertViewDelegate, UIImagePickerControllerDelegate,
UINavigationControllerDelegate{

    var codeTimer: DispatchSourceTimer?

    var scanRectView:UIView!
    var device:AVCaptureDevice!
    var input:AVCaptureDeviceInput!
    var output:AVCaptureMetadataOutput!
    var session:AVCaptureSession!
    var preview:AVCaptureVideoPreviewLayer!
    var timer:Timer? = nil
    var line:UIImageView! = nil
    var upOrdown:Bool = false;
    var num:NSInteger = 0;
    var isopen = true;
    let width = UIScreen.main.bounds.width
    let height = UIScreen.main.bounds.height;
    var isPlay = false;
    override func viewDidLoad() {
        super.viewDidLoad();
        self.fromCamera();
        self.setUI();
        if(!common.share.authorizeCamera()){
         //打开相机
            common.share.openCamera()
        }
        
    }

    func setUI(){
        let photoBtn = UIButton.init(frame: CGRect.init(x: 50, y: height - 160, width: 80, height: 80));
        let phototimg = UIImage.init(named: "scancode_photo");
        photoBtn.setImage(phototimg, for: .normal);
        photoBtn.tag = 0;
        photoBtn.addTarget(self, action:#selector(tapped(_:)), for:.touchUpInside);
        //  photoBtn.backgroundColor = UIColor.gray;
        photoBtn.layer.masksToBounds = true;
        photoBtn.layer.cornerRadius = 40;
        self.view.addSubview(photoBtn);

        let lightBtn = UIButton.init(frame: CGRect.init(x:width - 100, y: height - 160, width: 80, height: 80));
        let lightimg = UIImage.init(named: "scancode_light");
        lightBtn.tag = 1;
        lightBtn.addTarget(self, action:#selector(tapped(_:)), for:.touchUpInside);
        lightBtn.setImage(lightimg, for: .normal);
        //  photoBtn.backgroundColor = UIColor.gray;
        lightBtn.layer.masksToBounds = true;
        lightBtn.layer.cornerRadius = 40;
        self.view.addSubview(lightBtn);

        let h = common.share.isX() ? 80 :20
        let backBtn = UIButton.init(frame: CGRect.init(x: Int(width - 60), y: h, width: 40, height: 40))
        backBtn.setTitle("\u{e606}", for: .normal)
        backBtn.titleLabel?.font = UIFont.init(name: "iconfont", size: 40)
        backBtn.setTitleColor(UIColor.lightGray, for: .normal)
        backBtn.addTarget(self, action: #selector(self.Back), for: .touchUpInside)
        self.view.addSubview(backBtn)
        if self.navigationController == nil{
            backBtn.isHidden = false
        }else{
            backBtn.isHidden = true
        }
    }
    //返回
    @objc func Back(){
        if(self.navigationController != nil){
            self.navigationController?.popViewController(animated: true)
        }else{
            self.dismiss(animated: true, completion: nil)
        }
    }
    
    @objc func tapped(_ button:UIButton){
        let tag = button.tag;
        if(tag == 1){
            openLight(open:isopen);
        }else{
            if(!common.share.authorizeCamera()){
                //打开相机
                common.share.openCamera()
            }else{
            fromAlbum();
            }
        }
    }


    func fromAlbum() {
        //判断设置是否支持图片库
        if UIImagePickerController.isSourceTypeAvailable(.photoLibrary){
            //初始化图片控制器
            let picker = UIImagePickerController()
            //设置代理
            picker.delegate = self
            //指定图片控制器类型
            picker.sourceType = .photoLibrary
            //弹出控制器，显示界面
            self.present(picker, animated: true, completion: {
                () -> Void in
            })
        }else{
            print("读取相册错误")
        }
    }




    //选择图片成功后代理
    func imagePickerController(_ picker: UIImagePickerController,
                               didFinishPickingMediaWithInfo info: [String : Any]) {

        //获取选择的原图
        let image = info[UIImagePickerControllerOriginalImage] as! UIImage

        //二维码读取
        let ciImage:CIImage=CIImage(image:image)!
        let context = CIContext(options: nil)
        let detector = CIDetector(ofType: CIDetectorTypeQRCode, context: context,
                                  options: [CIDetectorAccuracy:CIDetectorAccuracyHigh])


        //图片控制器退出
        picker.dismiss(animated: true, completion: {
            () -> Void in

            if let features = detector?.features(in: ciImage) {

                //遍历所有的二维码，并框出
                for feature in features as! [CIQRCodeFeature] {
                    self.analysisQrcodeResult(stringValue: feature.messageString!)
                }
            }

        })
    }

    //天猫精灵开灯
    func openLight(open:Bool){

        let device = AVCaptureDevice.default(for: AVMediaType.video)
        if !(device?.hasTorch)!{

            ZKProgressHUD.showError("闪光灯故障或该设备无手电筒");

        }else{

            if open{//打开
                isopen = false;
                do{
                    try device?.lockForConfiguration()
                    device?.torchMode = AVCaptureDevice.TorchMode.on
                    device?.flashMode = AVCaptureDevice.FlashMode.on
                    device?.unlockForConfiguration()

                }catch
                {
                    print(error)

                }

            }else{
                isopen = true;
                do{
                    try device?.lockForConfiguration()
                    device?.torchMode = AVCaptureDevice.TorchMode.off
                    device?.flashMode = AVCaptureDevice.FlashMode.off
                    device?.unlockForConfiguration()

                }catch
                {
                    print(error)

                }

            }

        }
    }


    //通过摄像头扫描
    func fromCamera() {
        do{

            self.device = AVCaptureDevice.default(for: AVMediaType.video)

            self.input = try AVCaptureDeviceInput(device: device)

            self.output = AVCaptureMetadataOutput()
            output.setMetadataObjectsDelegate(self, queue: DispatchQueue.main)

            self.session = AVCaptureSession()
            if UIScreen.main.bounds.size.height<500 {
                self.session.sessionPreset = AVCaptureSession.Preset.vga640x480
            }else{
                self.session.sessionPreset = AVCaptureSession.Preset.high
            }

            self.session.addInput(self.input)
            self.session.addOutput(self.output)

            self.output.metadataObjectTypes = [AVMetadataObject.ObjectType.qr]

            //计算中间可探测区域
            let windowSize = UIScreen.main.bounds.size
            let scanSize = CGSize(width:300, height:300)
            var scanRect = CGRect(x:(windowSize.width-scanSize.width)/2,
                                  y:(windowSize.height-scanSize.height)/2,
                                  width:scanSize.width, height:scanSize.height)
            //计算rectOfInterest 注意x,y交换位置
            scanRect = CGRect(x:scanRect.origin.y/windowSize.height,
                              y:scanRect.origin.x/windowSize.width,
                              width:scanRect.size.height/windowSize.height,
                              height:scanRect.size.width/windowSize.width);

            //设置可探测区域
            self.output.rectOfInterest = CGRect.init(x: 0, y: 0, width: 1, height: 1)

            self.preview = AVCaptureVideoPreviewLayer(session:self.session)
            self.preview.videoGravity = AVLayerVideoGravity.resizeAspectFill
            self.preview.frame = UIScreen.main.bounds;
            let o =  UIApplication.shared
                .statusBarOrientation

            if(o ==  UIInterfaceOrientation.landscapeRight )
            {
                self.preview.connection?
                    .videoOrientation = .landscapeRight; //右转90
            }

            self.view.layer.insertSublayer(self.preview, at:0)

            //添加中间的探测区域绿框
            self.scanRectView = UIView();

            self.view.addSubview(self.scanRectView)
            self.scanRectView.frame = CGRect(x:0, y:0, width:scanSize.width,
                                             height:scanSize.height);
            self.scanRectView.center = self.view.center;
            // self.scanRectView.layer.borderColor = UIColor.green.cgColor;
            // self.scanRectView.layer.borderWidth = 1;
            //扫描背景框
            let bgImg = UIImageView(frame:CGRect(x:0, y:0, width:scanSize.width,height:scanSize.height ))
            bgImg.image = UIImage(named: "Icon_SaoYiSao")
            bgImg.center = self.view.center;
            view.addSubview(bgImg)

            let lblDesc = UILabel(frame: CGRect(x: width/2-150, y:height/2-200, width: 300, height: 30));

            lblDesc.text = "将二维码放入框内，即可自动扫描";
            lblDesc.textAlignment = .center
            lblDesc.textColor = UIColor.colorWithHex(hexColor: 0xf1f1f1);
            lblDesc.font = UIFont.systemFont(ofSize: 18)
            self.view.addSubview(lblDesc)

            //扫描红线
            line = UIImageView(frame: CGRect(x: width/2-150, y:height/2-150, width:scanSize.width, height: 12))
            line.image = UIImage(named: "Icon_SaoLine")
            view.addSubview(line)

            DispatchQueue.main.async {
                //开启定时器，构造移动动画效果
                self.timer = Timer(timeInterval: 0.02, target: self, selector: #selector(self.lineAnimation), userInfo: nil, repeats: true)

                RunLoop.current.add(self.timer!, forMode: .defaultRunLoopMode)

                //开始采集数据
                self.session.startRunning()
            }

            //开始捕获
            // self.session.startRunning()
            //            self.setTime()
        }catch _ {
            //打印错误消息
            let alertController = UIAlertController(title: "提醒",
                                                    message: "请在设备的\"设置-隐私-相机\"选项中,允许本程序访问您的相机",
                                                    preferredStyle: .alert)
            let cancelAction = UIAlertAction(title: "确定", style: .cancel, handler: nil)
            alertController.addAction(cancelAction)
            self.present(alertController, animated: true, completion: nil)
        }
    }

    //摄像头捕获
    func metadataOutput(_ output: AVCaptureMetadataOutput, didOutput metadataObjects: [AVMetadataObject], from connection: AVCaptureConnection) {
        if metadataObjects == nil || metadataObjects.count == 0 {
            return
        }

        var stringValue:String?
        if metadataObjects.count > 0 {
            let metadataObject = metadataObjects[0] as! AVMetadataMachineReadableCodeObject
            stringValue = metadataObject.stringValue

            if stringValue != nil{
                self.session.stopRunning();
                self.playBeep();
            }
        }
        self.session.stopRunning()
        self.analysisQrcodeResult(stringValue: stringValue!)
    }


    /// 扫描框红线移动动画
    @objc func lineAnimation() {

        let scanX:CGFloat =  width/2-150
        if upOrdown == false{
            num += 1
            line.frame = CGRect(x:scanX, y:height/2-150+2*CGFloat(num), width: 300, height: 12)

            if 2*num >= NSInteger(300)-12{
                upOrdown = true
                line.image = UIImage(named: "Icon_SaoLineOn")
            }

        }else{

            num += -1
            line.frame = CGRect(x: scanX, y:height/2-150+2*CGFloat(num), width: 300, height: 12)

            if num == 0{
                upOrdown = false
                line.image = UIImage(named: "Icon_SaoLine")
            }


        }
    }

    // 扫描播放音效
    func playBeep() {
        var sound = kSystemSoundID_Vibrate
        let path = Bundle.main.path(forResource: "QRCodeRead", ofType: "wav")
        if path != nil{
            let error = AudioServicesCreateSystemSoundID(NSURL.fileURL(withPath: path!) as CFURL, &sound)
            if error != kAudioServicesNoError{
                sound = 0
            }

        }
        //播放声音
        AudioServicesPlaySystemSound(sound)
        //静音模式下震动
        AudioServicesPlaySystemSound(kSystemSoundID_Vibrate)

    }
    override func viewWillDisappear(_ animated: Bool) {
        if((self.session) != nil){
             self.session.stopRunning()
        }
        self.timer?.invalidate()
        self.timer = nil
    }
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
    }


    //是否为扫码注册 true代表从邀请注册进，false 代表扫描选课进
    lazy var isRegister :Bool = {
       
        return true
    }()
    var reloadList :(() ->Void)?
}
