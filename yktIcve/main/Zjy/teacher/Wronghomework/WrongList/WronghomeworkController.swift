//
//  WronghomeworkController.swift
//  云课堂2
//
//  Created by 志辉教育 on 2018/6/26.
//  Copyright © 2018年 zqyou. All rights reserved.
//

import Foundation
import SwiftyJSON
import Alamofire
extension WronghomeworkView {
    func getErrorData(){
        
        XLBallLoading.show(in: self.view)
        let dict = ["courseOpenId":courseOpenId,
                    "openClassId":openClassId,
                    "hkIdOrExamId":hkIdOrExamId,
                    "hKorExamType":self.hkOrExamType,
                    "userId":Account.defaultAccount.id!,
                    "userType":self.isStu ? "1" : "2",
                    "questionType":questionType,
                    "knowledgeIds":knowledgeIds,
                    "orderColumn":orderColumn,
                    "isAsc":isAsc,
                    "page":self.page]as [String : Any]
            Alamofire.request(appAPI.WrongQuestion_newGetWrongQuestionList, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
            let json = JSON(value)
            if(json["code"]>0){
            
                
                
            if(self.page == 1){
                self.list = [];
            }
            if self.isfirst{
                let data = JSON()
                let errortype1 = WrongTypemodel.init(data:data)
                self.list2.append(errortype1)
            }
            for i in 0..<json["questionList"].count{
                let jsonerror = json["questionList"][i];
                let errorquestion = Wronghomeworkmodel.init(json:jsonerror)
                self.list.append(errorquestion)
                if self.isfirst{
                    if !self.questionindex.contains(json["questionList"][i]["questionType"].intValue){
                        self.questionindex.append(json["questionList"][i]["questionType"].intValue)
                        
                        let errortype = WrongTypemodel.init(data:jsonerror)
                        self.list2.append(errortype)
                    }
                    
                }
                
            }
     
            self.isfirst = false
            self.tableView2.reloadData()
            if json["questionList"].count < 1{
               self.setNOdatacell()
            }else{
               self.tableView.tableFooterView = UIView();
            }
            //重现加载表格数据
            self.tableView!.reloadData();
            self.tableView.mj_footer.endRefreshing();
            //common.share.setTableFootView_noData(self.tableView,list: self.list as NSArray)
            }else{
                  ZKProgressHUD.showError(json["msg"].stringValue);
            }
              XLBallLoading.hide(in: self.view)
            }else{
                  XLBallLoading.hide(in: self.view)
                  ZKProgressHUD.showError("网络环境异常请稍后再试！");
                 }
            }
   }
    func setNOdatacell(){
        let lab_nodata = UILabel.init(frame: CGRect.init(x: 0, y: 0, width: UIScreen.main.bounds.width, height: 30));
        lab_nodata.text = "没有更多数据了";
        lab_nodata.font = UIFont.init(name: "iconfont", size: 16)
        lab_nodata.textColor = UIColor.gray;
        lab_nodata.textAlignment = .center;
        self.tableView.mj_footer.isHidden = true
        self.tableView.tableFooterView = lab_nodata;
    }
    
    
   @objc func screening(){
        let vc = selectErrorByTypeOrKnowledge()
        vc.courseOpenId = self.courseOpenId
        vc.modalTransitionStyle = .crossDissolve
        vc.reloaderrorlistClosure = {
            (ids) in
            self.knowledgeIds = ids as! Array<String>
            self.questionType = ""
            self.page = 1
            self.getErrorData()
        }
       self.navigationController?.pushViewController(vc, animated: true)
    }
}
    
    

