//
//  correctingFileHomeWorkView.swift
//  云课堂2
//
//  Created by 尤增强 on 2018/7/7.
//  Copyright © 2018年 zqyou. All rights reserved.
//

import UIKit
import  SwiftyJSON
import Alamofire
import MobileCoreServices
import SCLAlertView
class correctingFileHomeWorkView: UIViewController,UITextFieldDelegate,UITextViewDelegate {
  
    @IBOutlet weak var lab_title: UILabel!
    @IBOutlet weak var collectionFile: UICollectionView!

    @IBOutlet var collectionAnswerHt: NSLayoutConstraint!
    @IBOutlet var stuAnswerText: UITextView!
    @IBOutlet var stuAnswerSizeHt: NSLayoutConstraint!
    @IBOutlet var labtop: NSLayoutConstraint!
    @IBOutlet weak var BottomSizeH: NSLayoutConstraint!
    @IBOutlet weak var ScrollBottomHt: NSLayoutConstraint!
    @IBOutlet weak var BottomHt: NSLayoutConstraint!
    @IBOutlet weak var reviewBtn: UIButton!
    @IBOutlet weak var returnBtn: UIButton!
    @IBOutlet var CommentHt: NSLayoutConstraint!
    @IBOutlet weak var collectionStuAnswer: UICollectionView!
    @IBOutlet weak var collectionAnswer: UICollectionView!

    @IBOutlet weak var textComments: UITextView!

    @IBOutlet weak var collectionComments: UICollectionView!
    @IBOutlet weak var contentSizeH: NSLayoutConstraint!
    @IBOutlet weak var contenView: UIView!
    
    lazy var itemList1 = [JSON]()
    lazy var itemList2 = [JSON]()
    lazy var itemList3 = [JSON]()
    lazy var itemList4 = [JSON]()
    
    lazy var isPushed:Bool = {
        return false
    }()
    var toolBar = UIToolbar();
    var textField = UITextField()
    lazy var courseOpenId:String = ""
    lazy var openClassId:String = ""
    lazy var homeworkTermTimeId:String = ""
    lazy var groupId:String = ""
    lazy var homeWorkId:String = ""
    lazy var homeworkStuId:String = ""
    lazy var groupTaskGroupId:String = ""
    lazy var stuId:String = ""
    var homeworkReviewInfo : homeworkReviewModel!
    var homeworkGroupReviewInfo : HomeworkGroupModel!
    lazy var stuAnswerPreviewUrl: String = {
        return ""
    }()
    lazy var stuAnswerUploadUrl: String = {
        return ""
    }()
    var  teaComment = [UploadDocModel]()
    var ztWay = 1
    var isPreview = false
    lazy var homeworkTitle:String = ""

    override func viewDidLoad() {
        super.viewDidLoad()
        let NotifyZjycorrectingScore = NSNotification.Name("correctingFilerefresh")
        NotificationCenter.default.addObserver(self, selector: #selector(self.refresh), name: NotifyZjycorrectingScore, object: nil)
//        if self.navigationController == nil{
//            if common.share.isX(){
//                self.ht = 30
//            }
//            let headUI = headBackUI()
//            headUI.backgroundColor = UIColor.bg
//            headUI.frame = CGRect.init(x: 0, y: 0, width: UIScreen.main.bounds.width, height: 60 + CGFloat(ht))
//
//            self.view.addSubview(headUI)
//            headUI.btn_back.addTarget(self, action: #selector(self.headUIBack), for: .touchUpInside)
//
//        }
        self.stuAnswerText.isUserInteractionEnabled = false
        self.setTextView()
        self.title = self.homeworkTitle
        self.textField.keyboardType = .numberPad
        if common.share.isX(){
            self.BottomHt.constant = 30
            self.BottomSizeH.constant = 70
        }
        if isPreview{
            self.previewHomework()
            self.returnBtn.isHidden = true
            self.reviewBtn.isHidden = true
            self.textComments.isEditable = false
        }else{
            let  m = UploadDocModel.init(data: JSON(), img:UIImage.init(named: "scancode_photo")!)
            m.isAdd = true
            self.teaComment.insert(m, at: 0)
            if self.ztWay == 5{
                self.getTeamWorkData()
            }else{
                self.getstuersonaldDada()
            }
        }
        self.setCollection()
        let Item = UIBarButtonItem(title: "返回", style: .plain, target: self, action: nil)
        self.navigationItem.backBarButtonItem = Item

    }
    func setTextView(){
        //监听键盘弹出通知
        NotificationCenter.default
            .addObserver(self,selector: #selector(keyboardWillShow(_:)),
                         name: NSNotification.Name.UIKeyboardWillShow, object: nil)
        //监听键盘隐藏通知
        NotificationCenter.default
            .addObserver(self,selector: #selector(keyboardWillHide(_:)),
                         name: NSNotification.Name.UIKeyboardWillHide, object: nil)
        //键盘
        toolBar = common.share.AddToolKeyboardDoneBar()
        let doneButton = UIBarButtonItem(title: "确定", style: .plain, target: self, action: #selector(self.DoneClick));
        let spaceButton = UIBarButtonItem(barButtonSystemItem: .flexibleSpace, target: nil, action: nil)
        toolBar.setItems([spaceButton,doneButton], animated: false);
        self.textComments.delegate = self
    }
    @objc func DoneClick(){
        self.view.endEditing(true)
    }
    func textViewShouldBeginEditing(_ textView: UITextView) -> Bool {
        textComments.inputAccessoryView = toolBar;
        return true
    }
    // 键盘显示
    @objc func keyboardWillShow(_ notification: Notification) {
        
        let userInfo = (notification as NSNotification).userInfo!
        //键盘尺寸
        let keyboardSize = (userInfo[UIKeyboardFrameBeginUserInfoKey]
            as! NSValue).cgRectValue
        
        if ztWay == 5{
            var contentInsets:UIEdgeInsets
            
            contentInsets = UIEdgeInsetsMake(220, 0.0, (keyboardSize.height), 0.0);
            self.view.frame = CGRect.init(x:0, y: -220, width:self.view.bounds.width, height: self.view.bounds.height);
        }else{
            var contentInsets:UIEdgeInsets
            
            contentInsets = UIEdgeInsetsMake(64.0, 0.0, (keyboardSize.height), 0.0);
            self.view.frame = CGRect.init(x:0, y: -64, width:self.view.bounds.width, height: self.view.bounds.height);
        }
    }
    
    // 键盘隐藏
    @objc func keyboardWillHide(_ notification: Notification) {
            self.view.frame = CGRect.init(x:0, y: 64, width:self.view.bounds.width, height: self.view.bounds.height);
    }
    //移除监听
    override func viewWillDisappear(_ animated: Bool) {
        if(!self.isPushed){
            NotificationCenter.default.removeObserver(self)
        }
        self.isPushed = false
    }
    
    @objc func refresh(){
        let Item = UIBarButtonItem.init(title: "已批", style: UIBarButtonItemStyle.plain, target :self, action:nil);
        self.navigationItem.rightBarButtonItem = Item;
    }
//    override func viewWillDisappear(_ animated: Bool) {
//        NotificationCenter.default.removeObserver(self)
//    }
//    @objc func headUIBack(){
//        self.dismiss(animated: true, completion: nil)
//    }
    init() {
        super.init(nibName: "correctingFileHomeWorkView", bundle: nil)
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    override func viewDidLayoutSubviews() {
//        if self.navigationController == nil{
//            self.labtop.constant = 56
//        }
        if self.ztWay == 5{
            self.contentSizeH.constant = 140
            self.CommentHt.constant = 0
            self.stuAnswerSizeHt.constant = 0
        }else{
            self.contentSizeH.constant = 300
        }
        
      
    }

    /*
    // MARK: - Navigation

    // In a storyboard-based application, you will often want to do a little preparation before navigation
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        // Get the new view controller using segue.destinationViewController.
        // Pass the selected object to the new view controller.
    }
    */

    @IBAction func BackHomework(_ sender: Any) {
        if self.ztWay == 5 {
           self.backGroupHomework()
        }else {
           self.returnHomework()
        }
    }
    @IBAction func setSCore(_ sender: Any) {
        if self.ztWay == 5{
            //保存批语
            self.savecomments()
            
        }else{
            let alert = SCLAlertView()
            //添加第一个输入框
            self.textField = alert.addTextField("输入分数")
            self.textField.delegate = self
            textField.keyboardType = .numberPad
            alert.addButton("确定") {
                self.readFileHomework(score:self.textField.text!)
                
            }
            alert.showEdit("", subTitle: "请输入设置的分数", closeButtonTitle: "取消")
        }
    }
    
    

}

extension correctingFileHomeWorkView:UICollectionViewDelegate,UICollectionViewDataSource{
    
    func setCollection(){
        self.collectionAnswer.delegate = self
        self.collectionAnswer.dataSource = self
        self.collectionStuAnswer.delegate = self
        self.collectionStuAnswer.dataSource = self
        
        self.collectionFile.delegate = self
        self.collectionFile.dataSource = self
        
        self.collectionFile.register(UINib.init(nibName: "itemImgCell", bundle: Bundle.main), forCellWithReuseIdentifier: "itemImgCell")
        self.collectionStuAnswer.register(UINib.init(nibName: "itemImgCell", bundle: Bundle.main), forCellWithReuseIdentifier: "itemImgCell")
        self.collectionAnswer.register(UINib.init(nibName: "itemImgCell", bundle: Bundle.main), forCellWithReuseIdentifier: "itemImgCell")
        self.collectionComments.register(UINib.init(nibName: "ZQUICollectionViewCell_Img", bundle: Bundle.main), forCellWithReuseIdentifier: "ZQUICollectionViewCell_Img")
        self.collectionComments.delegate = self
        self.collectionComments.dataSource = self
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        if collectionView == self.collectionFile{
            return itemList1.count
        }else if collectionView == self.collectionStuAnswer{
            return itemList2.count
        }else if collectionView == self.collectionAnswer{
            return itemList3.count
        }else{
            return teaComment.count
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        if collectionView == self.collectionFile{
            let cell =  collectionView.dequeueReusableCell(withReuseIdentifier: "itemImgCell", for: indexPath) as! itemImgCell
            let item = self.itemList1[indexPath.row]
            common.share.setSDImg(str: item["thumbnail"].stringValue, imgview: cell.thumbnail)
            return cell
        }else if collectionView == self.collectionStuAnswer{
            let cell =  collectionView.dequeueReusableCell(withReuseIdentifier: "itemImgCell", for: indexPath) as! itemImgCell
            let item = self.itemList2[indexPath.row]
            common.share.setSDImg(str: item["thumbnail"].stringValue, imgview: cell.thumbnail)
            return cell
        }else if collectionView == self.collectionAnswer{
            let cell =  collectionView.dequeueReusableCell(withReuseIdentifier: "itemImgCell", for: indexPath) as! itemImgCell
            let item = self.itemList3[indexPath.row]
            common.share.setSDImg(str: item["thumbnail"].stringValue, imgview: cell.thumbnail)
            return cell
        }else{
            let j  =  self.teaComment[indexPath.row]
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "ZQUICollectionViewCell_Img",for: indexPath) as! ZQUICollectionViewCell_Img
            cell.CellBlock = {  () -> Void in
                self.uploadImg()
            }
            cell.setModelByHomeworkFile(Model: j)
            return cell
        }
        
        
        
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        if collectionView == self.collectionFile{
            let item1 = self.itemList1[indexPath.row]
            self.getFileById(Id: item1["Id"].stringValue)
            
        }else if collectionView == self.collectionStuAnswer{
            let item2 = self.itemList2[indexPath.row]
            self.getFileById(Id: item2["Id"].stringValue)
            
        }else if collectionView == self.collectionAnswer{
            let item3 = self.itemList3[indexPath.row]
            self.getFileById(Id: item3["Id"].stringValue)
            
        }else{
            let item4 = self.teaComment[indexPath.row]
            self.getFileInfoByUrl(url: item4.docUrl)
            
        }
    }
    
    
}

extension correctingFileHomeWorkView:UIImagePickerControllerDelegate,UINavigationControllerDelegate {
    
    //底部弹窗
    func uploadImg(){
        //判断是否开启打开相册权限
        if(!common.share.isAuthorizePhotos()){
            common.share.authorizePhotos()
        }else{
            self.upload()
        }
    }
    //底部弹窗
    func upload(){
        
        let userIconAlert = UIAlertController(title: "请选择操作", message: "", preferredStyle: UIAlertControllerStyle.actionSheet)
        
        let chooseFromPhotoAlbum = UIAlertAction(title: "从相册选择", style: UIAlertActionStyle.default, handler: funcChooseFromPhotoAlbum)
        userIconAlert.addAction(chooseFromPhotoAlbum)
        
        let chooseFromPhotoVideo = UIAlertAction(title: "视频", style: UIAlertActionStyle.default, handler: funcChooseFromPhotoVideo)
        userIconAlert.addAction(chooseFromPhotoVideo)
        
        let chooseFromCamera = UIAlertAction(title: "拍照", style: UIAlertActionStyle.default,handler:funcChooseFromCamera)
        userIconAlert.addAction(chooseFromCamera)
        
        let canelAction = UIAlertAction(title: "取消", style: UIAlertActionStyle.cancel,handler: nil)
        userIconAlert.addAction(canelAction)
        
        if(UIDevice.current.model == "iPad")
        {
            let mine = UIView.init(frame: CGRect(x:self.view.bounds.width/2,y:self.view.bounds.height,width:20,height:20))
            self.view.addSubview(mine)
            let popPresenter =  userIconAlert.popoverPresentationController
            
            popPresenter?.sourceView = mine
            popPresenter?.sourceRect = mine.bounds
            self.present(userIconAlert, animated: true, completion: nil)
        }
        else{
            self.present(userIconAlert, animated: true, completion: nil)
        }
    }
    //从相册选择照片
    func funcChooseFromPhotoAlbum(_ avc:UIAlertAction) -> Void{
        
        
        let masterVC = HsuAlbumMasterTableViewController()
        let navi = UINavigationController(rootViewController: masterVC)
        masterVC.title = "图片"
        let gridVC = HsuAssetGridViewController()
        gridVC.title = "所有图片"
        let leftBarBtn = UIBarButtonItem(title: "", style: .plain, target: self,
                                         action:nil)
        gridVC.navigationItem.leftBarButtonItem = leftBarBtn
        navi.pushViewController(gridVC, animated: false)
        
        UIDevice.current.setValue(UIInterfaceOrientation.landscapeLeft.rawValue, forKey: "orientation")
        present(navi, animated: true)
        
        HandleSelectionPhotosManager.share.getSelectedPhotos(with: 1) { (assets, images) in
            
            
            self.upload(img: images[0])
        }
        
        
    }
    func funcChooseFromCamera(_ avc:UIAlertAction) -> Void{
        if UIImagePickerController.isSourceTypeAvailable(UIImagePickerControllerSourceType.camera) {
            let imagePicker = UIImagePickerController()
            
            //设置代理
            imagePicker.delegate = self as UIImagePickerControllerDelegate & UINavigationControllerDelegate
            //            imagePicker.delegate = self
            //允许编辑
            imagePicker.isEditing = false;
            //设置图片源
            imagePicker.sourceType = UIImagePickerControllerSourceType.camera
            //模态弹出IamgePickerView
            
            self.present(imagePicker, animated: true, completion: nil)
            
        }else{
            print("模拟器不支持拍照功能")
        }
    }
    func imagePickerControllerDidCancel(_ picker: UIImagePickerController){
        picker.dismiss(animated: true, completion: nil)
    }
    
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : Any]) {
        //获取照片的原图
        if let image :UIImage = (info as NSDictionary).object(forKey: UIImagePickerControllerOriginalImage)as?UIImage{
            //获得编辑后的图片
            //let image = (info as NSDictionary).object(forKey: UIImagePickerControllerEditedImage)as!UIImage
            self.upload(img: image);
        }else{
            let videoURL = info[UIImagePickerControllerMediaURL] as! URL
            self.getVideoOne(url: videoURL)
        }
        
        picker.dismiss(animated: true, completion: nil)
    }
    
    //上传
    func upload(img:UIImage)
    {
        
        let fileManager = FileManager.default
        let rootPath = NSSearchPathForDirectoriesInDomains(.documentDirectory,
                                                           .userDomainMask, true)[0] as String
        let date = NSDate(),
        timeInterval = date.timeIntervalSince1970 * 1000
        let filePath = "\(rootPath)/" + String(timeInterval) + ".jpg"
         let  imageData =  common.share.resetImgSize(sourceImage: img, maxImageLenght: 0, maxSizeKB: 200)
        fileManager.createFile(atPath: filePath, contents: imageData, attributes: nil)
        let imageNSURL = URL.init(fileURLWithPath: filePath)
        ZKProgressHUD.show("0 %")
        Alamofire.upload(multipartFormData: { multipartFormData in
            multipartFormData.append(imageNSURL, withName: "file1")
        },to: self.stuAnswerUploadUrl,encodingCompletion: { encodingResult in
            switch encodingResult {
            case .success(let upload, _, _):
                upload.responseJSON { response in
                    let result = JSON(response.result.value ?? "");
                    self.setModelToList(result: result, type:"jpg", docTitle: "\(timeInterval).jpg")
                    ZKProgressHUD.hide(delay: 0)
                    }.uploadProgress { progress in // main queue by default
                        // print("当前进度: \(progress.fractionCompleted)")
                        ZKProgressHUD.show("\(String(format: "%.1f", progress.fractionCompleted * 100)) %")
                }
            case .failure(let encodingError):
                print(encodingError)
            }
        })
    }
    
    //从相册选择视频
    func funcChooseFromPhotoVideo(_ avc:UIAlertAction) -> Void{
        
        
        if UIImagePickerController.isSourceTypeAvailable(.photoLibrary) {
            //初始化图片控制器
            let imagePicker = UIImagePickerController()
            //设置代理
            imagePicker.delegate = self
            //指定图片控制器类型
            imagePicker.sourceType = .photoLibrary
            //只显示视频类型的文件
            imagePicker.mediaTypes = [kUTTypeMovie as String]
            //不需要编辑
            imagePicker.allowsEditing = false
            
            UIDevice.current.setValue(UIInterfaceOrientation.landscapeLeft.rawValue, forKey: "orientation")
            //弹出控制器，显示界面
            self.present(imagePicker, animated: true, completion: nil)
        }
        else {
            print("读取相册错误")
        }
        
    }
    
    
    //处理
    func getVideoOne(url:URL) {
        
        
        Alamofire.upload(multipartFormData: { multipartFormData in
            multipartFormData.append(url, withName: "file1")
        },to: self.stuAnswerUploadUrl,encodingCompletion: { encodingResult in
            switch encodingResult {
            case .success(let upload, _, _):
                upload.responseJSON { response in
                    let result = JSON(response.result.value ?? "");
                    
                    self.setModelToList(result: result,type:"mp4", docTitle: "file1")
                    ZKProgressHUD.hide(delay: 0)
                    }.uploadProgress { progress in // main queue by default
                        ZKProgressHUD.show("\(String(format: "%.1f", progress.fractionCompleted * 100)) %")
                }
            case .failure(let encodingError):
                print(encodingError)
            }
        })
    }
    
    //model加入数组
    func setModelToList(result:JSON,type:String,docTitle:String){
        
        let m = UploadDocModel.init(data: result, previewUrl: self.stuAnswerPreviewUrl, type: type, docTitle: docTitle,IsMyFile:false)
        self.teaComment.append(m)
        
        self.collectionComments.reloadData()
        
    }
}

