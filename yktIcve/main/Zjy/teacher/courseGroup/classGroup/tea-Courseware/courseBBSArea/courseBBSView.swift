
//
//  courseBBSView.swift
//  云课堂2
//
//  Created by 尤增强 on 2018/7/13.
//  Copyright © 2018年 zqyou. All rights reserved.
//

import UIKit


class courseBBSView: UIView {

    @IBOutlet weak var btn_add: UIButton!
    @IBOutlet weak var tableView: UITableView!

     var activeType = 0 //1.评价，2.问答，3，笔记，4.纠错

    var htmls = [HtmlRecord]()
    let htmlOperations = HtmlOperations()
    private var myContext = 0

    var bbsAreaViewModel: BBSAreaViewModel!
    init(viewModel: BBSAreaViewModel,cellId:String,openClassId:String,courseOpenId:String,activeType:Int) {
        super.init(frame: CGRect.zero)
        awakeFromNib()
        self.activeType = activeType
        bbsAreaViewModel = viewModel

        bbsAreaViewModel.addObserver(self, forKeyPath: "isReload", options: [.old, .new], context: nil)

        self.bbsAreaViewModel.getBBSDataByActionType(courseOpenId: courseOpenId, openClassId: openClassId, cellId: cellId, activeType: activeType)
        self.setTableViewUI()
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    override func awakeFromNib() {
        super.awakeFromNib()
        self.backgroundColor = UIColor.clear
        let subView : UIView = Bundle.main.loadNibNamed("courseBBSView", owner: self, options: nil)?.first as! UIView
        subView.frame = self.frame
        self.addSubview(subView)
        self.btn_add.setTitle(" \u{e69b} 点击添加", for: .normal)
        self.btn_add.titleLabel?.font = UIFont.init(name: "iconfont", size: 17)
        self.btn_add.setTitleColor(UIColor.colorWithHex(hexColor: 0xB3B3B3), for: .normal)
        self.btn_add.backgroundColor = UIColor.colorWithHex(hexColor: 0xF1F1F1)
        self.btn_add.layer.masksToBounds = true
        self.btn_add.layer.cornerRadius = 6
    }


    deinit {
        bbsAreaViewModel.removeObserver(self, forKeyPath: "isReload")
    }


    @IBAction func action_add(_ sender: UIButton) {

        self.bbsAreaViewModel.BBSCreate()
    }
    
}

extension courseBBSView {
    override func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) {
        if keyPath == "isReload" {
            if self.tableView.mj_header != nil{
                 self.tableView.mj_header.endRefreshing();
            }
            self.htmls.removeAll()
            for i in self.bbsAreaViewModel.list{
                self.htmls.append(HtmlRecord.init(content: i.content))
            }

            self.tableView.reloadData()
            common.share.setTableFootView_noData(self.tableView, list: self.bbsAreaViewModel.list)
        }
    }
}
extension courseBBSView:UITableViewDelegate,UITableViewDataSource,zjy_courseware_BBSCellDategate{


    func returnBBSModel(m: evaluationModel) {
         self.bbsAreaViewModel.acceptError(Id: m.Id, IsAccept: m.isAccept)
    }
    fileprivate func setTableViewUI(){

        self.tableView.delegate = self
        self.tableView.dataSource = self

        //        //创建一个重用的单元格
        self.tableView.register(UINib.init(nibName: "zjy_courseware_BBSCell", bundle: nil), forCellReuseIdentifier: "SwiftCell");
        //
        self.tableView.tableFooterView = UIView(frame:CGRect.zero)//除去多余的cell
        //
        if #available(iOS 9.0, *) {
            self.tableView.cellLayoutMarginsFollowReadableWidth = false
        }

        //让单元格自适应
        self.tableView.rowHeight = UITableViewAutomaticDimension
        self.tableView.estimatedRowHeight = 100
        self.tableView.separatorStyle = UITableViewCellSeparatorStyle.none

        self.tableView.mj_header = MJRefreshNormalHeader(refreshingBlock: {
            self.bbsAreaViewModel.getBBSData()
        })

    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let m = self.bbsAreaViewModel.list[indexPath.row]
        self.bbsAreaViewModel.BBSDetails(m: m)
    }

    func  tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let m = self.bbsAreaViewModel.list[indexPath.row]
        let cell  = tableView.dequeueReusableCell(withIdentifier: "SwiftCell", for: indexPath) as! zjy_courseware_BBSCell
        //为了提示用户，将cell的accessory view设置为UIActivityIndicatorView。
        if cell.accessoryView == nil {
            let indicator = UIActivityIndicatorView(activityIndicatorStyle: .gray)
            cell.accessoryView = indicator
        }
        cell.delegate = self
        let indicator = cell.accessoryView as! UIActivityIndicatorView

        let html = self.htmls[indexPath.row]


        switch (html.state){
            case .done:
                indicator.stopAnimating()
                cell.lab_Content.attributedText = html.htmlAttributedString
            case .new:
                indicator.startAnimating()
                self.startDownloadForRecord(html, indexPath: indexPath)
        }

        cell.setmodelEvaluation(m: m,type: self.activeType)
        return cell
    }


    //执行任务
    func startDownloadForRecord(_ htmlRecord: HtmlRecord, indexPath: IndexPath){
        //判断队列中是否已有该任务
        if let _ = htmlOperations.conversionInProgress[indexPath] {
            return
        }

        //创建一个下载任务
        let conversion = StringConversion(htmlRecord: htmlRecord)
        //任务完成后重新加载对应的单元格
        conversion.completionBlock = {
            if conversion.isCancelled {
                return
            }
            DispatchQueue.main.async(execute: {
                self.htmlOperations.conversionInProgress.removeValue(forKey: indexPath)
                self.tableView.reloadRows(at: [indexPath], with: .fade)
            })
        }
        //记录当前下载任务
         htmlOperations.conversionInProgress[indexPath] = conversion
        //将任务添加到队列中
         htmlOperations.conversionQueue.addOperation(conversion)
    }

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.bbsAreaViewModel.list.count
    }
}

