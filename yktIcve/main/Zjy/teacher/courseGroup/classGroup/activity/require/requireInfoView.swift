//
//  requireInfoView.swift
//  66iclasscloud
//
//  Created by 尤增强 on 2018/1/18.
//  Copyright © 2018年 zqy. All rights reserved.
//

import UIKit
import WebKit
import SwiftyJSON

class requireInfoView: UIViewController ,WKScriptMessageHandler,ZQNavigationMenuViewDelegate{

    override func viewDidLoad() {
        super.viewDidLoad()
        self.view.backgroundColor = UIColor.white;
        self.setWebUI()
        self.setBtnUI()
        let item = UIBarButtonItem(title: "返回", style: .plain, target: self, action: nil)
        self.navigationItem.backBarButtonItem = item
        // Do any additional setup after loading the view.

        let detailsItem = UIBarButtonItem.init(title: "详情", style: UIBarButtonItemStyle.plain, target :self, action: #selector(self.showMenu));
        self.navigationItem.rightBarButtonItem = detailsItem;
        //判断是否点击过

        let t = cx.readOneData(_userId: Account.defaultAccount.id!)
        if(!t.isbrowserequireInfo){
            self.maskView()
        }
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    func setBtnUI(){

        //下拉菜单项

        self.view.addSubview(self.view_foot)
        self.view.addSubview(self.Btn_reply)
        self.Btn_reply.snp.makeConstraints { (make) in
            make.width.equalTo(width)
            make.height.equalTo(40)
            make.left.equalTo(0)
            make.bottom.equalTo(self.view.snp.bottom).offset(HX)
        }
        //self.Btn_reply.addTarget(self, action: #selector(self.btntap(_:)), for: .touchUpInside)
        self.Btn_reply.addTarget(self, action: #selector(self.replyRequire), for: .touchUpInside)

        self.view_foot.addSubview(self.btn_allCheck)
        self.view_foot.addSubview(self.btn_over)
        self.view_foot.addSubview(self.btn_score)

        self.btn_allCheck.addTarget(self, action: #selector(self.select_All(_:)), for: .touchUpInside)
        self.btn_over.addTarget(self, action: #selector(self.cancelAll(_:)), for: .touchUpInside)
        self.btn_score.addTarget(self, action: #selector(self.setSocre(_:)), for: .touchUpInside)
        self.view_foot.snp.makeConstraints { (make) in
            make.centerY.centerX.width.height.equalTo(self.Btn_reply)
        }

        self.btn_allCheck.snp.makeConstraints { (make) in
            make.width.equalTo(width / 3)
            make.centerY.height.equalTo(self.view_foot)
            make.left.equalTo(0)
        }

        self.btn_score.snp.makeConstraints { (make) in
            make.width.equalTo(width / 3)
             make.centerY.height.equalTo(self.view_foot)
            make.left.equalTo(self.btn_allCheck.snp.right)
        }
        self.btn_over.snp.makeConstraints { (make) in
            make.width.equalTo(width / 3)
            make.centerY.height.equalTo(self.view_foot)
            make.left.equalTo(self.btn_score.snp.right)
        }

        let items = ["修改", "查看详情"]

        self.menu = ZQNavigationMenuView.init(frame: CGRect.init(x: UIScreen.main.bounds.width - 100, y: 0, width:200, height: 80), titles: items )
        menu.layer.cornerRadius = 5.0
        menu.layer.borderColor = UIColor.bg.cgColor
        menu.layer.borderWidth = 1.0
        menu.layer.masksToBounds = true
        self.menu.isHidden = true
        self.menu.delegate = self
        self.view.addSubview(menu)
    }

    
   func setWebUI() {

        let path = Bundle.main.path(forResource: "require", ofType: ".html",
                                    inDirectory: "HTML5/src/teacher/require");
        let url = URL(fileURLWithPath:path!);
        //let request = URLRequest(url:url);
        
        //创建供js调用的接口
        let theConfiguration = WKWebViewConfiguration()
        theConfiguration.userContentController.add(self, name: "interOp")
        
        //将浏览器视图全屏(在内容区域全屏,不占用顶端时间条)
        let frame = CGRect(x:0, y:0, width:width,
                           height:UIScreen.main.bounds.height - 110 + CGFloat(HX))
        theWebView = WKWebView(frame:frame, configuration: theConfiguration)
        //禁用页面在最顶端时下拉拖动效果
//                theWebView.scrollView.bounces = false;
//                theWebView.isUserInteractionEnabled = false;
        //加载页面
        if #available(iOS 9.0, *) {
            
            theWebView.loadFileURL(url, allowingReadAccessTo: url)
        } else {
            
            do{
                
                let url1 = try common.share.fileURLForBuggyWKWebView8(fileURL:url as NSURL)
                let request = URLRequest(url:url1 as URL);
                theWebView.load(request)
                
            }catch{}
        }
        //theWebView.load(request)
        self.view.addSubview(theWebView);
    }
    //响应处理js那边的调用
     func userContentController(_ userContentController:WKUserContentController,
                               didReceive message: WKScriptMessage) {
        let sentData = message.body as! Dictionary<String,String>
        
        if(sentData["method"] == "load" ){

            self.getRequireReplyList()
        }
        else if(sentData["method"] == "longTap" ){

            self.view.exchangeSubview(at: 1, withSubviewAt: 2)

        }else if(sentData["method"]=="preview"){
            self.previewImg(url:sentData["url"]!);
        }else if(sentData["method"]=="details"){
            self.requireInfoDetails(json: JSON.init(parseJSON: sentData["data"]!))
        }else if(sentData["method"] == "showMsg"){
            ZKProgressHUD.showMessage(sentData["msg"]!)
        }else if(sentData["method"] == "makeSoce"){
            self.getScore(id:sentData["id"]!)
        }

    }

    //返回处理h5清除页面，防内存溢出
    override func viewWillDisappear(_ animated: Bool) {
        if(!self.isPushed){
            theWebView.configuration.userContentController.removeScriptMessageHandler(forName: "interOp")

        }

        self.isPushed = false
    }


    let cx = SQLiteManagerMask()

    lazy var theWebView:WKWebView = {
        let WK = WKWebView()
        
        return WK
    }()
    lazy var docJson = [String]();
    lazy var replyList :NSArray = [];
    lazy var dataJson :JSON={return []}();

    
    var userInfo:User!
    lazy var requireType : Int = {
        return  1
    }()
    lazy var requireId :String = {

        return ""
    }()
    lazy var openClassId :String = {
        
        return ""
    }()
    lazy var courseOpenId :String = {
        return ""
    }()
    lazy var activityId :String = {
        return ""
    }()
     lazy var isPushed :Bool = {return false}()
    fileprivate lazy var width = UIScreen.main.bounds.width
    fileprivate lazy var Btn_reply :UIButton = {
        let btn = UIButton()
        btn.setTitle("回复", for: .normal)
        btn.setTitleColor(UIColor.colorWithHex(hexColor: 0x333), for: .normal)
        btn.backgroundColor = UIColor.white
        return btn
    }()

    fileprivate lazy var view_foot :UIView = {
        let view = UIView()

        view.backgroundColor = UIColor.bg
        return view

    }()
    fileprivate lazy var btn_allCheck :UIButton = {
        let btn = UIButton()
        btn.setTitle("全选", for:.normal)
        btn.setTitleColor(UIColor.white, for: .normal)
        btn.contentMode = .center
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 18)
        return btn
    }()

    fileprivate lazy var btn_score :UIButton = {
        let btn = UIButton()
        btn.setTitle("批量打分", for:.normal)
        btn.contentMode = .center
        btn.setTitleColor(UIColor.white, for: .normal)
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 18)
        btn.backgroundColor = UIColor.colorWithHex(hexColor: 0x1cad85)
        return btn
    }()

    fileprivate lazy var btn_over :UIButton = {
        let btn = UIButton()
        btn.setTitle("取消", for:.normal)
        btn.contentMode = .center
        btn.setTitleColor(UIColor.white, for: .normal)
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 18)

        btn.backgroundColor = UIColor.colorWithHex(hexColor: 0x23c397)
        return btn
    }()
    var menu :ZQNavigationMenuView!
    lazy var makeView:UIView = {
        return UIView.init(frame: self.view.frame)
    }()
    let HX = common.share.returnSafeAreaLineHeight()
}


