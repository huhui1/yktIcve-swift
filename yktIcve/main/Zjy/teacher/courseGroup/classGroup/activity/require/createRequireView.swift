//  requireInfoView.swift
//  66iclasscloud
//  Created by 尤增强 on 2017/12/29.
//  Copyright © 2017年 zqy. All rights reserved.
//

import UIKit
import SwiftyJSON

class createRequireView: UIViewController,UIImagePickerControllerDelegate,UINavigationControllerDelegate,UITextViewDelegate {
    //用来放置各个图片单元
    var collectionView:UICollectionView!
    
    //collectionView的布局
    var collectionViewLayout: UICollectionViewFlowLayout!

    let width = UIScreen.main.bounds.width;
    
     var imgList = [UploadDocModel]()
    
    let maxImgCount = 9
    
    var reloadDiscussListClosure :(() ->Void)?
    override func viewDidLoad() {
        super.viewDidLoad()
        self.view.backgroundColor = UIColor.colorWithHex(hexColor: 0xf1f1f1)
        self.setUI()
        if(self.imgList.count < self.maxImgCount){
            let  m = UploadDocModel.init(data: JSON(), img:UIImage.init(named: "scancode_photo")!)
            m.isAdd = true
            self.imgList.insert(m, at: 0)
        }
        
        self.contenText.delegate = self
        self.setUICollectionView()
        NotificationCenter.default.addObserver(self, selector: #selector(textViewEditChanged(sender:)), name: NSNotification.Name.UITextViewTextDidChange, object: nil);
        let item = UIBarButtonItem(title: "\u{e6f7} 返回", style: .plain, target: self, action: #selector(self.backBtnClick))
        self.navigationItem.leftBarButtonItem = item
        common.share.setBackButtonItem(item: item)
        
        // Do any additional setup after loading the view.
    }
    //自定义返回，移除监听
    @objc func backBtnClick(){
        NotificationCenter.default.removeObserver(self)
        self.navigationController?.popViewController(animated: true)
    }

    func setUI(){

        toolBar = common.share.AddToolKeyboardDoneBar()
        let doneButton = UIBarButtonItem(title: "确定", style: .plain, target: self, action: #selector(self.DoneClick));
        let spaceButton = UIBarButtonItem(barButtonSystemItem: .flexibleSpace, target: nil, action: nil)
        toolBar.setItems([spaceButton,doneButton], animated: false);

        self.view.addSubview(self.msglable)
        msglable.snp.makeConstraints { (make) in
            make.width.equalTo(width)
            make.top.equalTo(4)
            make.height.equalTo(40)
            make.left.equalTo(0)
        }
        msglable.text = "    最多可输入300字"
        self.view.addSubview(contenText)
        contenText.snp.makeConstraints { (make) in
            make.width.equalTo(width)
            make.height.equalTo(200)
            make.left.equalTo(0)
            make.top.equalTo(msglable.snp.bottom)
        }


        self.view.addSubview(submitBtn)
        let HX = common.share.returnSafeAreaLineHeight()
        submitBtn.snp.makeConstraints { (make) in
            make.width.equalTo(width )
            make.height.equalTo(40)
            make.left.equalTo(0)
            make.bottom.equalTo(self.view.snp.bottom).offset(HX)
        }


    }

    
    
    //字数限制
    @objc func textViewEditChanged(sender:NSNotification) {
        let textVStr = contenText.text as NSString
        if (textVStr.length >= 300) {
            let str = textVStr.substring(to: 300)
            contenText.text = str
            ZKProgressHUD.showMessage("最多输入300字")
        }
    }
    //键盘处理
    func textViewShouldBeginEditing(_ textView: UITextView) -> Bool {
        textView.inputAccessoryView = toolBar;
        if(!self.isup){
            common.share.animateViewMoving(up: true, moveValue: 30, view: self.view)
        }
        self.isup = true
        return true
    }
    
    @objc func DoneClick(){
        self.view.endEditing(true)
        if(self.isup){
            common.share.animateViewMoving(up: false, moveValue: 30, view: self.view)
        }
        self.isup = false
    }
    //ipad键盘处理
    func textViewShouldEndEditing(_ textView: UITextView) -> Bool {
        textView.resignFirstResponder()
        if(self.isup){
            common.share.animateViewMoving(up: false, moveValue: 30, view: self.view)
        }
        self.isup = false
        return true
    }

    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        self.view.endEditing(true)
    }
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    lazy var contenText : UITextView = {
        let text = UITextView();
        text.backgroundColor = UIColor.white
        return text;
    }()

    lazy var msglable : UILabel = {
        let lab = UILabel()

        lab.font = UIFont.init(name: "iconfont", size: 10)
        return lab;
    }()

    lazy  var submitBtn : UIButton = {
        let btn = UIButton()
        btn.contentMode = .center
        btn.setTitleColor(UIColor.white, for: .normal)
        btn.backgroundColor = UIColor.bg
        btn.setTitle("开始", for: .normal)

        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 16)
       btn.addTarget(self, action:  #selector(self.createRequire(_:)), for: .touchUpInside)
        return btn ;

    }()

    lazy var activityId :String = {

        return ""
    }()


    var toolBar = UIToolbar();

    var userInfo:User!
    lazy var requireType : Int = {
        return  1
    }()
    lazy var requireId :String = {

        return ""
    }()
    lazy var uploadUrl : String = {

        return ""
    }()
    lazy var docJson :NSMutableArray = {
        return []
    }()
    lazy var imgViewList :NSMutableArray = {
        return []
    }()

    lazy var courseOpenId :String = {
        return ""
    }()
    lazy var openclassId :String = {
        return ""
    }()

    lazy var docOssPreview = [String]()
    
    lazy var isup :Bool = {
        return false
    }()


    /*
     // MARK: - Navigation

     // In a storyboard-based application, you will often want to do a little preparation before navigation
     override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
     // Get the new view controller using segue.destinationViewController.
     // Pass the selected object to the new view controller.
     }
     */
    
}

extension createRequireView:UICollectionViewDelegate,UICollectionViewDataSource{
    func setUICollectionView(){
        //collectionView尺寸样式设置
        collectionViewLayout = UICollectionViewFlowLayout()
        collectionViewLayout.minimumLineSpacing = 4
        collectionViewLayout.minimumInteritemSpacing = 4
        
        //横向滚动
        collectionViewLayout.scrollDirection = .vertical
        
        let hx = (UIScreen.main.bounds.height - 400) > 310 ? 310: (UIScreen.main.bounds.height - 400)
//        let sizeh = (hx / 3) > 100 ?100: (hx / 3)
        
        collectionViewLayout.itemSize = CGSize.init(width:60, height:60)
        
        let c = CGRect.init(x: 20, y: 260, width:190, height: hx)
        
        //collectionView初始化
        collectionView = UICollectionView(frame:c ,
                                          collectionViewLayout: collectionViewLayout)
        collectionView.backgroundColor = UIColor.white
        
        collectionView.delegate = self
        collectionView.dataSource = self
        collectionView.isPagingEnabled = true
        collectionView.backgroundColor = UIColor.clear
        self.view.addSubview(collectionView)
        
    }
    
    //collectionView单元格创建
    func collectionView(_ collectionView: UICollectionView,
                        cellForItemAt indexPath: IndexPath)
        -> UICollectionViewCell {
            let d = Date()
            let identifier = "cell\(d.timeIntervalSince1970)"
            //注册重用的单元格
            let cellXIB = UINib.init(nibName: "ZQUICollectionViewCell_Img", bundle: Bundle.main)
            collectionView.register(cellXIB, forCellWithReuseIdentifier: identifier)
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: identifier,
                                                          for: indexPath) as! ZQUICollectionViewCell_Img
            let m = self.imgList[indexPath.row]
            if(self.requireId.isEmpty){
                cell.setModelByUIImage(Model: m)
            }else{
                cell.setModelByOnline(model: m)
            }
            
            cell.CellBlock = {  () -> Void in
                self.uploadImg()
            }
            
            return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
         let m = self.imgList[indexPath.row]
        let vc = uploadImgPreviewView()
        if(m.img.size != CGSize.zero){
            vc.img = m.img
        }else{
            vc.imgurl = m.url
        }
        vc.reloadImglistClosure = {(index) in
            
            
            if(self.imgList.count == self.maxImgCount){
                self.imgList.insert(m, at: 0)
            }
            self.imgList.remove(at: indexPath.row)
            self.collectionView.deleteItems(at: [indexPath])
        }
        vc.modalTransitionStyle = .crossDissolve
        self.present(vc, animated: true, completion: nil)
    }
    //collectionView单元格数量
    func collectionView(_ collectionView: UICollectionView,
                        numberOfItemsInSection section: Int) -> Int {
        
        return self.imgList.count
    }
}





