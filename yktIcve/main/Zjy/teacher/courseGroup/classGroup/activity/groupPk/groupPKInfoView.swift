//
//  groupPKInfoView.swift
//  66iclasscloud
//
//  Created by 尤增强 on 2018/1/25.
//  Copyright © 2018年 zqy. All rights reserved.
//

import UIKit
import SwiftyJSON
class groupPKInfoView: UIViewController,UITableViewDelegate,UITableViewDataSource {

    var tableView:UITableView!
    let width = UIScreen.main.bounds.width;
    let height = UIScreen.main.bounds.height;
    var scoreClosure :(() ->Void)?
    var isPushed = false

  
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.view.backgroundColor = UIColor.colorWithHex(hexColor: 0xf2f2f2)
        let buildItem = UIBarButtonItem.init(title: "未分组学生", style: UIBarButtonItemStyle.plain, target: self, action: #selector(self.tapped));
        self.navigationItem.rightBarButtonItem = buildItem;
        self.title = "学生分组"
        let item = UIBarButtonItem(title: "返回", style: .plain, target: self, action: nil)
        self.navigationItem.backBarButtonItem = item
        
        self.setTableViewUI()
        self.setFootUI()
        self.get()
        // Do any additional setup after loading the view.
    }

   private func setTableViewUI(){

        //创建表视图
        self.tableView = UITableView.init(frame: CGRect(x:0, y:0, width:width, height:height - 90));

        self.tableView.delegate = self;
        self.tableView.dataSource = self;
        //创建一个重用的单元格
        self.tableView.register(groupPKInfoCell.self, forCellReuseIdentifier: "faceCell");


        self.tableView.tableFooterView = UIView.init(frame: CGRect.zero)

        if #available(iOS 9.0, *) {
        self.tableView.cellLayoutMarginsFollowReadableWidth = false
        } else {

        }
        //rowHeight属性设置为UITableViewAutomaticDimension
        self.tableView.rowHeight = UITableViewAutomaticDimension;
        self.tableView.separatorStyle = .none
        let topview = groupPKInfoTopView()
        topview.frame.size = CGSize.init(width: width, height: 30)
        self.tableView.tableHeaderView = topview

        self.tableView!.backgroundColor = UIColor.colorWithHex(hexColor: 0xf2f2f2)
        self.view.addSubview(self.tableView!);

    }

    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }

    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat
    {
        return 50;
    }

    //返回表格行数（也就是返回控件数）
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {

        return self.groupInfos.count;
    }

    //创建各单元显示内容(创建参数indexPath指定的单元）
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath)
        -> UITableViewCell {
            
            let cell:groupPKInfoCell = tableView.dequeueReusableCell(withIdentifier: "faceCell") as! groupPKInfoCell
            if self.state == 3{
                cell.view_star.isUserInteractionEnabled = false
            }
            let group = self.groupInfos[indexPath.row]
            cell.lab_index.text = String(indexPath.row + 1)
            cell.setScoreUI(score: Float(group.Score))
            cell.btn_addStu.setTitle("\u{e6e0}(\(group.Members))", for: .normal)
            cell.btn_addStu.tag = indexPath.row
            cell.btn_addStu.addTarget(self, action:#selector(tap(_:)), for:.touchUpInside);
            cell.scoreClosure = {
                (score) in
                self.groupInfos[indexPath.row].Score = score
                self.checkScore(groupPK:self.groupInfos[indexPath.row])
            }
            return cell
    }

    @objc func tap (_ btn:UIButton){
        let vc = addMemberTableView()
            vc.groupId = self.groupInfos[btn.tag].Id
            vc.PKId = self.PKId
            vc.state = self.state
            vc.reloadClosure = {() in
            self.get()
        }
         self.isPushed = true
        self.navigationController?.pushViewController(vc, animated: true)
    }

    //点击
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
       
        tableView .deselectRow(at: indexPath, animated: true)

    }


    func setFootUI(){

         self.view.addSubview(self.btn_less)
         self.view.addSubview(self.btn_add)
         self.view.addSubview(self.labnum)
         self.view.addSubview(self.btn_over)
         self.view.addSubview(self.btn_reSet)
        let HX = common.share.returnSafeAreaLineHeight()
        self.btn_add.snp.makeConstraints { (make) in
            make.width.equalTo(60)
            make.height.equalTo(30)
            make.bottom.equalTo(self.view.snp.bottom).offset(HX)
            make.right.equalTo(self.view.snp.centerX)
        }
        self.btn_add.layer.cornerRadius = 3
        self.btn_add.addTarget(self, action: #selector(self.addGroup), for: .touchUpInside)

        self.labnum.snp.makeConstraints { (make) in
            make.width.equalTo(20)
            make.right.equalTo(self.btn_add.snp.left)
            make.centerY.height.equalTo(self.btn_add)
        }
        labnum.text = GroupCount
        
        
        self.btn_less.snp.makeConstraints { (make) in
            make.centerY.height.width.equalTo(self.btn_add)
            make.right.equalTo(self.labnum.snp.left)
        }
        self.btn_less.layer.cornerRadius = 3
        self.btn_less.addTarget(self, action: #selector(self.delGroup), for: .touchUpInside)

        self.btn_reSet.snp.makeConstraints { (make) in
            make.centerY.height.width.equalTo(self.btn_add)
            make.left.equalTo(self.view.snp.centerX).offset(10)
        }
        self.btn_reSet.layer.cornerRadius = 3

        self.btn_over.snp.makeConstraints { (make) in
            make.centerY.height.width.equalTo(self.btn_add)
            make.left.equalTo(self.btn_reSet.snp.right).offset(20)
        }
        self.btn_over.layer.cornerRadius = 3
        self.btn_over.addTarget(self, action: #selector(self.overGroupPK(_:)), for: .touchUpInside)
        self.btn_reSet.addTarget(self, action: #selector(self.reset(_:)), for: .touchUpInside)


    }
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    //减小组按钮
    lazy var btn_less :UIButton = {
        let btn = UIButton()
        btn.setTitleColor(UIColor.blue, for: .normal)
        btn.setTitle("-", for: .normal)
        btn.backgroundColor = UIColor.white
        btn.layer.masksToBounds = true
        return btn
    }()

    //加小组按钮
    lazy var btn_add :UIButton = {
        let btn = UIButton()
        btn.setTitleColor(UIColor.blue, for: .normal)
        btn.setTitle("+", for: .normal)
        btn.contentMode = .center
        btn.backgroundColor = UIColor.white
        btn.layer.masksToBounds = true
        return btn
    }()

    lazy var labnum :UILabel = {
        let lab = UILabel()
        lab.textColor = UIColor.gray
        lab.textAlignment = .center
        lab.text = "1"
        return lab
    }()

    lazy var btn_reSet :UIButton = {
        let btn = UIButton()
        btn.setTitleColor(UIColor.gray, for: .normal)
        btn.setTitle("重来", for: .normal)
        btn.contentMode = .center
        btn.backgroundColor = UIColor.white
        btn.layer.masksToBounds = true
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 14)
        return btn
    }()
    lazy var btn_over :UIButton = {
        let btn = UIButton()
        btn.setTitleColor(UIColor.gray, for: .normal)
        btn.setTitle("结束PK", for: .normal)
        btn.contentMode = .center
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 14)
        btn.backgroundColor = UIColor.white
        return btn
    }()
    var reloadPkListClosure :(() ->Void)?
    var groupInfos = [groupInfo]()
    lazy var PKId = ""
    lazy var state = 1
    lazy var GroupCount:String = " "
    lazy var activityOpenClassStuCount = 0
    //小组是否有人
    lazy var isGroupCount:Bool = false
    struct group {
        let Id :String
        let Name :String
        let Score:Int
        let GroupStuCount:Int
        let isJoinGroup:Int
    }
}

struct groupInfo {
    let Name:String
    let Id:String
    var Score:Int
    var Members:Int
}
