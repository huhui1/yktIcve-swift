//
//  statisticsChartsPrepareView.swift
//  云课堂2
//
//  Created by 尤增强 on 2018/7/21.
//  Copyright © 2018年 zqyou. All rights reserved.
//

import UIKit
import SwiftyJSON

import JavaScriptCore
// 定义一个模型 该模型实现SwiftJavaScriptDelegate协议
@objc class statisticsChartsJavaScriptModel: NSObject, SwiftJavaScriptDelegate {
    func down() {

    }

    func showBBS() {
       
    }


    weak var controller: statisticsChartsPrepareView?
    weak var jsContext: JSContext?

    func back() {
        controller?.isOverSign()
    }

    func showFaceMS() {


    }

    func postMessage(_ dict: [String: String]) {
        let dic = ["type":"face",
                    "params":dict["params"]! ];
        controller?.emitorder(dict: dic)
    }

}
class statisticsChartsPrepareView: UIViewController,UIWebViewDelegate {


    override func viewDidLoad() {
        super.viewDidLoad()

        self.view.backgroundColor = UIColor.colorWithHex(hexColor: 0xf1f1f1);
        self.setWebUI();

        let params = ["type":"signing",
                      "signType":"none",
                      "studentNumber":self.signcount,
                      "studycount":self.studycount,
                      "numbers":"",
                      "signId":self.signId,
                      "courseOpenId":self.courseOpenId,
                      "fromRes":false,
                      "title":"123",
                      "send2student":false] as [String : Any]
        let dict = ["type":"face","params":JSON.init(params).description ];

        self.emitorder(dict: dict)
        self.setWebUI()
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }


    fileprivate func setWebUI() {


        let path = Bundle.main.path(forResource: "signing", ofType: ".html",
                                    inDirectory: "HTML5/src");

        let url = URL(fileURLWithPath:path!);
        let request = URLRequest(url:url);

        webView.loadRequest(request as URLRequest)
        webView.scalesPageToFit = true
        webView.delegate = self
        self.view.addSubview(self.webView)
        //将浏览器视图全屏(在内容区域全屏,不占用顶端时间条)
        let frame = CGRect(x:0, y:0, width:UIScreen.main.bounds.width,
                           height:UIScreen.main.bounds.height)
        webView.frame = frame
        webView.delegate = self
        webView.scrollView.bounces = false

        let Item = UIBarButtonItem.init(title: "刷新", style: UIBarButtonItemStyle.plain, target: self, action: #selector(self.refresh));
        self.navigationItem.rightBarButtonItem = Item
    }

    func webViewDidFinishLoad(_ webView: UIWebView) {


        self.jsContext = webView.value(forKeyPath: "documentView.webView.mainFrame.javaScriptContext") as! JSContext
        let model = statisticsChartsJavaScriptModel()
        model.controller = self
        model.jsContext = self.jsContext

        // 这一步是将SwiftJavaScriptModel模型注入到JS中，在JS就可以通过WebViewJavascriptBridge调用我们暴露的方法了。
        self.jsContext.setObject(model, forKeyedSubscript: "WebViewJavascriptBridge" as NSCopying & NSObjectProtocol)

        // 注册到本地的Html页面中
        let path = Bundle.main.path(forResource: "signing", ofType: ".html",
                                    inDirectory: "HTML5/src");
        let url = URL(fileURLWithPath:path!);
        self.jsContext.evaluateScript(try? String(contentsOf: url, encoding: String.Encoding.utf8))



        self.jsContext.exceptionHandler = { (context, exception) in
            print("exception：", exception as Any)
        }

        if(!self.isload){
            let jsHandlerFunc = self.jsContext?.objectForKeyedSubscript("jsHandlerFunc")
                        let dict = ["value":self.signcount,
                                    "number":self.studycount,
                                   ] as [String : Any]
                        let _ = jsHandlerFunc?.call(withArguments: [dict])
                        self.isload = true

        }

    }

    var isload = false
    lazy var webView : UIWebView = {
        let web = UIWebView()
        return web
    }()
    //投屏指令
    func emitorder(dict:[String:String]){
        ZQSocketManager.share.notificationSocketManager(data: dict)
    }

    var jsContext:JSContext!

    var openClassIds: String = "";

    var courseOpenId: String = "";

    var activityId :String = "";

    var signId :String = "";



    var studycount = 0;

    var signcount = 0;


    let NotifyEventListener = NSNotification.Name("stufeedback")

    //重命名一个闭包
    typealias signListreloadView = () -> Void

    var signListClosure : signListreloadView?;

    var refreshCount:Int = 0
    {

        willSet
        {
            print("do nothing")
        }
        didSet
        {
            if refreshCount<10
            {
                self.refresh()
            }

        }
    }
    var codeTimer: DispatchSourceTimer?

}
