//
//  DiscussInfoIngView.swift
//  云课堂2
//
//  Created by cc on 2018/6/12.
//  Copyright © 2018年 jcjy. All rights reserved.
//

import UIKit
import Alamofire
import SwiftyJSON

class DiscussInfoIngView: UIViewController,UINavigationControllerDelegate,UIGestureRecognizerDelegate{

    override func viewDidLoad() {
        super.viewDidLoad()
        self.view.backgroundColor = UIColor.white
        self.title = "讨论"
        self.getDiscussReplyList(isRefresh: true)

        NotificationCenter.default.addObserver(self, selector: #selector(self.stufeedback), name: NotifyEventListener, object: nil)

        let item = UIBarButtonItem(title: "\u{e6f7} 返回", style: .plain, target: self, action: #selector(self.backBtnClick))

        self.navigationItem.leftBarButtonItem = item

        common.share.setBackButtonItem(item:item)
        let statistical = UIBarButtonItem.init(title: "统计", style: UIBarButtonItemStyle.plain, target: self, action: #selector(self.statistical));
        let endDiscuss = UIBarButtonItem.init(title: "结束", style: UIBarButtonItemStyle.plain, target: self, action: #selector(self.overdiscuss));
        if(self.state == 3){
            self.navigationItem.rightBarButtonItem = statistical
        }else{
            self.navigationItem.rightBarButtonItems = [endDiscuss,statistical]
        }
        // Do any additional setup after loading the view.
      
       self.setTableView()
       self.setBtnUI()
        let item1 = UIBarButtonItem(title: "返回", style: .plain, target: self, action: nil)
        self.navigationItem.backBarButtonItem = item1
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    @objc func backBtnClick(){
        let dict = ["type":"closeRes"];

        ZQSocketManager.share.notificationSocketManager(data: dict)
        NotificationCenter.default.removeObserver(self)
        self.navigationController?.popViewController(animated: true)
    }
    
    func setBtnUI(){
        self.view.addSubview(self.replyBtn)
        let HX = common.share.returnSafeAreaLineHeight()
        self.replyBtn.snp.makeConstraints { (make) in
            make.width.equalTo(width)
            make.left.left.equalTo(0)
            make.bottom.equalTo(self.view.snp.bottom).offset(HX)
            make.height.equalTo(40)
        }
        self.replyBtn.addTarget(self, action: #selector(self.reply), for: .touchUpInside)
        self.view.addSubview(self.bgview)
        self.bgview.snp.makeConstraints { (make) in
            make.width.equalTo(width)
            make.height.equalTo(40)
            make.left.equalTo(0)
            make.bottom.equalTo(self.view.snp.bottom).offset(HX)
        }
        self.bgview.addSubview(self.checkBtn)
        self.bgview.addSubview(self.setSorceBtn)
        self.bgview.addSubview(self.cancelBtn)
        self.checkBtn.snp.makeConstraints { (make) in
            make.width.equalTo(width / 3)
            make.height.equalTo(40)
            make.left.equalTo(0)
            make.bottom.equalTo(self.bgview.snp.bottom)
        }
        
        self.checkBtn.addTarget(self, action: #selector(self.selAll(_:)), for: .touchUpInside)
        self.setSorceBtn.snp.makeConstraints { (make) in
            make.width.equalTo(self.checkBtn.snp.width)
            make.height.equalTo(self.checkBtn.snp.height)
            make.left.equalTo(self.checkBtn.snp.right)
            make.bottom.equalTo(self.bgview.snp.bottom)
        }
        self.setSorceBtn.addTarget(self, action: #selector(setSocre(_btn:)), for: .touchUpInside)
        
        self.cancelBtn.snp.makeConstraints { (make) in
            make.width.equalTo(self.checkBtn.snp.width)
            make.height.equalTo(self.checkBtn.snp.height)
            make.left.equalTo(self.setSorceBtn.snp.right)
            make.bottom.equalTo(self.bgview.snp.bottom)
        }
        self.cancelBtn.addTarget(self, action: #selector(self.cancel), for:.touchUpInside)

        //判断是否点击过
        let t = cx.readOneData(_userId: Account.defaultAccount.id!)
        if(!t.isbrowseDiscuss){
            self.maskView()
        }
        // bgview.backgroundColor = UIColor.bg
        
        
        
        self.view.addSubview(self.UpBtn)
        self.view.bringSubview(toFront: self.UpBtn)
        self.view.addSubview(self.DownBtn)
        self.view.bringSubview(toFront: self.DownBtn)
        //新建
        if(common.share.isX()){
            UpBtn.frame = CGRect.init(x: width - 60, y: height - 230, width:36, height: 36);
            DownBtn.frame = CGRect.init(x: width - 60, y: height - 250, width:36, height: 36);
        }else{
            UpBtn.frame = CGRect.init(x: width - 60, y: height - 170, width:36, height: 36);
            DownBtn.frame = CGRect.init(x: width - 60, y: height - 220, width:36, height: 36);
            
        }
       
        self.UpBtn.layer.masksToBounds = true;
        self.UpBtn.layer.cornerRadius = 18;
        self.UpBtn.titleLabel?.textAlignment = .center;
        self.UpBtn.layer.shadowOpacity = 1
        self.UpBtn.layer.shadowRadius = 2
        self.UpBtn.layer.shadowOffset = CGSize(width: 1, height: 1)
        self.UpBtn.addTarget(self, action: #selector(self.UpOrDown), for: .touchUpInside)
        
        self.DownBtn.layer.masksToBounds = true;
        self.DownBtn.layer.cornerRadius = 18;
        
        self.DownBtn.titleLabel?.textAlignment = .center;
        self.DownBtn.layer.shadowOpacity = 1
        self.DownBtn.layer.shadowRadius = 2
        self.DownBtn.layer.shadowOffset = CGSize(width: 1, height: 1)
        self.DownBtn.addTarget(self, action: #selector(self.UpOrDown), for: .touchUpInside)
        
    }

    @objc func UpOrDown(_btn:UIButton){
     
        let name = _btn.tag == 1 ? "pageUp":"pageDown";
        let params = ["type":"control",
                      "name":name]
        let dict = ["type":"face",
                    "params":JSON.init(params).description ];
        ZQSocketManager.share.notificationSocketManager(data: dict)
        
    }

    //统计
    @objc func statistical(){
        let vc = discussParticipateStatisticalViewController()
        vc.openCourseId = self.openCourseId
        vc.discussId = self.discussId
        self.isPushed = true
        self.navigationController?.pushViewController(vc, animated: true)
    }
    //移除监听
    override func viewWillDisappear(_ animated: Bool) {

        if(!self.isPushed){

          
        }
        self.isPushed = false
    }

    override func viewWillAppear(_ animated: Bool) {
        self.addEventListener()
    }

    var stuIdList  = [String]()
    var isrefreshcollectionView:Bool = true
    var socre:Int = 0
    //存储选中单元格的索引
    var selectedIndexs = [Int]()
    var data = JSON()
    var imgList = [UploadDocModel]()
    let maxImgCount = 9
//    lazy var hx = (UIScreen.main.bounds.height - 400) > 310 ? 310: (UIScreen.main.bounds.height - 400)
    lazy var state : Int = {return 0}()
    lazy var openCourseId = "";
    var ht = 0
    lazy var ischeckall:Bool = false;
    lazy var topheight:CGFloat = 0;
    lazy var makeView:UIView = {
        return UIView.init(frame: self.view.frame)
    }()
    lazy var tapBtn:UIButton = {
        let btn = UIButton()
        return btn
    }()
    lazy var Btn_title:UIButton = {
        let btn = UIButton()
        return btn
    }()

    let cx = SQLiteManagerMask()
    lazy var replyList = [JSON]()
    var userInfo :User!
    lazy var uploadUrl : String = {
        return ""
    }()

    lazy var bgview : UIView = {
        let view = UIView()
        view.isHidden = true
        return view
    }()
    lazy var isPushed :Bool = {return false}()
    lazy var headview : BBSHeadView = {
        let view = BBSHeadView()
        view.deletegate = self
        return view
    }()

    lazy var replyBtn :UIButton = {
        let btn = UIButton()
        btn.setTitle("回复评论", for: .normal)
        btn.setTitleColor(UIColor.black, for: .normal)
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 14)
        btn.backgroundColor = UIColor.white
        return btn
    }()
    fileprivate lazy var checkBtn :UIButton = {
        let btn = UIButton()
        btn.setTitle("全选", for: .normal)
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 16)
        btn.setTitleColor(UIColor.black, for: .normal)
        return btn
    }()
    fileprivate lazy var setSorceBtn :UIButton = {
        let btn = UIButton()
        btn.setTitle("打分", for: .normal)
        btn.backgroundColor = UIColor.colorWithHex(hexColor: 0x0CC496)
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 16)
        btn.setTitleColor(UIColor.white, for: .normal)
        btn.tag = -99
        return btn
    }()
    fileprivate lazy var cancelBtn:UIButton = {
        let btn = UIButton()
        btn.setTitle("取消", for: .normal)
        btn.backgroundColor = UIColor.colorWithHex(hexColor: 0x04ae84)
        
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 16)
        btn.setTitleColor(UIColor.white, for: .normal)
        return btn
    }()
    fileprivate lazy var UpBtn:UIButton = {
        let btn = UIButton()
        btn.backgroundColor = UIColor.white
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 35)
        btn.tag = 2
        btn.setTitle("\u{e6ed}", for:.normal);
        btn.setTitleColor(UIColor.lightGray, for: .normal);
        return btn
    }()
    fileprivate lazy var DownBtn:UIButton = {
        let btn = UIButton()
        btn.backgroundColor = UIColor.white
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 35)
        btn.setTitle("\u{e6e8}", for:.normal);
        btn.setTitleColor(UIColor.lightGray, for: .normal);
        btn.tag = 1
        return btn
    }()
    
    var reloaddiscussListClosure :(() ->Void)?
    let width = UIScreen.main.bounds.width
    let height = UIScreen.main.bounds.height
    var tableView : UITableView!
    lazy var discussId:String = {return ""}()
  
    let NotifyEventListener = NSNotification.Name("stufeedback")
}

extension DiscussInfoIngView :BBSHeadViewDelegate,UITableViewDelegate,UITableViewDataSource{


    func setTableView(){
        if(common.share.isX()){
            ht = 45
        }
        self.tableView = UITableView.init(frame: CGRect(x:0, y:0, width:width, height:UIScreen.main.bounds.height - 110 - CGFloat(ht)))

        self.tableView.tableFooterView = UIView(frame:CGRect.zero)//除去多余的cell
        self.tableView.delegate = self
        self.tableView.dataSource = self
        tableView.separatorInset = UIEdgeInsets.zero;
        tableView.layoutMargins = UIEdgeInsets.zero;
        //ipad
        if #available(iOS 9.0, *) {
            tableView.cellLayoutMarginsFollowReadableWidth = false
        }
        self.tableView.estimatedRowHeight = 44.0;
        //非编辑状态
        self.tableView.allowsMultipleSelection = false
        //表格在编辑状态下允许多选allowsMultipleSelectionDuringEditing
        self.tableView?.allowsMultipleSelectionDuringEditing = true
        //rowHeight属性设置为UITableViewAutomaticDimension
        self.tableView.rowHeight = UITableViewAutomaticDimension;

        self.tableView.register(UINib.init(nibName: "DiscussInfoIngCell", bundle: Bundle.main), forCellReuseIdentifier: "DiscussCell")

        self.view.addSubview(self.tableView)

        //下拉刷新相关设置,使用闭包Block
        self.tableView.mj_header = MJRefreshNormalHeader(refreshingBlock:{
            self.isrefreshcollectionView = false
            self.getDiscussReplyList(isRefresh: false)
        })
    }

    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }

    //设置编辑
    func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool {
        let jsondata = JSON(self.replyList[indexPath.row])
        if jsondata["creatorId"].stringValue == Account.defaultAccount.id!{
            return false
        }else{
            return true
        }
    }


    //返回表格行数（也就是返回控件数）
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.replyList.count;
    }


    //创建各单元显示内容(创建参数indexPath指定的单元）
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {

        let jsondata = JSON(self.replyList[indexPath.row])
        let identifier = jsondata["docJson"].count > 0 ? "cell1":"cell2"
        self.tableView.register(UINib.init(nibName: "DiscussInfoIngCell", bundle: Bundle.main), forCellReuseIdentifier: identifier)

        let cell : DiscussInfoIngCell =  self.tableView.dequeueReusableCell(withIdentifier: identifier, for: indexPath) as! DiscussInfoIngCell

        cell.setReply(reply: jsondata)
        cell.btn_flower.tag = indexPath.row
        cell.btn_flower.addTarget(self, action:  #selector(setSocre(_btn:)), for: .touchUpInside)
        //绑定对长按的响应
        let longPress =  UILongPressGestureRecognizer(target:self,action:#selector(tableviewCellLongPressed(gestureRecognizer:)))
        //代理
        longPress.delegate = self
        longPress.minimumPressDuration = 1.0
        //将长按手势添加到需要实现长按操作的视图里
        cell.addGestureRecognizer(longPress)
        cell.contentImg.tag = indexPath.row

        let taget = UITapGestureRecognizer(target:self, action:#selector(self.touchImg(gestureRecognizer:)))
        taget.numberOfTapsRequired = 1
        cell.contentImg.isUserInteractionEnabled = true
        cell.contentImg.addGestureRecognizer(taget)
        return cell
    }

    @objc func touchImg(gestureRecognizer:UITapGestureRecognizer){
        let tag = gestureRecognizer.view?.tag
        //跳转界面
        let vc = whiteboardView()
        vc.file = replyList[tag!]["docJson"][0]["docOssPreview"].stringValue
        self.isPushed = true
        self.present(vc, animated: true, completion: nil)
    }

    //处理列表项的取消选中事件
    func tableView(_ tableView: UITableView, didDeselectRowAt indexPath: IndexPath) {
        //判断该行是否时编辑状态,并且编辑状态开启
        if self.tableView(self.tableView, canEditRowAt: indexPath)&&self.tableView!.isEditing == true{
            //判断该行原先是否选中
            if let index = selectedIndexs.index(of: indexPath.row){
                selectedIndexs.remove(at: index) //原来选中的取消选中
            }else{
                selectedIndexs.append(indexPath.row) //原来没选中的就选中
            }

        }
    }

    //长按表格
    @objc func tableviewCellLongPressed(gestureRecognizer:UILongPressGestureRecognizer){
        if (gestureRecognizer.state == .ended)
        {

            self.bgview.isHidden =  false
            self.replyBtn.isHidden =  false
            //在正常状态和编辑状态之间切换
            if(self.tableView!.isEditing == false) {
                self.tableView!.setEditing(true, animated:true)
            }
            else {
                self.selectedIndexs = []
                self.bgview.isHidden = true
                self.replyBtn.isHidden = false
                self.tableView!.setEditing(false, animated:true)
            }
        }

    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if self.tableView(self.tableView, canEditRowAt: indexPath)&&self.tableView!.isEditing == true{
            //判断该行原先是否选中
            if let index = selectedIndexs.index(of: indexPath.row){
                selectedIndexs.remove(at: index) //原来选中的取消选中
            }else{
                selectedIndexs.append(indexPath.row) //原来没选中的就选中
            }
        }else{//编辑状态不能跳转
            self.showReplyInfo(info: self.replyList[indexPath.row].description)
        }
    }

    func BBSHeadView_viewMore(height: CGFloat) {
        
        self.headview.frame = CGRect.init(x: 0, y: 0, width: width, height: self.headview.frame.size.height + height )
        self.headview.numberline = 0
        self.headview.setData(json: self.data["discussInfo"])
        self.tableView.tableHeaderView = self.headview

        self.tableView.reloadData()
    }

    func BBSHeadView_backImgUrl(str: String) {
        let vc = whiteboardView()
        vc.file = str
        self.isPushed = true
        self.present(vc, animated: true, completion: nil)
    }
}
