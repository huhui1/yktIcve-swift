//
//  replyDiscussController.swift
//  66iclasscloud
//
//  Created by 尤增强 on 2018/1/16.
//  Copyright © 2018年 zqy. All rights reserved.
//

import UIKit
import Alamofire
import SwiftyJSON

extension  replyDiscussView {

    @objc func addDiscussReply(){

        let Content = self.textContent.text!

        if(Content.characters.count < 1 && self.docJson.count < 1){
            ZKProgressHUD.showMessage("回复内容不能为空！");
            return;
        }
        let dict = ["StuId":Account.defaultAccount.id!,
                    "DiscussId":self.discussId,
                    "activityId": self.activityId,
                    "ParentId":"0",
                    "Content":Content,
                    "SourceType":3,
                    "OpenClassId":self.openCourseId,
                    "DocJson":JSON.init(self.docJson).description] as [String : Any]
        XLBallLoading.show(in: self.view)
        let data = ["data":JSON.init(dict)]
        Alamofire.request(appAPI.FaceTeach_addDiscussReply, method: .post, parameters: data, encoding: URLEncoding.default).responseJSON { response in

            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{
                    //向老师发送推送
                    self.pushdiscussmessage()
                    if((self.reloadBBSListClosure) != nil){
                         self.reloadBBSListClosure!()
                    }
                   
                    ZKProgressHUD.showMessage(json["msg"].stringValue)
                    NotificationCenter.default.removeObserver(self)
                    self.navigationController?.popViewController(animated: true)
                }else{
                    ZKProgressHUD.showError(json["msg"].stringValue);
                }
                XLBallLoading.hide(in: self.view)
            }else{
                ZKProgressHUD.showError("网络环境异常请稍后再试！");
                XLBallLoading.hide(in: self.view)
            }
        }

    }
    //发送个推消息
    func pushdiscussmessage(){
//        var datajson = {
//            actionType: "discussed",
//            actId: _this.discussId,
//            userId: $user.id,
//            displayName: $user.displayName,
//            content: $('.contentEditable').text(),
//        };
        let dict = ["actionType":"discussed",
                    "actId":self.discussId,
                    "userId":Account.defaultAccount.id!,
                    "displayName":Account.defaultAccount.displayName!,
                    "content":self.textContent.text] as [String : Any]
        geTuiSendController.share.sendGTMsgToUser(data:JSON.init(dict).description,creatorId:self.creatorId)
    }
    //底部弹窗
    @objc func uploadImg(_ button:UIButton){
        //判断是否开启打开相册权限
        if(!common.share.isAuthorizePhotos()){
            common.share.authorizePhotos()
        }else{
            self.upload()
        }
    }
    //底部弹窗
    func upload(){

        if( self.uploadUrl.isEmpty){
            common.share.getUploadUrl();
        }
        let userIconAlert = UIAlertController(title: "请选择操作", message: "", preferredStyle: UIAlertControllerStyle.actionSheet)

        let chooseFromPhotoAlbum = UIAlertAction(title: "从相册选择", style: UIAlertActionStyle.default, handler: funcChooseFromPhotoAlbum)
        userIconAlert.addAction(chooseFromPhotoAlbum)

        let chooseFromCamera = UIAlertAction(title: "拍照", style: UIAlertActionStyle.default,handler:funcChooseFromCamera)
        userIconAlert.addAction(chooseFromCamera)

        let canelAction = UIAlertAction(title: "取消", style: UIAlertActionStyle.cancel,handler: nil)
        userIconAlert.addAction(canelAction)

        if(UIDevice.current.model == "iPad")
        {
            let mine = UIView.init(frame: CGRect(x:self.view.bounds.width/2,y:self.view.bounds.height,width:20,height:20))
            self.view.addSubview(mine)
            let popPresenter =  userIconAlert.popoverPresentationController

            popPresenter?.sourceView = mine
            popPresenter?.sourceRect = mine.bounds
            self.present(userIconAlert, animated: true, completion: nil)
        }
        else{
            self.present(userIconAlert, animated: true, completion: nil)
        }

    }

    //从相册选择照片
    func funcChooseFromPhotoAlbum(_ avc:UIAlertAction) -> Void{


        let masterVC = HsuAlbumMasterTableViewController()
        let navi = UINavigationController(rootViewController: masterVC)
        masterVC.title = "图片"
        let gridVC = HsuAssetGridViewController()
        gridVC.title = "所有图片"
        let leftBarBtn = UIBarButtonItem(title: "", style: .plain, target: self,
                                         action:nil)
        gridVC.navigationItem.leftBarButtonItem = leftBarBtn
        navi.pushViewController(gridVC, animated: false)

        UIDevice.current.setValue(UIInterfaceOrientation.landscapeLeft.rawValue, forKey: "orientation")
        present(navi, animated: true)

        HandleSelectionPhotosManager.share.getSelectedPhotos(with: 1) { (assets, images) in


            self.upload(img: images[0])
        }


    }

    func funcChooseFromCamera(_ avc:UIAlertAction) -> Void{
        if UIImagePickerController.isSourceTypeAvailable(UIImagePickerControllerSourceType.camera) {
            let imagePicker = UIImagePickerController()

            //设置代理
            imagePicker.delegate = self
            //允许编辑
            imagePicker.isEditing = false;
            //设置图片源
            imagePicker.sourceType = UIImagePickerControllerSourceType.camera
            //模态弹出IamgePickerView

            self.present(imagePicker, animated: true, completion: nil)

        }else{
            print("模拟器不支持拍照功能")
        }
    }

    func imagePickerControllerDidCancel(_ picker: UIImagePickerController){
        picker.dismiss(animated: true, completion: nil)
    }

    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : Any]) {
        //获取照片的原图
        let image = (info as NSDictionary).object(forKey: UIImagePickerControllerOriginalImage)as!UIImage
        //获得编辑后的图片
        //let image = (info as NSDictionary).object(forKey: UIImagePickerControllerEditedImage)as!UIImage


        self.upload(img: image);

        picker.dismiss(animated: true, completion: nil)
    }

    //上传
    func upload(img:UIImage)
    {
        self.uploadUrl = appAPI.uploadUrl;
        //  self.prefixUrl = appAPI.prefixUrl;

        //let fileURL1 = Bundle.main.url(forResource: "faceMS", withExtension: "png")
        let fileManager = FileManager.default
        let rootPath = NSSearchPathForDirectoriesInDomains(.documentDirectory,
                                                           .userDomainMask, true)[0] as String
        let date = NSDate(),
        timeInterval = date.timeIntervalSince1970 * 1000

        let filePath = "\(rootPath)/" + String(timeInterval) + ".jpg"

       let  imageData =  common.share.resetImgSize(sourceImage: img, maxImageLenght: 0, maxSizeKB: 200)

        ZKProgressHUD.show("0 %")
        fileManager.createFile(atPath: filePath, contents: imageData, attributes: nil)
        let imageNSURL = URL.init(fileURLWithPath: filePath)

        Alamofire.upload(multipartFormData: { multipartFormData in
            multipartFormData.append(imageNSURL, withName: "file1")
        },to: self.uploadUrl,encodingCompletion: { encodingResult in
            switch encodingResult {
            case .success(let upload, _, _):
                upload.responseJSON { response in
                    let result = JSON(response.result.value ?? "");
                    let dic = ["docTitle":"\(timeInterval).jpg","docUrl":result["url"].stringValue]
                    self.docJson.add(dic)
                    self.setImg(img:img)
                    ZKProgressHUD.hide(delay: 0)
                    }.uploadProgress { progress in // main queue by default
                        // print("当前进度: \(progress.fractionCompleted)")
                        ZKProgressHUD.show("\(String(format: "%.1f", progress.fractionCompleted * 100)) %")
                }
            case .failure(let encodingError):
                print(encodingError)
            }
        })
    }

    func setImg(img:UIImage){
        self.imgview.image = img
        self.imgview.isHidden = false
        self.btnSelpicture.isHidden = true

    }


    @objc func touch_image(sender: UITapGestureRecognizer){

        let vc = uploadImgPreviewView(),tag = sender.view?.tag ?? 0
        vc.imgindex = tag
        let view =  sender.view as! UIImageView
        vc.img = view.image!
        vc.modalTransitionStyle = .crossDissolve

        vc.reloadImglistClosure = {(index) in
//            self.reloadImagUI(index: index);
            self.docJson.removeAllObjects()
            self.imgview.isHidden =  true
            self.btnSelpicture.isHidden = false
        }
        self.present(vc, animated: true, completion: nil)
    }


}
