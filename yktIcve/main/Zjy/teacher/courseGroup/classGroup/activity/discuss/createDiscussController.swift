//
//  createDiscussController.swift
//  66iclasscloud
//
//  Created by 尤增强 on 2018/1/8.
//  Copyright © 2018年 zqy. All rights reserved.
//

import UIKit
import Alamofire
import SwiftyJSON

extension createDiscussView{

    @objc func editDiscuss(_ button:UIButton){

        let Title = discussTitleText.text!

        if(Title.characters.count < 1){
            ZKProgressHUD.showMessage("请输入讨论标题");
            return;
        }
        
        var  DocJson = [Dictionary<String,String>]()
        for i in self.imgList{
            if(!i.docUrl.isEmpty){
                let d = ["docTitle":i.docTitle,"docUrl":i.docUrl]
                DocJson.append(d)
            }
            
        }
        let dict = ["CreatorId":Account.defaultAccount.id!,
                    "Id":self.discussId,
                    "CourseOpenId":self.courseOpenId,
                    "activityId": self.activityId,
                    "State":button.tag,
                    "SchoolId":Account.defaultAccount.schoolId!,
                    "Content":self.contenText.text!,
                    "Title":Title,
                    "SourceType":3,
                    "ClassState":self.classState,
                    "DocJson":JSON(DocJson).description] as [String : Any]
        XLBallLoading.show(in: self.view)
        let data = ["data":JSON.init(dict)]
        Alamofire.request(appAPI.FaceTeach_addDiscuss, method: .post, parameters: data, encoding: URLEncoding.default).responseJSON { response in

            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{
                    self.discussId = json["discussObj"]["Id"].stringValue
                    self.reloadDiscussListClosure!();
                    if(button.tag == 1){
                    NotificationCenter.default.removeObserver(self)
                    self.navigationController?.popViewController(animated: true)
                    }else {
                        //向学推送消息
                        self.pushdiscssumessage()
                        NotificationCenter.default.removeObserver(self)
                        self.pushInfoVC()
                    }

//                    {
//                        "discussObj" : {
//                            "CreatorId" : "fwonav2ni7zexp7iavcvqq_yzq",
//                            "Title" : "23444",
//                            "Content" : "",
//                            "Id" : "n6dcagko4rtpdnfkxikvwq",
//                            "DocJson" : [
//                            
//                            ]
//                        },
//                        "code" : 1,
//                        "msg" : "添加成功！"
//                    }
                    ZKProgressHUD.showMessage(json["msg"].stringValue)
                }else{
                    ZKProgressHUD.showError(json["msg"].stringValue);
                }
                XLBallLoading.hide(in: self.view)
            }else{
                ZKProgressHUD.showError("网络环境异常请稍后再试！");
                XLBallLoading.hide(in: self.view)
            }
        }

    }
    //像学生推送讨论
    func pushdiscssumessage(){
//        var datajson = {
//            creatorId: $user.id,
//            faceId: _this.activityId,
//            courseOpenId: _this.courseOpenId,
//            openClassIds: _this.openClassIds,
//            actionType: "discussing",
//            title: title,
//            actId: actId
//        };
        let dict = ["creatorId":Account.defaultAccount.id!,
                    "faceId":self.activityId,
                    "courseOpenId":self.courseOpenId,
                    "openClassIds":self.openClassIds,
                    "actionType":"discussing",
                    "title":discussTitleText.text ?? "",
                    "actId":self.discussId] as [String : Any];
        geTuiSendController.share.sendGTMSG(str: JSON.init(dict).description, userId: Account.defaultAccount.id!, openClassIds: self.openClassIds)
    }
    func pushInfoVC(){

        let vc = DiscussInfoIngView()
        vc.discussId = self.discussId
        vc.userInfo = self.userInfo
        self.navigationController?.pushViewController(vc, animated: true)
        let count = self.navigationController?.viewControllers.count;
        self.navigationController?.viewControllers.remove(at: count!-2)
    }

    //底部弹窗
    func uploadImg(){
        //判断是否开启打开相册权限
        if(!common.share.isAuthorizePhotos()){
            common.share.authorizePhotos()
        }else{
            self.upload()
        }
    }
    //底部弹窗
    func upload(){

        if( self.uploadUrl.isEmpty){
            common.share.getUploadUrl();
        }
        let userIconAlert = UIAlertController(title: "请选择操作", message: "", preferredStyle: UIAlertControllerStyle.actionSheet)

        let chooseFromPhotoAlbum = UIAlertAction(title: "从相册选择", style: UIAlertActionStyle.default, handler: funcChooseFromPhotoAlbum)
        userIconAlert.addAction(chooseFromPhotoAlbum)

        let chooseFromCamera = UIAlertAction(title: "拍照", style: UIAlertActionStyle.default,handler:funcChooseFromCamera)
        userIconAlert.addAction(chooseFromCamera)

        let canelAction = UIAlertAction(title: "取消", style: UIAlertActionStyle.cancel,handler: nil)
        userIconAlert.addAction(canelAction)

        if(UIDevice.current.model == "iPad")
        {
            let mine = UIView.init(frame: CGRect(x:self.view.bounds.width/2,y:self.view.bounds.height,width:20,height:20))
            self.view.addSubview(mine)
            let popPresenter =  userIconAlert.popoverPresentationController

            popPresenter?.sourceView = mine
            popPresenter?.sourceRect = mine.bounds
            self.present(userIconAlert, animated: true, completion: nil)
        }
        else{
            self.present(userIconAlert, animated: true, completion: nil)
        }

    }

    //从相册选择照片
    func funcChooseFromPhotoAlbum(_ avc:UIAlertAction) -> Void{


        let masterVC = HsuAlbumMasterTableViewController()
        let navi = UINavigationController(rootViewController: masterVC)
        masterVC.title = "图片"
        let gridVC = HsuAssetGridViewController()
        gridVC.title = "所有图片"
        let leftBarBtn = UIBarButtonItem(title: "", style: .plain, target: self,
                                         action:nil)
        gridVC.navigationItem.leftBarButtonItem = leftBarBtn
        navi.pushViewController(gridVC, animated: false)

        UIDevice.current.setValue(UIInterfaceOrientation.landscapeLeft.rawValue, forKey: "orientation")
        present(navi, animated: true)

        HandleSelectionPhotosManager.share.getSelectedPhotos(with: 1) { (assets, images) in


            self.upload(img: images[0])
        }

    }

    func funcChooseFromCamera(_ avc:UIAlertAction) -> Void{
        if UIImagePickerController.isSourceTypeAvailable(UIImagePickerControllerSourceType.camera) {
            let imagePicker = UIImagePickerController()

            //设置代理
            imagePicker.delegate = self 
            //允许编辑
            imagePicker.isEditing = false;
            //设置图片源
            imagePicker.sourceType = UIImagePickerControllerSourceType.camera
            //模态弹出IamgePickerView

            self.present(imagePicker, animated: true, completion: nil)

        }else{
            print("模拟器不支持拍照功能")
        }
    }

    func imagePickerControllerDidCancel(_ picker: UIImagePickerController){
        picker.dismiss(animated: true, completion: nil)
    }

    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : Any]) {
        //获取照片的原图
        let image = (info as NSDictionary).object(forKey: UIImagePickerControllerOriginalImage)as!UIImage
        //获得编辑后的图片
        //let image = (info as NSDictionary).object(forKey: UIImagePickerControllerEditedImage)as!UIImage


        self.upload(img: image);

        picker.dismiss(animated: true, completion: nil)
    }

    //上传
    func upload(img:UIImage)
    {
        self.uploadUrl = appAPI.uploadUrl;
      //  self.prefixUrl = appAPI.prefixUrl;

        //let fileURL1 = Bundle.main.url(forResource: "faceMS", withExtension: "png")
        let fileManager = FileManager.default
        let rootPath = NSSearchPathForDirectoriesInDomains(.documentDirectory,
                                                           .userDomainMask, true)[0] as String
        let date = NSDate(),
        timeInterval = date.timeIntervalSince1970 * 1000

        let filePath = "\(rootPath)/" + String(timeInterval) + ".jpg"

       let  imageData =  common.share.resetImgSize(sourceImage: img, maxImageLenght: 0, maxSizeKB: 200)
        
        fileManager.createFile(atPath: filePath, contents: imageData, attributes: nil)
        let imageNSURL = URL.init(fileURLWithPath: filePath)
         ZKProgressHUD.show("0 %")
        Alamofire.upload(multipartFormData: { multipartFormData in
                multipartFormData.append(imageNSURL, withName: "file1")
        },to: self.uploadUrl,encodingCompletion: { encodingResult in
                switch encodingResult {
                case .success(let upload, _, _):
                    upload.responseJSON { response in
                        let result = JSON(response.result.value ?? "");
                        self.setModelToList(result: result, img: img, docTitle: "\(timeInterval).jpg")
                        ZKProgressHUD.hide(delay: 0)
                        }.uploadProgress { progress in // main queue by default
                           // print("当前进度: \(progress.fractionCompleted)")
                           ZKProgressHUD.show("\(String(format: "%.1f", progress.fractionCompleted * 100)) %")
                    }
                case .failure(let encodingError):
                    print(encodingError)
                }
        })

    }

    //model加入数组
    func setModelToList(result:JSON,img:UIImage,docTitle:String){
        
        
        let m = UploadDocModel.init(data: result,type:"jpg",img: img, docTitle:docTitle)
        self.imgList.append(m)
        if(self.imgList.count == self.maxImgCount + 1){
            self.imgList.remove(at: 0)
        }
        self.collectionView.reloadData()
        
    }
    


}

