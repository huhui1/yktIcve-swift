//
//  DiscussInfoIngController.swift
//  云课堂2
//
//  Created by 志辉教育 on 2018/6/12.
//  Copyright © 2018年 jcjy. All rights reserved.
//
import UIKit
import Alamofire
import SwiftyJSON


extension  DiscussInfoIngView {
    //获取讨论list
    func getDiscussReplyList(isRefresh:Bool){
        self.replyList = []
        self.imgList = []
        XLBallLoading.show(in: self.view)
        let dict = ["discussId":self.discussId]
        Alamofire.request(appAPI.FaceTeach_getDiscussReplyList, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            
            if let value = response.result.value {

                let json = JSON(value)
                if(json["code"]>0){
                    if(!isRefresh){
                        //结束刷新
                        self.tableView.mj_header.endRefreshing()
                    }
                    self.data = json
                    self.addEventListener()
                    self.setUIByData(isRefresh:isRefresh)
                }else{
                    ZKProgressHUD.showError(json["msg"].stringValue);
                }
                XLBallLoading.hide(in: self.view)
            }else{
                ZKProgressHUD.showError("网络环境异常请稍后再试！");
                XLBallLoading.hide(in: self.view)
            }
        }
    }


    //填充数据渲染页面
    func setUIByData(isRefresh:Bool){

        self.replyList =  self.data["discussInfo"]["replyList"].arrayValue
        //防止刷新回滚
        if(isRefresh){
            var h = CGFloat.init(80)
            if( self.data["discussInfo"]["docJson"].count > 0){
                h += 110
            }
            if(self.data["discussInfo"]["content"].stringValue.count > 0){
                h += 80
            }
            self.headview.frame = CGRect.init(x: 0, y: 0, width:width, height: h )
            self.headview.setData(json:  self.data["discussInfo"])
            self.tableView.tableHeaderView = self.headview
        }

        self.tableView.reloadData()
    }

    //投屏
    func addEventListener(){
        
        let params = ["type":"discussing",
                      "discussId":self.discussId,
                      "fromRes":false] as [String : Any];

        let dict = ["type":"face",
                    "params":JSON.init(params).description ];
        self.emitToPC(dict: dict)
        
    }

    ///    投屏事件
    ///
    /// - Parameter dict: [String:String]

    func emitToPC(dict:[String:String]){

        ZQSocketManager.share.notificationSocketManager(data: dict)
    }

    @objc func stufeedback(notice: NSNotification){
        let dict =  notice.object as? Dictionary<String ,String>
        
        if(dict!["type"] == "stuDiscussed"){
            
            self.getDiscussReplyList(isRefresh: false)
        }
        
        print(" discuss反馈。。。。。")
    }
    //结束提示框
    @objc func overdiscuss(){
        let alertController = UIAlertController(title: "提示",
                                                message:"是否结束讨论？", preferredStyle: .alert)
        let cancelAction = UIAlertAction(title: "取消", style: .cancel, handler: nil)
        let okAction = UIAlertAction(title: "确定", style:.default, handler: {
            action in
            self.endDiscuss()
        })
        alertController.addAction(cancelAction)
        alertController.addAction(okAction)
        
        self.present(alertController, animated: true, completion: nil)
    }
    //结束
    func endDiscuss(){
        XLBallLoading.show(in: self.view)
        let dict = ["Id":self.discussId] as [String : Any]
        
        Alamofire.request(appAPI.FaceTeach_overDiscuss, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let json = JSON(value)
                if(json["code"] == 1 ){
                    //                    ZKProgressHUD.hide()
                    self.reloadParentvc()
                    self.navigationController?.popViewController(animated: true)
                    
                }
                else{
                    ZKProgressHUD.showError(json["msg"].stringValue);
                }
                XLBallLoading.hide(in: self.view)
            }else{
                XLBallLoading.hide(in: self.view)
                ZKProgressHUD.showError("网络环境异常请稍后再试！");
            }
        }
    }
    func reloadParentvc(){
        let count = self.navigationController?.viewControllers.count
        if let vc : discussListView  = self.navigationController?.viewControllers[count! - 2] as? discussListView {
            vc.refreshItemData(isRefresh: false)
        }
    }
   
    //全选按钮
    @objc func selAll(_ btn:UIButton){
        btn.isSelected = !btn.isSelected
        //清空选中数组
        self.selectedIndexs = []
        //遍历数据
        for i in 0 ..< self.replyList.count {
            
            let indexPath =  NSIndexPath.init(item: i, section: 0) as IndexPath
            if(btn.isSelected){
            //全选
                if self.tableView(self.tableView, canEditRowAt: indexPath){
                    selectedIndexs.append(indexPath.row)
                    self.tableView.selectRow(at: indexPath , animated: true, scrollPosition: UITableViewScrollPosition.none)
                }
            }else{
                self.tableView.deselectRow(at :indexPath, animated: true)
            }
        }
        
    }
  
    //回复
    @objc func reply(){
        let vc = replyDiscussView();
        vc.openCourseId = self.openCourseId
        vc.discussId = self.discussId
        vc.reloadBBSListClosure = {() in
            self.isrefreshcollectionView = false
            self.getDiscussReplyList(isRefresh: false)
        }
        self.isPushed = true
        self.navigationController?.pushViewController(vc, animated: true)
    }
    
    //打分
    @objc func setSocre(_btn:UIButton){
        let tag = _btn.tag
        print(tag)
        if tag >= 0{
            selectedIndexs.append(tag)
            if Account.defaultAccount.id! == replyList[tag]["creatorId"].stringValue {
                ZKProgressHUD.showMessage("不能自己给自己评分!");
                return
            }
        }
        
        let vc = keyBoardView()
        vc.modalTransitionStyle = .crossDissolve
        vc.view.backgroundColor = UIColor(red: 0, green: 0, blue: 0, alpha: 0.1);
        vc.setSocreClosure = {(score) in
            if(score < 99){
                self.saveStuAskScore(score:score)
            }
            self.navigationController?.dismiss(animated: true, completion: nil)
        }
        self.present(vc, animated: true, completion: nil)
    }
    //取消
    @objc func cancel(){
        self.selectedIndexs = []
        self.bgview.isHidden = true
        self.replyBtn.isHidden = false
        //退出编辑状态
        self.tableView!.setEditing(false, animated:true)
        
    }
    //批量打分
    func saveStuAskScore(score:Int){
        self.stuIdList = []
        for i in 0 ..< self.selectedIndexs.count {
            
            self.stuIdList.append(JSON(replyList[selectedIndexs[i]])["Id"].stringValue)
            self.socre = score
            }
        
        if(self.stuIdList.count == 0){
            ZKProgressHUD.showError("请选择要评分的学生!");

            return
        }
        let dict=["teaId":Account.defaultAccount.id!,
                 "discussStuIds":self.stuIdList,
                 "score":score] as [String : Any]
       
        Alamofire.request(appAPI.FaceTeach_saveStuDiscussScore, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            
            if let value = response.result.value {
                let json = JSON(value);
                if json["code"] == 1{
                    ZKProgressHUD.showMessage(json["msg"].stringValue)
                    //更改分数 replyList
                    for i in 0 ..< self.selectedIndexs.count{
                        self.replyList[self.selectedIndexs[i]]["performanceScore"] = JSON(score)
                    }
                    self.selectedIndexs = []
                    self.bgview.isHidden = true
                    self.replyBtn.isHidden = false
                    self.isrefreshcollectionView = false
                    self.tableView.reloadData()
                    //退出编辑状态
                    self.tableView!.setEditing(false, animated:true)
                }else{
                    ZKProgressHUD.showError("网络异常请稍后再试！");
                }
            }else{
                ZKProgressHUD.showError("网络异常请稍后再试！");
            }
        }
    }
    
    func showReplyInfo(info:String){
        let vc = discussCommentView()
        self.isPushed = true
        vc.json = JSON.init(parseJSON: info) 
        vc.isteacher = true
        vc.Num = 2
        vc.reloadDiscussReply = {() in
           self.isrefreshcollectionView = false
           self.getDiscussReplyList(isRefresh: false)
        }
        self.navigationController?.pushViewController(vc, animated: false)
        
    }
}
