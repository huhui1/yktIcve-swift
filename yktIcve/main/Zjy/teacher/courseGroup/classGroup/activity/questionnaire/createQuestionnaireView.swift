//
//  createQuestionnaireView.swift
//  云课堂-职教云
//
//  Created by cc on 2018/3/29.
//  Copyright © 2018年 zqy. All rights reserved.
//

import UIKit
import SwiftyJSON

class createQuestionnaireView: UIViewController,UITableViewDelegate,UITableViewDataSource,UITextFieldDelegate{

    override func viewDidLoad() {
        super.viewDidLoad()

        self.title = "问卷调查"

        self.tableView.delegate = self;
        self.tableView.dataSource = self;

        if #available(iOS 9.0, *) {
            tableView.cellLayoutMarginsFollowReadableWidth = false
        } else {
            // Fallback on earlier versions
        }


        self.setUI()

        let previewItem = UIBarButtonItem.init(title: "预览", style: UIBarButtonItemStyle.plain, target :self, action: #selector(self.preview));

        self.navigationItem.rightBarButtonItem = previewItem;

        let item = UIBarButtonItem(title: "\u{e6f7}返回", style: .plain, target: self, action: #selector(self.back))

        self.navigationItem.leftBarButtonItem = item

        self.navigationItem.leftBarButtonItem?.setTitleTextAttributes([NSAttributedStringKey.font: UIFont(name: "iconfont", size: 18.0) as Any], for:.normal)

        self.navigationItem.leftBarButtonItem?.setTitleTextAttributes([NSAttributedStringKey.font: UIFont(name: "iconfont", size: 18.0) as Any], for:.selected)

        self.view.backgroundColor = UIColor.colorWithHex(hexColor: 0xedecf2)
        // Do any additional setup after loading the view.
    }



    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    @objc func back(){
        if(self.isAdd && self.list.count > 0){
            let alertController = UIAlertController(title: "温馨提示", message: "当前数据没有保存？", preferredStyle: .alert)
            //设置 Actions   点击出发的响应事件都写在相应的代码块里
            let noAction = UIAlertAction(title: "不保存", style: .default){ (action) -> Void in
                self.delQuestionnaire()

            }
            let yesAction = UIAlertAction(title: "保存", style: .default){ (action) -> Void in
                self.reloadParent()
            }
            //添加 Actions，添加的先后和显示的先后顺序是有关系的

            alertController.addAction(noAction)
            alertController.addAction(yesAction)
            //展示Alert Controller
            self.present(alertController, animated: true, completion: nil)
        }else{
            self.navigationController?.popViewController(animated: true)
        }
    }


    func setUI(){
        //键盘处理
        toolBar = common.share.AddToolKeyboardDoneBar()
        let doneButton = UIBarButtonItem(title: "确定", style: .plain, target: self, action: #selector(self.DoneClick));
        let spaceButton = UIBarButtonItem(barButtonSystemItem: .flexibleSpace, target: nil, action: nil)
        toolBar.setItems([spaceButton,doneButton], animated: false);
        
        self.view.addSubview(text_title)
        self.text_title.snp.makeConstraints{ (make) in
            make.width.equalTo(width)
            make.height.equalTo(40)
            make.left.equalTo(0)
            make.top.equalTo(5)
        }
        self.text_title.delegate = self
        if(self.questionnaireId.isEmpty){
            let date = NSDate()
            let timeFormatter = DateFormatter()
            timeFormatter.dateFormat = "yyy-MM-dd HH:mm"
            let strNowTime = timeFormatter.string(from: date as Date) as String + "的问卷调查"
            self.text_title.text = strNowTime

        }else{
            self.getQuestionnaireData()
        }
        self.view.addSubview(tableView)
        self.tableView.frame = CGRect.init(x: 0, y: 60, width: width, height: height - 170)
        self.bgview.frame.size = CGSize.init(width: width, height: 80)
        self.btn_add.frame.size = CGSize.init(width: 80, height: 30)
        self.btn_add.center = self.bgview.center
        self.tableView.tableFooterView = self.bgview
        self.bgview.addSubview(self.btn_add)
        btn_add.layer.masksToBounds = true
        btn_add.layer.cornerRadius = 15
        btn_add.layer.borderWidth = 1.5
        btn_add.layer.borderColor = UIColor.bg.cgColor


        let HX = common.share.returnSafeAreaLineHeight()
        self.view.addSubview(btn_preserve)
        btn_preserve.snp.makeConstraints{ (make) in
            make.width.equalTo(width / 2)
            make.height.equalTo(55)
            make.bottom.equalTo(self.view.snp.bottom).offset(HX)
            make.left.equalTo(0)
        }
        self.view.addSubview(btn_start)
        btn_start.snp.makeConstraints{ (make) in
            make.width.equalTo(width / 2)
            make.height.equalTo(55)
            make.bottom.equalTo(self.view.snp.bottom).offset(HX)
            make.left.equalTo(self.btn_preserve.snp.right)
        }
    }

    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }

    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 60
    }

    //返回表格行数（也就是返回控件数）
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return list.count;
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell:questionnaireQuestionListTableViewCell = tableView.dequeueReusableCell(withIdentifier: "SwiftCell") as! questionnaireQuestionListTableViewCell
        let questionnaire =  self.list[indexPath.row]
        cell.lab_title.text = questionnaire.title
        if(questionnaire.type == 3){
            cell.lab_type.text = "判断"
        }else if(questionnaire.type == 1){
            cell.lab_type.text = "单选"
        }else if(questionnaire.type == 2){
            cell.lab_type.text = "多选"
        }
        return cell
    }


    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {


        self.editSubQuestion(index: indexPath.row)
    }

    //键盘隐藏
//    override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {
//        self.text_title.resignFirstResponder();
//    }
    //键盘处理
    func textFieldShouldBeginEditing(_ textField: UITextField) -> Bool {
        textField.inputAccessoryView = toolBar;
        return true
    }
    @objc func DoneClick(){
        self.view.endEditing(true)
    }
    
    
    //返回编辑类型，滑动删除

    func tableView(_ tableView: UITableView, editingStyleForRowAt indexPath: IndexPath) -> UITableViewCellEditingStyle {

        return UITableViewCellEditingStyle.delete

    }

    //在这里修改删除按钮的文字

    func tableView(_ tableView: UITableView, titleForDeleteConfirmationButtonForRowAt indexPath: IndexPath) -> String? {

        return "删除"

    }

    //点击删除按钮的响应方法，在这里处理删除的逻辑

    func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCellEditingStyle, forRowAt indexPath: IndexPath) {

        if editingStyle == UITableViewCellEditingStyle.delete {
            let alertController = UIAlertController(title: "提示！",
                                                   message:"是否删除该题目?", preferredStyle: .alert)
            let cancelAction = UIAlertAction(title: "取消", style: .cancel, handler: nil)
            let okAction = UIAlertAction(title: "确定", style: .destructive, handler: {
                action in
                //删除数据源当前的数据
                self.delQuestionnaireQuestion(Id: self.list[indexPath.row].id, tableView, forRowAt: indexPath)
            })
            alertController.addAction(cancelAction)
            alertController.addAction(okAction)
            
            self.present(alertController, animated: true, completion: nil)
        }
    }


    //子题目修改
    fileprivate func editSubQuestion(index:Int){
        let qu = self.list[index]
        if(qu.type  == 3){
            let vc = questionnaireCreateJudgeView()
            vc.ActivityId = self.activityId
            vc.classState = self.classState
            vc.text_title.text = qu.title
            vc.Id = qu.id
            vc.tag = qu.type
            vc.reloadquestionnaireListClosure = { (questionnaire,questionnaireid,id) in

                self.list[index] = questionnaire
                self.tableView.reloadData()

            }
            vc.QuestionnaireId = self.questionnaireId
            self.navigationController?.pushViewController(vc, animated: true)
        }else{
            let vc = questionnaireCreateChoiceView()
            vc.ActivityId = self.activityId
            vc.classState = self.classState
            vc.text_title.text = qu.title
            vc.Id = qu.id
            vc.QuestionnaireId = self.questionnaireId
            if(qu.datajson.count > 0){
                vc.choiceOptional = qu.datajson
            }
            vc.reloadquestionnaireChoiceListClosure = { (questionnaire,questionnaireid,id) in

                self.list[index] = questionnaire
                self.tableView.reloadData()
            }
            vc.tag = qu.type
            self.navigationController?.pushViewController(vc, animated: true)
        }

    }
    //标题
    lazy var text_title : UITextField = {
        let text = UITextField()
        text.font = UIFont.init(name: "iconfont", size: 16)
        text.backgroundColor = UIColor.white
        text.textColor = UIColor.black
        return text
    }()
    //背景tableview
    lazy var tableView : UITableView = {
        let tableview  = UITableView()
        tableview.register(questionnaireQuestionListTableViewCell.self, forCellReuseIdentifier: "SwiftCell");
        return tableview
    }()
    lazy var bgview : UIView = {
        let view = UIView()
        view.backgroundColor = UIColor.white
        return view
    }()
    //添加新题
    lazy var btn_add : UIButton = {
        let btn = UIButton()
        btn.setTitle("+添加新题", for: .normal)
        btn.titleLabel?.font = UIFont(name: "iconfont", size: 15)
        btn.setTitleColor(UIColor.bg, for: .normal)
        btn.backgroundColor = UIColor.white
        btn.contentHorizontalAlignment = .center;
        btn.addTarget(self, action: #selector(self.tappend), for: .touchUpInside)
        return btn
    }()
    //保存
    lazy var btn_preserve : UIButton = {
        let btn = UIButton()
        btn.setTitle("保存", for: .normal)
        btn.titleLabel?.font = UIFont(name: "iconfont", size: 18)
        btn.setTitleColor(UIColor.white, for: .normal)
        btn.backgroundColor = UIColor.colorWithHex(hexColor: 0x0fbc8b)
        btn.contentHorizontalAlignment = .center;
        btn.addTarget(self, action: #selector(startOrSaveQuestionnaire(_ :)), for: .touchUpInside)
        btn.tag = 1
        return btn
    }()
    //开始
    lazy var btn_start : UIButton = {
        let btn = UIButton()
        btn.setTitle("开始", for: .normal)
        btn.titleLabel?.font = UIFont(name: "iconfont", size: 18)
        btn.setTitleColor(UIColor.white, for: .normal)
        btn.backgroundColor = UIColor.bg
        btn.contentHorizontalAlignment = .center;
        btn.addTarget(self, action: #selector(startOrSaveQuestionnaire(_ :)), for: .touchUpInside)
        btn.tag = 2
        return btn
    }()
    let width = UIScreen.main.bounds.width
    let height  = UIScreen.main.bounds.height

    lazy var openClassIds :String = {return ""}()
    lazy var courseOpenId :String = {return ""}()
    lazy var activityId : String = {return ""}()
    lazy var questionnaireId : String = {return ""}()
    lazy var userId:String = {return UserDefaults.standard.value(forKey: "userId") as! String!}()
    lazy var id : String = {return ""}()
    var list = [Questionnaire]()
    lazy var classState:Int = {return 0 }()
    lazy var isAdd:Bool = {return false}()
    var reloadquestionnaireListClosure :(() ->Void)?
    var toolBar = UIToolbar();
    
}

