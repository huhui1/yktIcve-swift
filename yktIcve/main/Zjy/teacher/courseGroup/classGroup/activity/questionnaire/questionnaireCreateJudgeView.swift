//
//  questionnaireCreateJudgeView.swift
//  云课堂-职教云
//
//  Created by cc on 2018/3/29.
//  Copyright © 2018年 zqy. All rights reserved.
//

import UIKit

class questionnaireCreateJudgeView: UIViewController,UITextViewDelegate {

    override func viewDidLoad() {
        super.viewDidLoad()
        self.view.backgroundColor = UIColor.colorWithHex(hexColor: 0xedecf2)
        self.title = "问卷调查"
        self.setUI()
        if(self.tag == 3){
            self.btn_right.backgroundColor = UIColor.colorWithHex(hexColor: 0x11b480)
            self.btn_right.setTitleColor(UIColor.white, for: .normal)
        }
        self.text_title.delegate = self
        // Do any additional setup after loading the view.
        self.setbackitem()
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    func setbackitem(){
        let item = UIBarButtonItem(title: "\u{e6f7}返回", style: .plain, target: self, action: #selector(self.back))
        self.navigationItem.leftBarButtonItem = item
        
        self.navigationItem.leftBarButtonItem?.setTitleTextAttributes([NSAttributedStringKey.font: UIFont(name: "iconfont", size: 18.0) as Any], for:.normal)
        self.navigationItem.leftBarButtonItem?.setTitleTextAttributes([NSAttributedStringKey.font: UIFont(name: "iconfont", size: 18.0) as Any], for:.selected)
    }
    @objc func back(){
        self.navigationController?.popViewController(animated: true)
    }
    func setUI(){

        self.toolBar = common.share.AddToolKeyboardDoneBar()
        let doneButton = UIBarButtonItem(title: "确定", style: .plain, target: self, action: #selector(self.doneClick));
        let spaceButton = UIBarButtonItem(barButtonSystemItem: .flexibleSpace, target: nil, action: nil)
        self.toolBar.setItems([spaceButton,doneButton], animated: false)

        self.view.addSubview(text_title)
        text_title.snp.makeConstraints{ (make) in
            make.width.equalTo(width)
            make.height.equalTo(200)
            make.top.equalTo(10)
            make.left.equalTo(0)
        }
        
        self.view.addSubview(btn_right)
        btn_right.snp.makeConstraints{ (make) in
            make.width.equalTo(width / 2)
            make.height.equalTo(50)
            make.left.equalTo(0)
            make.top.equalTo(self.text_title.snp.bottom).offset(20)
        }
        
        
        self.view.addSubview(btn_agree)
        btn_agree.snp.makeConstraints{ (make) in
            make.width.equalTo(width / 2)
            make.height.equalTo(50)
            make.left.equalTo(self.btn_right.snp.right)
            make.top.equalTo(self.text_title.snp.bottom).offset(20)
        }
        let HX = common.share.returnSafeAreaLineHeight()
        self.view.addSubview(self.btn_preserve)
        btn_preserve.snp.makeConstraints{ (make) in
            make.width.equalTo(width)
            make.height.equalTo(50)
            make.bottom.equalTo(self.view.snp.bottom).offset(HX)
            make.left.equalTo(0)
        }
    }
    //类型选择
    @objc func click(_ btn:UIButton){
        if(btn.tag == 3){
            self.btn_right.backgroundColor = UIColor.colorWithHex(hexColor: 0x11b480)
            self.btn_right.setTitleColor(UIColor.white, for: .normal)
            self.btn_agree.backgroundColor = UIColor.white
            self.btn_agree.setTitleColor(UIColor.bg, for: .normal)
            self.choiceOptional = [["SortOrder":0,"Content":"错误"],["SortOrder":1,"Content":"正确"]]
        }else if(btn.tag == 4){
            self.btn_agree.backgroundColor = UIColor.colorWithHex(hexColor: 0x11b480)
            self.btn_agree.setTitleColor(UIColor.white, for: .normal)
            self.btn_right.backgroundColor = UIColor.white
            self.btn_right.setTitleColor(UIColor.bg, for: .normal)
             self.choiceOptional = [["SortOrder":0,"Content":"反对"],["SortOrder":1,"Content":"赞成"]]
        }
    }
    
    //键盘隐藏
    override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {
        self.text_title.resignFirstResponder();
      
    }

    func textViewShouldBeginEditing(_ textView: UITextView) -> Bool {
        if (textView.text == "请输入内容"){
            
            textView.text = ""
        }
        textView.inputAccessoryView = toolBar;

        return true
    }
    //键盘处理
    @objc func doneClick(){
        self.view.endEditing(true)
    }

    lazy var tag : Int = {
        return 0
    }()
    
    let width = UIScreen.main.bounds.width
   
    lazy var text_title : UITextView = {
        let text = UITextView()
        text.textColor = UIColor.black
        text.font = UIFont.italicSystemFont(ofSize: 16)
        text.backgroundColor = UIColor.white
        text.text = "请输入内容"
        return text
    }()
    //正确错误
    lazy var btn_right : UIButton = {
        let btn = UIButton()
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 15)
        btn.setTitleColor(UIColor.bg, for: .normal)
        btn.setTitle("正确错误", for: .normal)
        btn.backgroundColor = UIColor.white
        btn.tag = 3
        btn.addTarget(self, action: #selector(click(_:)), for: .touchUpInside)
        return btn
    }()
    //赞成反对
    lazy var btn_agree : UIButton = {
        let btn = UIButton()
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 15)
        btn.setTitleColor(UIColor.bg, for: .normal)
        btn.setTitle("赞成反对", for: .normal)
        btn.backgroundColor = UIColor.white
        btn.tag = 4
        btn.addTarget(self, action: #selector(click(_:)), for: .touchUpInside)
        return btn
    }()
    //保存
    lazy var btn_preserve : UIButton = {
        let btn = UIButton()
        btn.titleLabel?.font = UIFont.init(name: "iconfont",size: 15)
        btn.setTitleColor(UIColor.white, for: .normal)
        btn.setTitle("保存", for: .normal)
        btn.backgroundColor = UIColor.bg
        btn.addTarget(self, action: #selector(self.addQuestionJudge), for: .touchUpInside)
        return btn
    }()

    var toolBar = UIToolbar();

    lazy var Id : String = {return ""}()
    lazy var QuestionnaireId : String = {return ""}()
    lazy var ActivityId : String = {return ""}()
    lazy var QuestionType : String = {return ""}()
    lazy var questionTitle : String = {return ""}()
    lazy var SourceType : String = {return ""}()
    var choiceOptional = [["SortOrder":0,"Content":"错误"],["SortOrder":1,"Content":"正确"]]
    lazy var userid: String = {
        return UserDefaults.standard.value(forKey: "userId") as! String!
    }()
    lazy var classState:Int = {return 0 }()
 
    lazy var list : NSArray = []
    var reloadquestionnaireListClosure :((_ questionnaire:Questionnaire,_ questionnaireId:String,_ id:String) ->Void)?
    
}
