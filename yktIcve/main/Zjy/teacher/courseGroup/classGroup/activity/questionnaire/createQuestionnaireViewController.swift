//
//  createQuestionnaireViewController.swift
//  云课堂-职教云
//
//  Created by cc on 2018/3/29.
//  Copyright © 2018年 zqy. All rights reserved.
//

import UIKit
import Alamofire
import SwiftyJSON

extension createQuestionnaireView{
    //预览
    @objc func preview(){
        if self.questionnaireId.isEmpty{
            ZKProgressHUD.showMessage("您还没有添加题目，无法预览!")
            return
        }
        let vc = questionnaireQuestionPreviewView()
        vc.questionnaireId = self.questionnaireId
        vc.activityId = self.activityId
        self.navigationController?.pushViewController(vc, animated: true)
    }
    //选择题型
    @objc func tappend(){
        let vc = questionnaireTypeSelectView()
        vc.parentVc = self
        vc.view.backgroundColor = UIColor.white
        vc.modalTransitionStyle = .crossDissolve
        
        vc.view.backgroundColor = UIColor.init(red: 0, green: 0, blue: 0, alpha: 0.2)
        self.present(vc, animated:  true,completion: nil)
    }
    
    //新增问卷选择
    func addChoice(tag:Int){
        if(tag == 1 || tag == 2){
        let vc = questionnaireCreateChoiceView()
            vc.tag = tag
            vc.ActivityId = self.activityId
            vc.classState = self.classState
            vc.QuestionnaireId = self.questionnaireId

            vc.reloadquestionnaireChoiceListClosure = { (questionnaire,questionnaireid,id) in
                self.list.append(questionnaire)
                self.tableView.reloadData()
                self.questionnaireId = questionnaireid
                self.id = id
            }
            vc.QuestionnaireId = self.questionnaireId
        self.navigationController?.pushViewController(vc, animated: true)
        self.presentedViewController?.dismiss(animated:false, completion: nil)
        }else if (tag == 3){
            let vc = questionnaireCreateJudgeView()
            vc.ActivityId = self.activityId
            vc.classState = self.classState
            vc.QuestionnaireId = self.questionnaireId
           
            vc.tag = tag
            vc.reloadquestionnaireListClosure = { (questionnaire,questionnaireid,id) in
               self.list.append(questionnaire)
                self.tableView.reloadData()
                self.questionnaireId = questionnaireid
                self.id = id
            }
            vc.QuestionnaireId = self.questionnaireId
            self.navigationController?.pushViewController(vc, animated: true)
            self.presentedViewController?.dismiss(animated:false, completion: nil)
        }
    }
    //删除题目
    func delQuestionnaireQuestion(Id:String,_ tableView: UITableView,forRowAt indexPath: IndexPath){

        XLBallLoading.show(in: self.view)
        let dict = ["Id":Id]
        Alamofire.request(appAPI.FaceTeach_delQuestionnaireQuestion, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in

            if let value = response.result.value {
                let json = JSON(value)
                var listmoent = [Questionnaire]()
                if(json["code"] == 1){
                    ZKProgressHUD.showMessage(json["msg"].stringValue);
                    for i in 0 ..< self.list.count {
                        if(i != indexPath.row){
                            listmoent.append(self.list[i])
                        }
                    }
                    self.list = listmoent
                    tableView.deleteRows(at: [indexPath], with: UITableViewRowAnimation.fade);

                }else{
                    ZKProgressHUD.showError(json["msg"].stringValue);
                }
                XLBallLoading.hide(in: self.view)
            }else{
                ZKProgressHUD.showError("网络环境异常请稍后再试！");
                XLBallLoading.hide(in: self.view)
            }
        }
    }

    //不保存数据
    func delQuestionnaire(){
        XLBallLoading.show(in: self.view)
        let dict = ["Id":self.questionnaireId]
        Alamofire.request(appAPI.FaceTeach_delQuestionnaire, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in

            if let value = response.result.value {
                let json = JSON(value)
                if(json["code"] == 1){
                    self.navigationController?.popViewController(animated: true)
                }
                XLBallLoading.hide(in: self.view)
            }else{
                ZKProgressHUD.showError("网络环境异常请稍后再试！");
                XLBallLoading.hide(in: self.view)
            }

        }
    }

    
    //后一页面删除后渲染
    func relaodSubQuestionBydelete(index:Int){
        self.list.remove(at: index)
        self.tableView.reloadData()
    }


    //开始问卷调查
    @objc func startOrSaveQuestionnaire(_ btn :UIButton){
        let Title = text_title.text!
        
        if(Title.characters.count < 1){
            ZKProgressHUD.showMessage("请输入标题");
            return;
        }
        XLBallLoading.show(in: self.view)
        if(self.list.count < 1){
            ZKProgressHUD.showMessage("此次问卷下没有题目！")
            XLBallLoading.hide(in: self.view)
            return ;
        }
        let dict = ["Id":self.questionnaireId,
                    "ActivityId":self.activityId,
                    "Title":Title,
                    "CreatorId":Account.defaultAccount.id!,
                    "ClassState":self.classState,
                    "SourceType":3,
                    "State":btn.tag] as [String : Any]
        let data = ["data":JSON.init(dict)]
        Alamofire.request(appAPI.FaceTeach_addQuestionnaire, method: .post, parameters: data, encoding:URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{
                    self.reloadParent()
                    if(btn.tag==2){
                        self.pushGETUI(json: json)
                    }
                    ZKProgressHUD.showMessage(json["msg"].stringValue)
                }else{
                    ZKProgressHUD.showError(json["msg"].stringValue);
                }
                XLBallLoading.hide(in: self.view)
            }else{
                XLBallLoading.hide(in: self.view)
                 ZKProgressHUD.showError("网络环境异常请稍后再试！");
            }
        }
    }

    func pushGETUI(json:JSON){

//        var datajson = {
//            actionType: "questionnaire",
//            title: title,
//            actId: questionnaireId,
//            creatorId: _this.$user.id,
//            faceId: _this.activityId,
//            openClassIds: _this.openClassIds,
//            courseOpenId: _this.courseOpenId
//        };

        let dict = ["actionType":"questionnaire",
                    "title":text_title.text!,
                    "actId":self.questionnaireId,
                    "creatorId":Account.defaultAccount.id!,
                    "faceId":self.activityId,
                    "openClassIds":self.openClassIds,
                    "courseOpenId":self.courseOpenId] as [String : Any];
        geTuiSendController.share.sendGTMSG(str: JSON.init(dict).description, userId: Account.defaultAccount.id!, openClassIds: self.openClassIds)
    }
    //刷新上一页
    func reloadParent(){
       let count = self.navigationController?.viewControllers.count
       if let vc :questionnaireView = self.navigationController?.viewControllers[count! - 2] as? questionnaireView{
            vc.refreshItemData(isRefresh: false)
        }
        self.navigationController?.popViewController(animated: true)

    }

    //修改时获取题目

    func getQuestionnaireData(){

        let dict = ["activityId": self.activityId,
                    "questionnaireId":self.questionnaireId]
        XLBallLoading.show(in: self.view)
        Alamofire.request(appAPI.FaceTeach_getQuestionnaireData, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in

            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{

                    self.setSubQuestion(json: json)
                }else{
                    ZKProgressHUD.showError(json["msg"].stringValue);
                }
                XLBallLoading.hide(in: self.view)
            }else{
                ZKProgressHUD.showError("网络环境异常请稍后再试！");
                XLBallLoading.hide(in: self.view)
            }
        }


    }


    //渲染子题
    func setSubQuestion(json:JSON){
         self.text_title.text =  json["questionnaireTitle"].stringValue
        for i in 0..<json["questionList"].count{
            let qu = Questionnaire.init(id: json["questionList"][i]["Id"].stringValue, title: json["questionList"][i]["Title"].stringValue, type: json["questionList"][i]["QuestionType"].intValue, datajson: json["questionList"][i]["DataJson"].arrayObject as! [[String : Any]])
            self.list.append(qu)
        }
        self.tableView.reloadData()
    }

}
