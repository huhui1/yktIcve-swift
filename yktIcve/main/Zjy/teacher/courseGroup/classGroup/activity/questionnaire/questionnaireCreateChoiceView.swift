//
//  questionnaireCreateChoiceView.swift
//  云课堂-职教云
//
//  Created by cc on 2018/3/29.
//  Copyright © 2018年 zqy. All rights reserved.
//

import UIKit
import SwiftyJSON
import Alamofire

class questionnaireCreateChoiceView:UIViewController,UITableViewDataSource,UITableViewDelegate,UITextFieldDelegate,UITextViewDelegate {

    override func viewDidLoad() {
        super.viewDidLoad()
        self.title = "问卷调查"
        self.view.backgroundColor = UIColor.colorWithHex(hexColor: 0xedecf2)
        // Do any additional setup after loading the view.
        self.tableView.delegate = self;
        self.tableView.dataSource = self;
        self.text_title.delegate = self;
        if(self.tag == 1){
            self.btn_single.backgroundColor = UIColor.colorWithHex(hexColor: 0x11b480)
            self.btn_single.setTitleColor(UIColor.white, for: .normal)
        }else if(self.tag == 2){
            self.btn_double.backgroundColor = UIColor.colorWithHex(hexColor: 0x11b480)
            self.btn_double.setTitleColor(UIColor.white, for: .normal)
        }
        self.setUI()
        self.setbackitem()
     
        //监听键盘弹出通知
        NotificationCenter.default
            .addObserver(self,selector: #selector(keyboardWillShow(_:)),
                         name: NSNotification.Name.UIKeyboardWillShow, object: nil)
        //监听键盘隐藏通知
        NotificationCenter.default
            .addObserver(self,selector: #selector(keyboardWillHide(_:)),
                         name: NSNotification.Name.UIKeyboardWillHide, object: nil)
      
    }

    func setbackitem(){
        let item = UIBarButtonItem(title: "\u{e6f7}返回", style: .plain, target: self, action: #selector(self.back))
        self.navigationItem.leftBarButtonItem = item
        
        self.navigationItem.leftBarButtonItem?.setTitleTextAttributes([NSAttributedStringKey.font: UIFont(name: "iconfont", size: 18.0) as Any], for:.normal)
        self.navigationItem.leftBarButtonItem?.setTitleTextAttributes([NSAttributedStringKey.font: UIFont(name: "iconfont", size: 18.0) as Any], for:.selected)
    }
    @objc func back(){
        self.navigationController?.popViewController(animated: true)
    }
    // 键盘显示
    @objc func keyboardWillShow(_ notification: Notification) {
        let userInfo = (notification as NSNotification).userInfo!
        //键盘尺寸
        let keyboardSize = (userInfo[UIKeyboardFrameBeginUserInfoKey]
            as! NSValue).cgRectValue
        var contentInsets:UIEdgeInsets


        contentInsets = UIEdgeInsetsMake(64.0, 0.0, (keyboardSize.height), 0.0);

        //tableview的contentview的底部大小
        self.tableView.contentInset = contentInsets;
        self.tableView.scrollIndicatorInsets = contentInsets;

    }

    // 键盘隐藏
    @objc func keyboardWillHide(_ notification: Notification) {
        //还原tableview的contentview大小
        let contentInsets:UIEdgeInsets = UIEdgeInsetsMake(0.0, 0.0, 0, 0.0);
        self.tableView.contentInset = contentInsets
        self.tableView.scrollIndicatorInsets = contentInsets
    }

    //键盘隐藏
    override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {
       self.view.endEditing(true)
        
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 50
    }
    
    //返回表格行数
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.choiceOptional.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell:questionnaireOptionTableViewCell = tableView.dequeueReusableCell(withIdentifier: "SwiftCell") as! questionnaireOptionTableViewCell
        cell.lab_option.text = self.Option[indexPath.row]
        self.choiceOptional[indexPath.row]["SortOrder"] = indexPath.row
        cell.text_content.text = self.choiceOptional[indexPath.row]["Content"] as? String
        cell.text_content.tag = indexPath.row
        cell.text_content.delegate = self
        cell.btn_delete.tag = indexPath.row
        cell.btn_delete.addTarget(self, action: #selector(self.removeOpional(_ :)), for: .touchUpInside)
        return cell
    }
    //输入框内容改变
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
//        self.choiceOptional[textField.tag]["Content"] = textField.text! + string
       print("我zai编辑1...")
        return true
    }

    func textFieldDidEndEditing(_ textField: UITextField) {
        if(self.choiceOptional.count > textField.tag ){
             self.choiceOptional[textField.tag]["Content"] = textField.text!
        }

    }
    func textViewShouldBeginEditing(_ textView: UITextView) -> Bool {
        if (textView.text == "请输入内容"){
            textView.text = ""
        }
        textView.inputAccessoryView = toolBar;
        return true
    }

     func textFieldShouldBeginEditing(_ textField: UITextField) -> Bool {
        textField.inputAccessoryView = toolBar;

        return true
    }



    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        self.view.endEditing(true)
    }


    @objc func DoneClick(){

        self.view.endEditing(true)
    }


    override func viewDidDisappear(_ animated: Bool) {
       NotificationCenter.default.removeObserver(self)
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    func setUI(){
        self.toolBar = common.share.AddToolKeyboardDoneBar()
        let doneButton = UIBarButtonItem(title: "确定", style: .plain, target: self, action: #selector(self.DoneClick));
        let spaceButton = UIBarButtonItem(barButtonSystemItem: .flexibleSpace, target: nil, action: nil)
        toolBar.setItems([spaceButton,doneButton], animated: false);

        self.view.addSubview(text_title)
        self.text_title.snp.makeConstraints{ (make) in
            make.width.equalTo(width)
            make.height.equalTo(80)
            make.top.equalTo(10)
            make.left.equalTo(0)
        }
        
        self.view.addSubview(btn_single)
        self.btn_single.snp.makeConstraints{ (make) in
            make.width.equalTo(width / 2)
            make.height.equalTo(50)
            make.left.equalTo(0)
            make.top.equalTo(self.text_title.snp.bottom).offset(20)
        }

        self.view.addSubview(btn_double)
        self.btn_double.snp.makeConstraints{ (make) in
            make.width.equalTo(width / 2)
            make.height.equalTo(50)
            make.left.equalTo(self.btn_single.snp.right)
            make.top.equalTo(self.text_title.snp.bottom).offset(20)
        }

        self.tableView.frame = CGRect.init(x: 0, y: 170, width: width, height: height - 280)
        self.view.addSubview(self.tableView)

        self.btn_add.setAttributedTitle(shezhi(str: "\u{e63c}  点击添加选项" ,  colorStr: 0x46c40e), for: .normal)

        self.btn_add.frame = CGRect.init(x: 30, y: 0, width: width - 30, height: 35)

        if(self.choiceOptional.count < 10){

            self.tableView.tableFooterView = self.btn_add
        }

        //保存
        let HX = common.share.returnSafeAreaLineHeight()
        self.view.addSubview(self.btn_preserve)
        self.btn_preserve.snp.makeConstraints{ (make) in
            make.width.equalTo(width)
            make.height.equalTo(50)
            make.bottom.equalTo(self.view.snp.bottom).offset(HX)
            make.left.equalTo(0)
        }
    }




    //点击添加选项
    @objc func tappend(){

        let dict = ["SortOrder":self.choiceOptional.count,"Content":""] as [String : Any]
            self.choiceOptional.append(dict)
            self.tableView.reloadData()
        if(self.choiceOptional.count == self.Option.count){
            self.tableView.tableFooterView = UIView.init(frame: CGRect.zero)
        }
    }
    
    //删除选项
    @objc func removeOpional(_ btn :UIButton){
        self.choiceOptional.remove(at: btn.tag)
        self.tableView.reloadData()
        self.tableView.tableFooterView = self.btn_add
    }
    
    //题型转换
    @objc func click(_ btn:UIButton){
        if(btn.tag == 1){
            self.btn_single.backgroundColor = UIColor.colorWithHex(hexColor: 0x11b480)
            self.btn_single.setTitleColor(UIColor.white, for: .normal)
            self.btn_double.backgroundColor = UIColor.white
            self.btn_double.setTitleColor(UIColor.bg, for: .normal)
            self.tag = btn.tag
        }else if(btn.tag == 2){
            self.btn_double.backgroundColor = UIColor.colorWithHex(hexColor: 0x11b480)
            self.btn_double.setTitleColor(UIColor.white, for: .normal)
            self.btn_single.backgroundColor = UIColor.white
            self.btn_single.setTitleColor(UIColor.bg, for: .normal)
            self.tag = btn.tag
        }
    }
    //字体图标
    func  shezhi(str:String, colorStr:Int64) -> NSAttributedString{
        let attributeString = NSMutableAttributedString(string:str)
        
        attributeString.addAttribute(NSAttributedStringKey.foregroundColor, value: UIColor.colorWithHex(hexColor: colorStr), range: NSMakeRange(0,1))
        attributeString.addAttribute(NSAttributedStringKey.font, value: UIFont.init(name: "iconfont", size: 25)!, range: NSMakeRange(0,1))
        return attributeString
    }

    var toolBar = UIToolbar();

    //标题
    lazy var text_title : UITextView = {
        let text = UITextView()
        text.textColor = UIColor.black
        text.font = UIFont.italicSystemFont(ofSize: 18)
        text.backgroundColor = UIColor.white
        text.text = "请输入内容"
        return text
    }()

    //单选
    lazy var btn_single : UIButton = {
        let btn = UIButton()
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 15)
        btn.setTitleColor(UIColor.bg, for: .normal)
        btn.setTitle("单选", for: .normal)
        btn.backgroundColor = UIColor.white
        btn.tag = 1
        btn.addTarget(self, action: #selector(self.click(_:)), for: .touchUpInside)
        return btn
    }()

    //多选
    lazy var btn_double : UIButton = {
        let btn = UIButton()
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 15)
        btn.setTitleColor(UIColor.bg, for: .normal)
        btn.setTitle("多选", for: .normal)
        btn.backgroundColor = UIColor.white
        btn.tag = 2
        btn.addTarget(self, action: #selector(self.click(_:)), for: .touchUpInside)
        return btn
    }()
    //保存
    lazy var btn_preserve : UIButton = {
        let btn = UIButton()
        btn.titleLabel?.font = UIFont.init(name: "iconfont",size: 15)
        btn.setTitleColor(UIColor.white, for: .normal)
        btn.setTitle("保存", for: .normal)
        btn.backgroundColor = UIColor.bg
        btn.addTarget(self, action: #selector(self.addQuestionChoice), for: .touchUpInside)
        return btn
    }()
    //背景tableview
    lazy var tableView : UITableView = {
        let view = UITableView()
        view.tableFooterView = UIView(frame:CGRect.zero)//除去多余的cell
        view.separatorInset = UIEdgeInsets.zero;
        view.layoutMargins = UIEdgeInsets.zero;
        view.backgroundColor = UIColor.white
        view.register(questionnaireOptionTableViewCell.self, forCellReuseIdentifier: "SwiftCell");
        return view
    }()
    //添加题目
    lazy var btn_add : UIButton = {
      let btn = UIButton()
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 15)
        btn.setTitleColor(UIColor.black, for: .normal)
        btn.contentHorizontalAlignment = .left
        btn.backgroundColor = UIColor.white

        btn.addTarget(self, action: #selector(self.tappend), for: .touchUpInside)
        return btn
    }()

    lazy var tag : Int = {
        return 0
    }()

    let width = UIScreen.main.bounds.width

    let height = UIScreen.main.bounds.height

    var choiceOptional = [["SortOrder":0,"Content":""],["SortOrder":1,"Content":""],["SortOrder":2,"Content":""]]

    lazy var Option = ["A.","B.","C.","D.","E.","F.","G.","H.","I.","J."]
    lazy var Id : String = {return ""}()
    lazy var QuestionnaireId : String = {return ""}()
    lazy var ActivityId : String = {return ""}()
    lazy var QuestionType : String = {return ""}()
    lazy var questionTitle : String = {return ""}()
    lazy var SourceType : String = {return ""}()
    

    lazy var classState:Int = {return 0 }()
  
    var reloadquestionnaireChoiceListClosure :((_ questionnaire:Questionnaire,_ questionnaireId:String,_ id:String) ->Void)?

}


