//
//  face_VoteListView.swift
//  云课堂2
//
//  Created by 志辉教育 on 2018/7/19.
//  Copyright © 2018年 zqyou. All rights reserved.
//

import UIKit
import  SwiftyJSON
import Alamofire
import SCLAlertView

class edit_VoteListView: UIViewController {

    @IBOutlet weak var tabview: UITableView!

    override func viewDidLoad() {
        super.viewDidLoad()
        self.title = "新建投票"
        //监听键盘弹出通知
        NotificationCenter.default
            .addObserver(self,selector: #selector(keyboardWillShow(_:)),
                         name: NSNotification.Name.UIKeyboardWillShow, object: nil)
        //监听键盘隐藏通知
        NotificationCenter.default
            .addObserver(self,selector: #selector(keyboardWillHide(_:)),
                         name: NSNotification.Name.UIKeyboardWillHide, object: nil)

        self.voteModel = editVoteModel.init(voteType: 1)
        self.voteModel?.addObserver(self, forKeyPath: "voteType", options: [.new, .old], context: nil)
         let  m = UploadDocModel.init(data: JSON(), img:UIImage.init(named: "scancode_photo")!)
         m.isAdd = true
         self.voteModel?.itemList.append(m)

        if self.voteId.isEmpty{
            self.headView.setTittle()
        }else{
            self.getVoteInfo()
        }
        self.setTabview()
        let item = UIBarButtonItem(title: "\u{e6f7} 返回", style: .plain, target: self, action: #selector(self.backBtnClick))
        self.navigationItem.leftBarButtonItem = item
        common.share.setBackButtonItem(item: item)
    }

    init() {
        super.init(nibName: "edit_VoteListView", bundle: nil)
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    @objc func backBtnClick(){
        NotificationCenter.default.removeObserver(headView)
        self.navigationController?.popViewController(animated: true)
    }
   
    @IBAction func saveVote(_ sender: UIButton) {
        
        self.addFaceTeachVote(state: sender.tag)
    }

    @IBAction func doneVote(_ sender: UIButton) {
        self.addFaceTeachVote(state: sender.tag)
    }
    
    //添加监听后,使用完必须移除监听(一个add 对应一个 remove)
    deinit {
        self.voteModel?.removeObserver(self, forKeyPath: "voteType", context: nil)
    }

    override func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) {
        if keyPath == "voteType" {
            let type =  change![NSKeyValueChangeKey.newKey] as! Int
            if(type > 2){
                self.insertModel(isSwitch: true)
                self.tabview.reloadData()
            }else{
                self.voteModel?.optionsList.removeAll()
                self.tabview.reloadData()
            }

        }
    }

    // 键盘显示
    @objc func keyboardWillShow(_ notification: Notification) {
        let userInfo = (notification as NSNotification).userInfo!
        //键盘尺寸
        let keyboardSize = (userInfo[UIKeyboardFrameBeginUserInfoKey]
            as! NSValue).cgRectValue
        var contentInsets:UIEdgeInsets

        contentInsets = UIEdgeInsetsMake(64.0, 0.0, (keyboardSize.height + 20), 0.0);

        //tableview的contentview的底部大小
        self.tabview!.contentInset = contentInsets;
        self.tabview!.scrollIndicatorInsets = contentInsets;
    }

    // 键盘隐藏
    @objc func keyboardWillHide(_ notification: Notification) {
        //还原tableview的contentview大小
        let contentInsets:UIEdgeInsets = UIEdgeInsetsMake(0.0, 0.0, 0, 0.0);
        self.tabview!.contentInset = contentInsets
        self.tabview!.scrollIndicatorInsets = contentInsets
    }
    
    var toolBar = UIToolbar();
    lazy var headView :edit_VoteListTopView = {
        let v = edit_VoteListTopView.init(frame:  CGRect.init(x: 0, y: 0, width: UIScreen.main.bounds.width, height: 450))
        return v
    }()


    var voteModel :editVoteModel?
     var voteOptions = ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"]
    var reload :(() ->Void)?
    lazy var courseOpenId: String = ""
    lazy var openClassIds: String = ""
    lazy var activityId: String = ""
    lazy var voteId: String = ""
    lazy var classState: Int = 0
  
}


extension  edit_VoteListView:UITableViewDelegate,UITableViewDataSource,UITextFieldDelegate{
    func setTabview(){

        self.tabview.register(UINib.init(nibName: "edit_VoteListCell", bundle:nil ), forCellReuseIdentifier:"edit_VoteListCell")

        self.tabview.delegate = self
        self.tabview.dataSource = self
        if #available(iOS 9.0, *) {
            tabview.cellLayoutMarginsFollowReadableWidth = false
        }
        self.tabview.tableHeaderView = self.headView
        self.tabview.tableFooterView = UIView.init()
        self.tabview.setEditing(true, animated:true) //打开编辑模式
        self.headView.voteModel = self.voteModel

    }
    override open func touchesEnded(_ touches:Set<UITouch>, with event:UIEvent?) {
        
            view.endEditing(true)
       
    }
    func textFieldDidEndEditing(_ textField: UITextField) {
         self.voteModel?.optionsList[textField.tag].content = textField.text!
    }
    //是否有删除功能
    func tableView(_ tableView: UITableView, editingStyleForRowAt indexPath: IndexPath)
        -> UITableViewCellEditingStyle
    {
        let m =  self.voteModel?.optionsList[indexPath.row]
        if(m?.isAdd)!{
            return UITableViewCellEditingStyle.insert
        }else{
            return UITableViewCellEditingStyle.delete
        }
    }

    //删除
    func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCellEditingStyle, forRowAt indexPath: IndexPath) {
      
        if editingStyle == UITableViewCellEditingStyle.delete {
            for cell in self.tabview.visibleCells{
                let text = cell.contentView.subviews[1] as! UITextField
                text.resignFirstResponder()
            }
            if( (self.voteModel?.optionsList.count)! == 2){
                ZKProgressHUD.showMessage("至少要设置两个选项")
                return
            }
           self.voteModel?.optionsList.remove(at: indexPath.row)
           self.voteModel?.optionsList.last?.isAdd = true
           self.tabview.reloadData()
        }else if editingStyle == UITableViewCellEditingStyle.insert{
            self.voteModel?.optionsList.last?.isAdd = false
            self.insertModel(isSwitch: false)
            self.tabview.reloadData()
        }
    }

    //删除提示
    func tableView(_ tableView: UITableView,
                   titleForDeleteConfirmationButtonForRowAt indexPath: IndexPath)
        -> String? {
            return "确定删除？"
    }

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {

        return (self.voteModel?.optionsList.count)!
    }
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 40
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let m = self.voteModel?.optionsList[indexPath.row]
        let Identifier = "edit_VoteListCell"
        let cell = self.tabview.dequeueReusableCell(withIdentifier: Identifier, for: indexPath) as! edit_VoteListCell
        cell.contentText.tag = indexPath.row
        cell.contentText.delegate = self
        cell.tag = indexPath.row
        cell.setData(model: m!, index: indexPath.row)
        return cell
    }

}

