//
//  edit_VoteListTopView.swift
//  云课堂2
//
//  Created by 尤增强 on 2018/7/24.
//  Copyright © 2018年 zqyou. All rights reserved.
//

import UIKit
import SwiftyJSON
import Alamofire
class edit_VoteListTopView: UIView,UITextViewDelegate,UITextFieldDelegate{
    @IBOutlet var lab_Iconfont4: UILabel!
    @IBOutlet var lab_Iconfont3: UILabel!
    @IBOutlet var lab_Iconfont2: UILabel!
    @IBOutlet var lab_Iconfont1: UILabel!
    @IBOutlet var voteText: UITextView!
    @IBOutlet var btn_multiselect: UIButton!//多选
    @IBOutlet var btn_Theradio: UIButton!//单选
    @IBOutlet var btn_against: UIButton!
    @IBOutlet var btn_approve: UIButton!
    @IBOutlet var collectionView: UICollectionView!
    @IBOutlet var placeholderLable: UILabel!

    @IBOutlet weak var text_title: UITextField!
    var toolBar = UIToolbar();
    var voteModel :editVoteModel?
    lazy var uploadUrl : String = ""
    var isPush = false
    override init(frame: CGRect) {
        super.init(frame: frame)
        awakeFromNib()
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    override func awakeFromNib() {
        super.awakeFromNib()
        let subView : UIView = Bundle.main.loadNibNamed("edit_VoteListTopView", owner: self, options: nil)?.first as! UIView
      
        subView.frame = self.frame
        self.addSubview(subView)
        
        
        NotificationCenter.default.addObserver(self, selector: #selector(textViewEditChanged(sender:)), name: NSNotification.Name.UITextViewTextDidChange, object: nil);
        //键盘
        toolBar = common.share.AddToolKeyboardDoneBar()
        let doneButton = UIBarButtonItem(title: "确定", style: .plain, target: self, action: #selector(self.DoneClick));
        let spaceButton = UIBarButtonItem(barButtonSystemItem: .flexibleSpace, target: nil, action: nil)
        toolBar.setItems([spaceButton,doneButton], animated: false);

    }
    
    @objc func DoneClick(){
        self.endEditing(true)
    }
    @IBAction func action_chooseVoteType(_ sender: UIButton) {
        let tag = sender.tag
        switch tag {
        case 1:
            self.lab_Iconfont1.isHidden = false
            self.lab_Iconfont2.isHidden = true
            self.lab_Iconfont3.isHidden = true
            self.lab_Iconfont4.isHidden = true
            self.voteModel?.voteType = 1
        case 2:
            self.lab_Iconfont2.isHidden = false
            self.lab_Iconfont1.isHidden = true
            self.lab_Iconfont3.isHidden = true
            self.lab_Iconfont4.isHidden = true
            self.voteModel?.voteType  = 2
        case 3:
            self.lab_Iconfont3.isHidden = false
            self.lab_Iconfont1.isHidden = true
            self.lab_Iconfont2.isHidden = true
            self.lab_Iconfont4.isHidden = true
            self.voteModel?.voteType  = 3

        case 4:
            self.lab_Iconfont4.isHidden = false
            self.lab_Iconfont1.isHidden = true
            self.lab_Iconfont3.isHidden = true
            self.lab_Iconfont2.isHidden = true
            self.voteModel?.voteType  = 4
        default:
            print("暂无")
        }
        
    }

    override func layoutSubviews() {
        self.voteText.textContainerInset = UIEdgeInsets(top: 5, left: 5, bottom: 5, right: 5)
        self.text_title.delegate = self
        self.voteText.delegate = self
        self.lab_Iconfont1.font = UIFont.init(name: "iconfont", size: 20);
        self.lab_Iconfont2.font = UIFont.init(name: "iconfont", size: 20);
        self.lab_Iconfont3.font = UIFont.init(name: "iconfont", size: 20);
        self.lab_Iconfont4.font = UIFont.init(name: "iconfont", size: 20);

        self.lab_Iconfont1.text = "\u{e605}"
        self.lab_Iconfont2.text = "\u{e605}"
        self.lab_Iconfont3.text = "\u{e605}"
        self.lab_Iconfont4.text = "\u{e605}"
    }
  
    func textViewShouldBeginEditing(_ textView: UITextView) -> Bool {
        textView.inputAccessoryView = toolBar;
        return true
    }
    
    func textViewDidChange(_ textView: UITextView) {
        if textView.text.isEmpty{
            self.placeholderLable.isHidden = false
        }else{
            self.placeholderLable.isHidden = true
        }
    }
   
    /// 字数限制
    @objc func textViewEditChanged(sender:NSNotification) {
        let textVStr = voteText.text as NSString
        if (textVStr.length >= 200) {
            let str = textVStr.substring(to: 200)
            voteText.text = str
            ZKProgressHUD.showMessage("最多输入200字")
        }
    }
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        if range.location >= 30{
            ZKProgressHUD.showMessage("最多输入30字")
            return false
        }
        return true
    }
    func setTittle(){
        // Do any additional setup after loading the view.
        // 创建一个日期格式器
        let now = Date()
        let dformatter = DateFormatter()
        dformatter.dateFormat = "yyyy-MM-dd HH:mm"
        print("当前日期时间：\(dformatter.string(from: now))")
        self.text_title.text = "\(dformatter.string(from: now))的投票"
        //默认选择正确错误
        self.lab_Iconfont1.isHidden = false
        self.setCollection()
        
    }
    
    func setTittle(json:JSON){
        self.text_title.text = json["voteInfo"]["title"].stringValue
        self.voteText.text = json["voteInfo"]["voteContent"].stringValue
        self.placeholderLable.isHidden = true
        self.voteModel?.optionsList.removeAll()
        for i in JSON.init(parseJSON: json["voteInfo"]["dataJson"].stringValue){
            let m = voteOptionsModel.init(content: i.1["content"].stringValue, isAdd: false)
            self.voteModel?.optionsList.append(m)
        }
        self.voteModel?.optionsList.last?.isAdd = true
        self.voteModel?.voteType = json["voteInfo"]["voteType"].intValue
        switch (self.voteModel?.voteType)! {
        case 1:
            self.lab_Iconfont1.isHidden = false
            self.lab_Iconfont2.isHidden = true
            self.lab_Iconfont3.isHidden = true
            self.lab_Iconfont4.isHidden = true
        
        case 2:
            self.lab_Iconfont2.isHidden = false
            self.lab_Iconfont1.isHidden = true
            self.lab_Iconfont3.isHidden = true
            self.lab_Iconfont4.isHidden = true

        case 3:
            if json["voteInfo"]["selectType"].intValue == 1
            {
                self.lab_Iconfont3.isHidden = false
                self.lab_Iconfont1.isHidden = true
                self.lab_Iconfont2.isHidden = true
                self.lab_Iconfont4.isHidden = true

            }else if json["voteInfo"]["selectType"].intValue == 2{
                self.lab_Iconfont4.isHidden = false
                self.lab_Iconfont1.isHidden = true
                self.lab_Iconfont3.isHidden = true
                self.lab_Iconfont2.isHidden = true

            }
        default:
            print("错误类型")
        }
        self.setCollectionData(json: json)
    }
    //设置collectionView图片
    func setCollectionData(json:JSON){
        for i in json["voteInfo"]["docJson"]{
            let m = UploadDocModel.init(i: i.1)
            self.voteModel?.itemList.append(m)
        }
        if((self.voteModel?.itemList.count)! > 9){
            self.voteModel?.itemList.removeFirst()
        }
        self.setCollection()
    }
}
extension edit_VoteListTopView:UICollectionViewDelegate,UICollectionViewDataSource{
    
    func setCollection(){
        self.collectionView.register(UINib.init(nibName: "itemImgCell", bundle: Bundle.main), forCellWithReuseIdentifier: "itemImgCell")
        self.collectionView.register(UINib.init(nibName: "ZQUICollectionViewCell_Img", bundle: Bundle.main), forCellWithReuseIdentifier: "ZQUICollectionViewCell_Img")
        self.collectionView.delegate = self
        self.collectionView.dataSource = self
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return  (self.voteModel?.itemList.count)!
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let j  =   self.voteModel?.itemList[indexPath.row]
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "ZQUICollectionViewCell_Img",for: indexPath) as! ZQUICollectionViewCell_Img
        cell.CellBlock = {  () -> Void in
            self.uploadImg()
        }
        cell.setModelByHomeworkFile(Model: j!)
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        let m = (self.voteModel?.itemList[indexPath.row])!
        let vc = uploadImgPreviewView()
        if(m.img.size != CGSize.zero){
            vc.img = m.img
        }else{
            vc.imgurl = m.url
        }
        vc.reloadImglistClosure = {(index) in

            self.voteModel?.itemList.remove(at: indexPath.row)
            self.collectionView.deleteItems(at: [indexPath])
        }
        vc.modalTransitionStyle = .crossDissolve

        NavigatorService.modelToPage(vc, animated: true, completion: {})

    }
}




extension edit_VoteListTopView:UIImagePickerControllerDelegate,UINavigationControllerDelegate {

    //底部弹窗
    func uploadImg(){
        //判断是否开启打开相册权限
        if(!common.share.isAuthorizePhotos()){
            common.share.authorizePhotos()
        }else{
            self.upload()
        }
    }
    //底部弹窗
    func upload(){

        if( self.uploadUrl.isEmpty){
            common.share.getUploadUrl();
        }
        let userIconAlert = UIAlertController(title: "请选择操作", message: "", preferredStyle: UIAlertControllerStyle.actionSheet)

        let chooseFromPhotoAlbum = UIAlertAction(title: "从相册选择", style: UIAlertActionStyle.default, handler: funcChooseFromPhotoAlbum)
        userIconAlert.addAction(chooseFromPhotoAlbum)


        let chooseFromCamera = UIAlertAction(title: "拍照", style: UIAlertActionStyle.default,handler:funcChooseFromCamera)
        userIconAlert.addAction(chooseFromCamera)

        let canelAction = UIAlertAction(title: "取消", style: UIAlertActionStyle.cancel,handler: nil)
        userIconAlert.addAction(canelAction)

        if(UIDevice.current.model == "iPad")
        {
            let mine = UIView.init(frame: CGRect(x:UIScreen.main.bounds.width/2,y:UIScreen.main.bounds.height,width:20,height:20))
            self.addSubview(mine)
            let popPresenter =  userIconAlert.popoverPresentationController

            popPresenter?.sourceView = mine
            popPresenter?.sourceRect = mine.bounds
        }
      
        NavigatorService.modelToPage(userIconAlert, animated: true, completion: {})

      
        
    }
    //从相册选择照片
    func funcChooseFromPhotoAlbum(_ avc:UIAlertAction) -> Void{
        let masterVC = HsuAlbumMasterTableViewController()
        let navi = UINavigationController(rootViewController: masterVC)
        masterVC.title = "图片"
        let gridVC = HsuAssetGridViewController()
        gridVC.title = "所有图片"
        let leftBarBtn = UIBarButtonItem(title: "", style: .plain, target: self,
                                         action:nil)
        gridVC.navigationItem.leftBarButtonItem = leftBarBtn
        navi.pushViewController(gridVC, animated: false)

        UIDevice.current.setValue(UIInterfaceOrientation.landscapeLeft.rawValue, forKey: "orientation")
        NavigatorService.modelToPage(navi, animated: true, completion: {})

        HandleSelectionPhotosManager.share.getSelectedPhotos(with: 1) { (assets, images) in

            self.upload(img: images[0])
        }

    }
    func funcChooseFromCamera(_ avc:UIAlertAction) -> Void{
        if UIImagePickerController.isSourceTypeAvailable(UIImagePickerControllerSourceType.camera) {
            let imagePicker = UIImagePickerController()

            //设置代理
            imagePicker.delegate = self as UIImagePickerControllerDelegate & UINavigationControllerDelegate
            //            imagePicker.delegate = self
            //允许编辑
            imagePicker.isEditing = false;
            //设置图片源
            imagePicker.sourceType = UIImagePickerControllerSourceType.camera
            //模态弹出IamgePickerView
             NavigatorService.modelToPage(imagePicker, animated: true, completion: {})

        //    self.present(imagePicker, animated: true, completion: nil)

        }else{
            print("模拟器不支持拍照功能")
        }
    }
    func imagePickerControllerDidCancel(_ picker: UIImagePickerController){
        picker.dismiss(animated: true, completion: nil)
    }

    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : Any]) {
        //获取照片的原图
        if let image :UIImage = (info as NSDictionary).object(forKey: UIImagePickerControllerOriginalImage)as?UIImage{
            //获得编辑后的图片
            //let image = (info as NSDictionary).object(forKey: UIImagePickerControllerEditedImage)as!UIImage
            self.upload(img: image);
        }
        picker.dismiss(animated: true, completion: nil)
    }

    //上传
    func upload(img:UIImage)
    {
         self.uploadUrl = appAPI.uploadUrl;

        let fileManager = FileManager.default
        let rootPath = NSSearchPathForDirectoriesInDomains(.documentDirectory,
                                                           .userDomainMask, true)[0] as String
        let date = NSDate(),
        timeInterval = date.timeIntervalSince1970 * 1000
        let filePath = "\(rootPath)/" + String(timeInterval) + ".jpg"

        let  imageData =  common.share.resetImgSize(sourceImage: img, maxImageLenght: 0, maxSizeKB: 200)

        

        fileManager.createFile(atPath: filePath, contents: imageData, attributes: nil)
        let imageNSURL = URL.init(fileURLWithPath: filePath)
        ZKProgressHUD.show("0 %")
        Alamofire.upload(multipartFormData: { multipartFormData in
            multipartFormData.append(imageNSURL, withName: "file1")
        },to: self.uploadUrl,encodingCompletion: { encodingResult in
            switch encodingResult {
            case .success(let upload, _, _):
                upload.responseJSON { response in
                    let result = JSON(response.result.value ?? "");
                    self.setModelToList(result: result, img:img,  docTitle: "\(timeInterval).jpg")
                    ZKProgressHUD.hide(delay: 0)
                    }.uploadProgress { progress in // main queue by default
                        // print("当前进度: \(progress.fractionCompleted)")
                        ZKProgressHUD.show("\(String(format: "%.1f", progress.fractionCompleted * 100)) %")
                }
            case .failure(let encodingError):
                print(encodingError)
            }
        })
    }

    //model加入数组
    func setModelToList(result:JSON,img:UIImage,docTitle:String){

        let m = UploadDocModel.init(data: result,type:"jpg",img: img, docTitle:docTitle)
        self.voteModel?.itemList.append(m)
        if (self.voteModel?.itemList.count)! > 9{
            self.voteModel?.itemList.removeFirst()
        }
        self.collectionView.reloadData()

    }
}

