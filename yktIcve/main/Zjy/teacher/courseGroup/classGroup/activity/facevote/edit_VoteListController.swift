//
//  face_VoteListController.swift
//  云课堂2
//
//  Created by 志辉教育 on 2018/7/19.
//  Copyright © 2018年 zqyou. All rights reserved.
//

import UIKit
import SwiftyJSON
import Alamofire
import SCLAlertView
extension edit_VoteListView{

    /// 保存开始投票
    func addFaceTeachVote(state :Int){

        var DocJson = [Dictionary<String,String>]()
        self.tabview.reloadData()
        if self.headView.text_title.text!.isEmpty{
            ZKProgressHUD.showMessage("请输入标题!")
        }

        var SelectType = 0
        if(self.voteModel?.voteType == 3){
            SelectType = 1
        }else if (self.voteModel?.voteType == 4){
            SelectType = 2
        }


        for i in (self.voteModel?.itemList)!.filter({!$0.isAdd}) {
            let dict = ["docTitle":i.docTitle,"docUrl":i.docUrl]
            DocJson.append(dict)
        }


        let data = ["Id":self.voteId,
                    "ActivityId":self.activityId,
                    "CreatorId":Account.defaultAccount.id!,
                    "CreatorName":Account.defaultAccount.displayName!,
                    "Title":self.headView.text_title.text!,
                    "VoteContent":self.headView.voteText.text!,
                    "DocJson":JSON.init(DocJson).debugDescription,
                    "VoteType":self.voteModel?.voteType ?? 1,
                    "SelectType":SelectType,
                    "State":state,
                    "ClassState":self.classState,
                    "SourceType":3] as [String : Any]

        var dataJson = [NSDictionary]()

        var arr = [String]()

        for i in 0..<(self.voteModel?.optionsList.count)! {
          
            let Identifier = "edit_VoteListCell"

            let indexPath =  NSIndexPath.init(item: i, section: 0) as IndexPath
            let cell = self.tabview.dequeueReusableCell(withIdentifier: Identifier, for: indexPath) as! edit_VoteListCell
            if !(cell.contentText.text!.isEmpty){
                arr.append(cell.contentText.text!)
            }
        }


        //单选，或者多选
        if SelectType == 2 || SelectType == 1{
                if arr.count < 2{
                    ZKProgressHUD.showMessage("请至少输入两个选项！")
                    return
                }else{
                    for (i, v)  in arr.enumerated() {
                        let dict = ["sortOrder":self.voteOptions[i],
                                    "content":v]
                        dataJson.append(dict as NSDictionary)
                    }
                }
           }else{//正确，错误
            if (self.voteModel?.voteType)! == 1{
                    dataJson = [["sortOrder":"正确","content":""],["sortOrder":"错误","content":""]]
                }else if (self.voteModel?.voteType)! == 2{
                    dataJson = [["sortOrder":"赞成","content":""],["sortOrder":"反对","content":""]]
                }
            }

        XLBallLoading.show(in: self.view)
        let dict = ["data":JSON.init(data).description,
                    "dataJson":JSON.init(dataJson).description]
        Alamofire.request(appAPI.FaceTeach_addFaceTeachVote, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let json = JSON(value)
                if(json["code"]==1){
                    // 向学生发送个推消息
                    if(state == 2){
                        self.pushVotemessage(json:json)
                    }
                    ZKProgressHUD.showMessage(json["msg"].stringValue)
                    self.reload!()
                    NotificationCenter.default.removeObserver(self.headView)
                    self.navigationController?.popViewController(animated: true)
                }else{
                    ZKProgressHUD.showError(json["msg"].stringValue);
                }
                XLBallLoading.hide(in: self.view)
            }else{
                ZKProgressHUD.showError("网络环境异常请稍后再试！");
                XLBallLoading.hide(in: self.view)
            }
        }
    }


    /// 添加
    func insertModel(isSwitch:Bool){

        switch (self.voteModel?.optionsList.count)! {
        case 0:
            let m1 = voteOptionsModel.init( content: "", isAdd:  false)
            let m2 = voteOptionsModel.init( content: "", isAdd:  true)
            self.voteModel?.optionsList.append(m1)
            self.voteModel?.optionsList.append(m2)
        case 10:
            ZKProgressHUD.showMessage("最多能加入十项")
            return
        default:
            if !isSwitch {
                let m = voteOptionsModel.init( content: "", isAdd:  true)
                self.voteModel?.optionsList.append(m)
            }
        }
    }
    
    /// 获取投票信息
    func getVoteInfo(){
        let dict = ["activityId": activityId,
                    "courseOpenId":self.courseOpenId,
                    "schoolId":Account.defaultAccount.schoolId!,
                    "voteId":self.voteId]
        XLBallLoading.show(in: self.view)
        Alamofire.request(appAPI.Faceteach_getVoteData, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{
                    self.headView.setTittle(json: json)
                }else{
                    ZKProgressHUD.showError(json["msg"].stringValue);
                }
                XLBallLoading.hide(in: self.view)
            }else{
                ZKProgressHUD.showError("网络环境异常请稍后再试！");
                XLBallLoading.hide(in: self.view)
            }
        }
        
    }
    
    //发送个推
    func pushVotemessage(json:JSON){
        let dict = ["actionType":"voting",
                    "title":json["voteInfo"]["title"].stringValue,
                    "voteType":json["voteInfo"]["state"].stringValue,
                    "actId":json["voteInfo"]["voteId"].stringValue,
                    "creatorId":Account.defaultAccount.id!,
                    "faceId":self.activityId,
                    "openClassIds":self.openClassIds,
                    "courseOpenId":self.courseOpenId] as [String : Any];
        geTuiSendController.share.sendGTMSG(str: JSON.init(dict).description, userId: Account.defaultAccount.id!, openClassIds: self.openClassIds)
    }


}

