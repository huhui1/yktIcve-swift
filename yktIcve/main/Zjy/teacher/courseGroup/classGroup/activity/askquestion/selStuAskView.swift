//
//  selStuAskView.swift
//  66iclasscloud
//
//  Created by 尤增强 on 2018/1/19.
//  Copyright © 2018年 zqy. All rights reserved.
//

import UIKit
import SwiftyJSON

class selStuAskView: UIViewController,UISearchBarDelegate,
UITableViewDataSource,UITableViewDelegate{

    let topview = askTableTopView()

    override func viewDidLoad() {
        super.viewDidLoad()
        self.setTopUI()
       self.refreshItemData(isRefresh: true)
     
        // Do any additional setup after loading the view.
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    func setTopUI(){
        //键盘
        toolBar = common.share.AddToolKeyboardDoneBar()
        let doneButton = UIBarButtonItem(title: "确定", style: .plain, target: self, action: #selector(self.DoneClick));
        let spaceButton = UIBarButtonItem(barButtonSystemItem: .flexibleSpace, target: nil, action: nil)
        toolBar.setItems([spaceButton,doneButton], animated: false);
        
        self.view.backgroundColor = UIColor.colorWithHex(hexColor: 0xf2f2f2)
        self.view.addSubview(sreachBer)
        self.sreachBer.snp.makeConstraints { (make) in
            make.width.equalTo(UIScreen.main.bounds.width)
            make.height.equalTo(40)
            make.centerX.equalTo(self.view.snp.centerX)
            make.top.equalTo(1)
        }

         self.sreachBer.delegate = self
      //  footview.frame.size = CGSize.init(width: self.view.bounds.width, height: 45)
        let HX = common.share.returnSafeAreaLineHeight()
        self.view.addSubview(checkBtn)
        checkBtn.snp.makeConstraints { (make) in
            make.width.equalTo(width / 2)
            make.height.equalTo(50)
            make.left.equalTo(0)
            make.bottom.equalTo(self.view.snp.bottom).offset(HX)
        }
        self.view.addSubview(submitBtn)
        submitBtn.snp.makeConstraints { (make) in
            make.width.equalTo(width / 2)
            make.height.equalTo(checkBtn.snp.height)
            make.centerY.equalTo(checkBtn.snp.centerY)
            make.left.equalTo(checkBtn.snp.right)
        }

        self.checkBtn.addSubview(btnIcon)


        btnIcon.snp.makeConstraints { (make) in
            make.width.height.equalTo(26)
            make.centerX.equalTo(checkBtn.snp.centerX).offset(-40)
            make.centerY.equalTo(checkBtn.snp.centerY)
        }
        self.btnIcon.layer.masksToBounds = true
        self.btnIcon.layer.cornerRadius = 13


        self.btnIcon.addTarget(self, action: #selector(self.checkAll(_:)), for: .touchUpInside)
        self.checkBtn.addTarget(self, action: #selector(self.checkAll(_:)), for: .touchUpInside)
        self.submitBtn.addTarget(self, action: #selector(self.submit(_:)), for: .touchUpInside)


    }

    func  fetchCoverDetails(isRefresh:Bool){
        self.covers.removeAll()
        self.selStuInfos.removeAll()
        self.reservedInfo.removeAll()
        self.sreachBer.text = ""
        self.btnIcon.isSelected = false
        self.btnIcon.backgroundColor = UIColor.white
        for i in 0..<self.list.count {
            let stuinfo = JSON(self.list[i])
            let url = URL(string:stuinfo["Avator"].stringValue)
            if url != nil {
                let movieRecord = CoverRecord(name:"", url:url!)
                self.covers.append(movieRecord)
            }
            let selstu =  selStuInfo.init(Id: stuinfo["Id"].stringValue,
                                          Name:stuinfo["Name"].stringValue ,
                                          StuNo: stuinfo["StuNo"].stringValue,
                                          joinAskCount: stuinfo["joinAskCount"].intValue,
                                          joinAskScore: stuinfo["joinAskScore"].intValue,
                                          Avator: stuinfo["Avator"].stringValue,isCheck: false)
            selStuInfos.append(selstu)
        }
        self.reservedInfo = self.selStuInfos
        if(!isRefresh){
            //结束刷新
            //重现加载表格数据
            self.tableView.mj_header.endRefreshing();
            self.tableView.reloadData();
        }else{
            self.setTableView()
        }

    }

    func  setTableView(){

        //创建表视图
        self.tableView.frame =  CGRect(x:0, y:40, width:self.view.bounds.width, height:self.view.bounds.height - 90)
        if common.share.isX(){
            self.tableView.frame =  CGRect(x:0, y:40, width:self.view.bounds.width, height:self.view.bounds.height - 110)
        }
        self.tableView.delegate = self;
        self.tableView.dataSource = self;
        //创建一个重用的单元格
        self.tableView.register(askSelStuCell.self, forCellReuseIdentifier: "SwiftCell");

        self.tableView.tableFooterView = UIView(frame:CGRect.zero)//除去多余的cell

        if #available(iOS 9.0, *) {
            self.tableView.cellLayoutMarginsFollowReadableWidth = false
        } else {

        }

        //表格在编辑状态下允许多选
        self.tableView.allowsMultipleSelectionDuringEditing = true

        self.tableView.setEditing(true, animated:true)

        topview.frame.size = CGSize.init(width: self.view.bounds.width, height: 50)
        topview.btn_stuNO.addTarget(self, action: #selector(self.orderBytype(_:)), for: .touchUpInside)
        topview.btn_attend.addTarget(self, action: #selector(self.orderBytype(_:)), for: .touchUpInside)
        topview.btn_score.addTarget(self, action: #selector(self.orderBytype(_:)), for: .touchUpInside)
        self.tableView.tableHeaderView = topview

        //rowHeight属性设置为UITableViewAutomaticDimension
        self.tableView.rowHeight = UITableViewAutomaticDimension;

        //下拉刷新相关设置,使用闭包Block
        self.tableView.mj_header = MJRefreshNormalHeader(refreshingBlock: {
            //重现生成数据
            self.refreshItemData(isRefresh:false);

        })

        self.view.addSubview(self.tableView);

    }

    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }

    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat
    {
        return 50;
    }

    //返回表格行数（也就是返回控件数）
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {

        return self.selStuInfos.count;

    }

    //创建各单元显示内容(创建参数indexPath指定的单元）
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath)
        -> UITableViewCell {

            let stuinfo = selStuInfos[indexPath.row]
            //为了提供表格显示性能，已创建完成的单元需重复使用
            let identify:String = "SwiftCell"
            //同一形式的单元格重复使用，在声明时已注册
            let cell = tableView.dequeueReusableCell(withIdentifier: identify,
                                                     for: indexPath) as! askSelStuCell

            cell.lab_Name.text = stuinfo.Name
           
            cell.lab_num.text = stuinfo.StuNo
            cell.lab_attend.text = String(stuinfo.joinAskCount)
            cell.lab_score.text = String(stuinfo.joinAskScore)
            common.share.setSDImg(str: stuinfo.Avator, imgview: cell.imgView_avatar)

            if(stuinfo.isCheck){
                self.tableView.selectRow(at: indexPath , animated: true, scrollPosition: UITableViewScrollPosition.top)
            }else{
                self.tableView.deselectRow(at :indexPath, animated: true)
            }


            return cell
    }



    //点击
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {

       // tableView .deselectRow(at: indexPath, animated: true)

    }

    // 搜索代理UISearchBarDelegate方法，每次改变搜索内容时都会调用
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        print(searchText)
        // 没有搜索内容时显示全部组件
        if searchText == "" {
            self.selStuInfos = self.reservedInfo
        }
        else { // 匹配用户输入内容(不区分大小写)
            self.selStuInfos = []
            for stu in self.reservedInfo {
                if stu.Name.lowercased().contains(searchText.lowercased()) ||
                   stu.StuNo.contains(searchText){
                    self.selStuInfos.append(stu)
                }
            }
        }
        // 刷新Table View显示
        self.tableView.reloadData()
    }
    //键盘
    func searchBarShouldBeginEditing(_ searchBar: UISearchBar) -> Bool {
        searchBar.inputAccessoryView = toolBar;
        return true
    }
    @objc func DoneClick(){
        self.view.endEditing(true)
    }

    /*
    // MARK: - Navigation

    // In a storyboard-based application, you will often want to do a little preparation before navigation
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        // Get the new view controller using segue.destinationViewController.
        // Pass the selected object to the new view controller.
    }
    */


    lazy  var checkBtn : UIButton = {
        let btn = UIButton()
        btn.contentMode = .center
        btn.setTitleColor(UIColor.gray, for: .normal)
        btn.setTitleColor(UIColor.colorWithHex(hexColor: 0x23c397), for: .selected)
        btn.setTitle("全选", for: .normal)
        btn.tag = 1
        btn.backgroundColor = UIColor.white
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 16)
        return btn ;

    }()

    lazy  var submitBtn : UIButton = {
        let btn = UIButton()
        btn.contentMode = .center
        btn.setTitleColor(UIColor.white, for: .normal)
        btn.backgroundColor = UIColor.colorWithHex(hexColor: 0x23c397)
        btn.setTitle("确定", for: .normal)
        btn.tag = 2
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 16)

        return btn ;

    }()

    lazy var btnIcon : UIButton = {
        let btn = UIButton()
        btn.setTitle("\u{e69d}", for: .normal)
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 26)
        btn.setTitle("\u{e669}", for: .selected)
        btn.setTitleColor(UIColor.colorWithHex(hexColor: 0xf3f3f3), for: .normal)
        btn.setTitleColor(UIColor.white, for: .selected)
        return btn
    }()


    lazy var courseOpenId :String = {return ""}()
    lazy var openClassIds :String = {return ""}()
    lazy var activityId: String = {return ""}()
    lazy var orderColumn: String = {return ""}()
    lazy var isAsc: String = {return ""}()
    lazy var stu: String = {return ""}()
    lazy var askId: String = {return ""}()
    lazy var askType: Int = {return 1}()
    lazy var sreachBer :UISearchBar  = {
        let searech = UISearchBar()
        searech.tintColor = UIColor.bg
        // 去除背景及上下两条横线
       // searech.setBackgroundImage(UIImage(), for: .any, barMetrics: .default)
        searech.placeholder = "输入姓名搜索"
        return searech
    }()
    var toolBar = UIToolbar();
    lazy var tableView :UITableView = {
        let table = UITableView()

        return table
    }()

    lazy var list :NSArray = {
        return []
    }()
    lazy var stuIdList :Array = {
        return []
    }()
    //source == 1 代表从打分页面进入
    lazy var source : Int = {
        return 0
    }()
    var selStuInfos = [selStuInfo]()
    var reservedInfo = [selStuInfo]()
    var covers = [CoverRecord]()
    let coverOperations = CoverOperations()
    let width = UIScreen.main.bounds.width;

}

struct  selStuInfo {

    let Id:String
    let Name:String
    let StuNo:String
    let joinAskCount:Int
    let joinAskScore:Int
    let Avator:String
    var isCheck:Bool

}
