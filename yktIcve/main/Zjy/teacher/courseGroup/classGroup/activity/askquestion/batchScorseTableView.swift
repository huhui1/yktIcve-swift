//
//  batchScorseTableView.swift
//  66iclasscloud
//
//  Created by 尤增强 on 2018/1/19.
//  Copyright © 2018年 zqy. All rights reserved.
//

import UIKit
import Alamofire
import SwiftyJSON

class batchScorseTableView:UIViewController, UITableViewDelegate,UITableViewDataSource {

   
    var list:NSArray = [];
    var tableView:UITableView!
    override func viewDidLoad() {
        super.viewDidLoad()
        self.view.backgroundColor = UIColor.white
        self.addEventListener()
        self.setTableviewUI()
        self.setFootUI()
        self.title = "提问"
        self.refreshItemData(isRefresh: true)
        //提问结束页面与打分页面共用
        if(self.state == 3){
            self.view_foot.isHidden = true
            self.tableView.allowsMultipleSelectionDuringEditing = false
            self.tableView.setEditing(false, animated:false)

        }
        if(self.state == 3){
            self.headView()
        }
        let item = UIBarButtonItem(title: "返回", style: .plain, target: self, action: nil)
        self.navigationItem.backBarButtonItem = item
    }
    
    func headView(){
        self.view.addSubview(self.questitle)
        self.view.addSubview(self.center)
        self.questitle.snp.makeConstraints { (make) in
            make.width.equalTo(UIScreen.main.bounds.width)
            make.height.equalTo(50)
            make.top.equalTo(10)
        }
        self.center.snp.makeConstraints { (make) in
            make.width.equalTo(UIScreen.main.bounds.width)
            make.height.equalTo(130)
            make.top.equalTo(self.questitle.snp.bottom).offset(10)
        }
    }
    
    func setTableviewUI(){
        //创建表视图
        if(self.state == 3){
            self.tableView = UITableView.init(frame: CGRect(x:0, y:220, width:width, height:height - 285));
            self.view.backgroundColor = UIColor.colorWithHex(hexColor: 0xf2f2f2)
        }else{
            self.tableView = UITableView.init(frame: CGRect(x:0, y:0, width:width, height:height - 110));
            if common.share.isX(){
                 self.tableView = UITableView.init(frame: CGRect(x:0, y:0, width:width, height:height - 165));
            }
        }

        self.tableView.delegate = self;
        self.tableView.dataSource = self;

        self.tableView.register(batchScorseTableCell.self, forCellReuseIdentifier: "batchScorseCell")

        tableView.tableFooterView = UIView(frame:CGRect.zero)//除去多余的cell
        tableView.separatorInset = UIEdgeInsets.zero;
        tableView.layoutMargins = UIEdgeInsets.zero;

        if #available(iOS 9.0, *) {
            tableView.cellLayoutMarginsFollowReadableWidth = false
        } else {
            // Fallback on earlier versions
        }
        
        //表格在编辑状态下允许多选
        self.tableView.allowsMultipleSelectionDuringEditing = true
        
        self.tableView.setEditing(true, animated:true)
        //下拉刷新相关设置,使用闭包Block
        self.tableView.mj_header = MJRefreshNormalHeader(refreshingBlock: {
            //重现生成数据
            self.refreshItemData(isRefresh:false);
            
        })

         self.view.addSubview(self.tableView!);
    }


    override func viewDidDisappear(_ animated: Bool) {
        if(!self.ispushed){
            let dict = ["type":"closeRes"];
            self.emitToPC(dict: dict)
        }
        self.ispushed = false
    }

    func setFootSubviewUI(){

        self.view.addSubview(self.btn_hand)
        self.view.addSubview(self.btn_shake)
        self.view_foot.addSubview(self.btn_allCheck)
        self.view_foot.addSubview(self.btn_over)
        self.view_foot.addSubview(self.btn_score)
        self.view_foot.addSubview(self.btn_Continue)
        let HX = common.share.returnSafeAreaLineHeight()
        self.btn_allCheck.snp.makeConstraints { (make) in
            make.width.equalTo(width / 4)
            make.height.equalTo(50)
            make.bottom.equalTo(self.view_foot.snp.bottom).offset(HX)
            make.left.equalTo(0)
        }


        self.btn_Continue.snp.makeConstraints { (make) in
            make.width.equalTo(width / 4)
            make.height.equalTo(50)
            make.bottom.equalTo(self.view_foot.snp.bottom).offset(HX)
            make.left.equalTo(self.btn_allCheck.snp.right)
        }


        self.btn_shake.snp.makeConstraints { (make) in
            make.width.equalTo(width / 4)
            make.height.equalTo(45)
            make.bottom.equalTo(self.btn_Continue.snp.top)
            make.centerX.equalTo(self.btn_Continue.snp.centerX)
        }
        self.btn_shake.addTarget(self, action: #selector(self.shakeStu), for: .touchUpInside)
        self.btn_hand.snp.makeConstraints { (make) in
            make.width.equalTo(width / 4)
            make.height.equalTo(45)
            make.bottom.equalTo(self.btn_shake.snp.top)
            make.centerX.equalTo(self.btn_Continue.snp.centerX)
        }

        self.btn_score.snp.makeConstraints { (make) in
            make.width.equalTo(width / 4)
            make.height.equalTo(50)
            make.bottom.equalTo(self.view_foot.snp.bottom).offset(HX)
            make.left.equalTo(self.btn_Continue.snp.right)
        }

        self.btn_over.snp.makeConstraints { (make) in
            make.width.equalTo(width / 4)
            make.height.equalTo(50)
            make.bottom.equalTo(self.view_foot.snp.bottom).offset(HX)
            make.left.equalTo(self.btn_score.snp.right)
        }


    }
   fileprivate func setFootUI(){

        self.view.addSubview(self.view_foot)
        self.setFootSubviewUI()

        self.view_foot.snp.makeConstraints { (make) in
            make.width.equalTo(width)
            make.height.equalTo(50)
            make.bottom.equalTo(self.view.snp.bottom)
            make.left.equalTo(0)
        }

    }
    
    

    //摇一摇
    @objc func shakeStu(){
        let vc = shakeAskQuestionView()
        vc.askId=self.quizId
        vc.activityId=self.activityId
        vc.courseOpenId=self.courseOpenId
        vc.askType = self.askType
        vc.openClassIds = self.openClassIds
        vc.source = 1
        self.ispushed = true
        self.navigationController?.pushViewController(vc, animated: true)
    }
    //👋选
    @objc func handStu(){
        let vc = selStuAskView()
        vc.askId=self.quizId
        vc.activityId=self.activityId
        vc.courseOpenId=self.courseOpenId
        vc.askType = self.askType
        vc.openClassIds = self.openClassIds
        vc.source = 1
        self.ispushed = true
        self.navigationController?.pushViewController(vc, animated: true)
    }
    @objc func selectStudentContinue(){
        self.btn_shake.isHidden = !self.btn_shake.isHidden
        self.btn_hand.isHidden =  !self.btn_hand.isHidden
        
    }
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    // MARK: - Table view data source

     func numberOfSections(in tableView: UITableView) -> Int {
        // #warning Incomplete implementation, return the number of sections
        return 1
    }

     func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat
    {
        return 50;
    }

  

    //返回表格行数（也就是返回控件数）
     func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {

        return self.stuInfos.count;
    }

    //创建各单元显示内容(创建参数indexPath指定的单元）
     func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath)
        -> UITableViewCell {

            let cell:batchScorseTableCell = tableView.dequeueReusableCell(withIdentifier: "batchScorseCell") as! batchScorseTableCell


    //结束页面与打分页面共用修改图像布局显示
            if(self.state == 3){
                cell.imgView_avatar.snp.makeConstraints { (make) in
                    make.width.height.equalTo(40)
                    make.left.equalTo(10)
                    make.centerY.equalTo(cell.snp.centerY)
                }
            }
            let stuInfo = stuInfos[indexPath.row]
            cell.lab_Name.text = stuInfo.name
            cell.lab_num.text = stuInfo.no
            if(stuInfo.socre != 0 ){
                 cell.lab_socre.text = "\u{e67c}\(stuInfo.socre)"
                 cell.lab_socre.textColor = UIColor.bg
            }else{
                 cell.lab_socre.text = "\u{e67c}"
            }
            cell.lab_socre.tag = indexPath.row

            common.share.setSDImg(str: stuInfo.url, imgview: cell.imgView_avatar) 
            cell.lab_socre.isUserInteractionEnabled = true;
            
            
            let taplab_socre = UITapGestureRecognizer.init(target: self, action: #selector(self.checkScore(sender:)));
            cell.lab_socre.addGestureRecognizer(taplab_socre);

            return cell
    }

    @objc func checkScore (sender: UITapGestureRecognizer){
        let lab :UILabel = (sender.view as? UILabel)!
        let vc = keyBoardView()
        vc.modalTransitionStyle = .crossDissolve
        vc.view.backgroundColor = UIColor(red: 0, green: 0, blue: 0, alpha: 0.1);
        vc.setSocreClosure = {(score) in
            if(score < 99){
                self.stuInfos[lab.tag].socre = score
                self.checkScore(ask: self.stuInfos[lab.tag])
            }
            self.navigationController?.dismiss(animated: true, completion: nil)
            
        }
        self.present(vc, animated: true, completion: nil)
    }
   
   
    lazy var quizId :String = {return ""}()
    lazy var openClassIds :String = {return ""}()
    lazy var askType :Int = {return 1}()
    lazy var stuCount :Int = {return 1}()
    lazy var activityId:String  = {return ""}()
    lazy var courseOpenId :String = {return ""}()
    lazy var selStuInfos:Array={return []}()
    
    lazy var questitle : UITextView = {
        let text = UITextView()
        text.font = UIFont.italicSystemFont(ofSize: 15)
        text.textColor = UIColor.black
        text.backgroundColor = UIColor.white
        text.isEditable = false
        return text
    }()
    lazy var center : UITextView = {
        let text = UITextView()
        text.font = UIFont.italicSystemFont(ofSize: 13)
        text.textColor = UIColor.black
        text.backgroundColor = UIColor.white
        text.isEditable = false
        return text
    }()
    
    lazy var view_foot :UIView = {
        let view = UIView()
        view.backgroundColor = UIColor.white
        return view

    }()

    fileprivate lazy var btn_allCheck :UIButton = {
        let btn = UIButton()
        btn.setTitle("全选", for:.normal)
        btn.setTitleColor(UIColor.gray, for: .normal)
        btn.contentMode = .center
        btn.addTarget(self, action: #selector(self.selectAllStu(_:)), for: .touchUpInside)
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 18)
        return btn
    }()

    fileprivate lazy var btn_Continue :UIButton = {
        let btn = UIButton()
        btn.setTitle("继续选人", for:.normal)
        btn.setTitleColor(UIColor.white, for: .normal)
        btn.contentMode = .center
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 18)
        btn.backgroundColor = UIColor.colorWithHex(hexColor: 0x23c397)
        btn.addTarget(self, action: #selector(self.selectStudentContinue), for: .touchUpInside)
        return btn
    }()
    lazy var btn_hand :UIButton = {
        let btn = UIButton()
        btn.setTitle("手动选人", for:.normal)
        btn.setTitleColor(UIColor.gray, for: .normal)
        btn.contentMode = .center
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 18)
        btn.backgroundColor = UIColor.white
        btn.addTarget(self, action: #selector(self.handStu), for: .touchUpInside)
        btn.isHidden = true
        return btn
    }()
    lazy var btn_shake :UIButton = {
        let btn = UIButton()
        btn.setTitle("摇一摇选人", for:.normal)
        btn.setTitleColor(UIColor.gray, for: .normal)
        btn.contentMode = .center
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 18)
        btn.backgroundColor = UIColor.white
        btn.isHidden = true
        return btn
    }()
    fileprivate lazy var btn_score :UIButton = {
        let btn = UIButton()
        btn.setTitle("批量打分", for:.normal)
        btn.contentMode = .center
        btn.setTitleColor(UIColor.white, for: .normal)
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 18)
        btn.backgroundColor = UIColor.colorWithHex(hexColor: 0x1cad85)
        btn.addTarget(self, action: #selector(self.markScore), for: .touchUpInside)
        return btn
    }()

    fileprivate lazy var btn_over :UIButton = {
        let btn = UIButton()
        btn.setTitle("结束", for:.normal)
        btn.contentMode = .center
        btn.setTitleColor(UIColor.white, for: .normal)
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 18)
        btn.addTarget(self, action: #selector(isOver), for: .touchUpInside)
        btn.backgroundColor = UIColor.colorWithHex(hexColor: 0x23c397)
        return btn
    }()
    var stuIdList  = [String]()
    lazy var state :Int = {
        return 0
    }()
   
    var stuInfos = [askQuestionStuInfo]()

    lazy var width = UIScreen.main.bounds.width
    lazy var height = UIScreen.main.bounds.height
    lazy var ispushed :Bool = {
        return false;
    }()

}
