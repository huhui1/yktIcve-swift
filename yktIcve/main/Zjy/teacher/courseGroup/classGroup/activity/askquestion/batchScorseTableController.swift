//
//  batchScorseTableController.swift
//  66iclasscloud
//
//  Created by 尤增强 on 2018/1/19.
//  Copyright © 2018年 zqy. All rights reserved.
//

import UIKit
import Alamofire
import SwiftyJSON

extension batchScorseTableView {


    //是否结束
    @objc func isOver(){
        if(!self.btn_hand.isHidden){
            self.btn_hand.isHidden = true
            self.btn_shake.isHidden = true
        }
        let alertController = UIAlertController(title: "温馨提示！",
                                                message: "是否结束提问？", preferredStyle: .alert)
        let cancelAction = UIAlertAction(title: "取消", style: .cancel, handler: nil)
        let okAction = UIAlertAction(title: "确定", style: .destructive, handler: {
            action in
            self.overAskquestion();
        })
        alertController.addAction(cancelAction)
        alertController.addAction(okAction)
        self.present(alertController, animated: true, completion: nil)
    }
    //结束提问
    func overAskquestion(){
        XLBallLoading.show(in: self.view)
        let dict = ["askId":self.quizId]
        Alamofire.request(appAPI.FaceTeach_overAsk, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{
                    ZKProgressHUD.showMessage("结束提问成功!")
                    let count  = self.navigationController?.viewControllers.count
                    if  let vc :askQuestionListTableView = self.navigationController?.viewControllers[count! - 2] as? askQuestionListTableView   {
                        vc.refreshItemData(isRefresh: false)
                    }
                    self.navigationController?.popViewController(animated: true)
                }else{
                    ZKProgressHUD.showError("网络异常请稍后再试！");
                }
                XLBallLoading.hide(in: self.view)
            }else{
                ZKProgressHUD.showError("网络环境异常请稍后再试！");
                XLBallLoading.hide(in: self.view)
            }
        }
    }
    //批量打分
    @objc func markScore(){
        if(!self.btn_hand.isHidden){
            self.btn_hand.isHidden = true
            self.btn_shake.isHidden = true
        }
        let vc = keyBoardView()
        vc.modalTransitionStyle = .crossDissolve
        vc.view.backgroundColor = UIColor(red: 0, green: 0, blue: 0, alpha: 0.1);
        vc.setSocreClosure = {(score) in
            if(score < 99){
                self.saveStuAskScore(score:score)
            }
            self.navigationController?.dismiss(animated: true, completion: nil)

        }
        self.present(vc, animated: true, completion: nil)

    }
    //全选
    @objc func selectAllStu(_ btn:UIButton){
        if(!self.btn_hand.isHidden){
            self.btn_hand.isHidden = true
            self.btn_shake.isHidden = true
        }
        btn.isSelected = !btn.isSelected
        for i in 0 ..< self.stuInfos.count {

            let indexPath =  NSIndexPath.init(item: i, section: 0) as IndexPath
            if(btn.isSelected){
                self.tableView.selectRow(at: indexPath , animated: true, scrollPosition: UITableViewScrollPosition.none)
            }else{
                self.tableView.deselectRow(at :indexPath, animated: true)
            }

        }
    }

    //投屏
    func addEventListener(){

        let params = ["type":"shake",
                      "openClassId": self.openClassIds,
                      "activityId": self.activityId,
                      "courseOpenId": self.courseOpenId] as [String : Any];

        let dict = ["type":"face",
                    "params":JSON.init(params).description ];
       self.emitToPC(dict: dict)

    }

    //学生
    func addEventListenerStudents(students:Array<Any>){
        let params = ["type":"shakeStudents",
                      "userInfo": students,
                      "openClassId": self.openClassIds,
                      "activityId": self.activityId,
                      "courseOpenId": self.courseOpenId] as [String : Any];

        let dict = ["type":"face",
                    "params":JSON.init(params).description ];
        self.emitToPC(dict: dict)

    }

    //为学生评分
   fileprivate func addEventListenerMarkScoreForStudent(ask:askQuestionStuInfo){

        let params = ["type":"markScoreForStudent",
                      "id":ask.id,
                      "score":ask.socre,
                      "name":ask.name,
                      "fromRes":false] as [String : Any];

        let dict = ["type":"face",
                    "params":JSON.init(params).description ];
        self.emitToPC(dict: dict)

    }

    //获取数据
    func refreshItemData(isRefresh:Bool){
        XLBallLoading.show(in: self.view)
        let dict = ["askId":quizId]
        Alamofire.request(appAPI.FaceTeach_getStuAskedList, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{
                    self.questitle.text = json["title"].stringValue
                    self.center.text = json["content"].stringValue
                    if json["dataList"].count > 0{
                        self.list = json["dataList"].arrayValue as NSArray
                    }
                    self.fetchCoverDetails(isRefresh:isRefresh)

                }else{
                    ZKProgressHUD.showError("网络异常请稍后再试！");
                }
                XLBallLoading.hide(in: self.view)
            }else{
                XLBallLoading.hide(in: self.view)
                ZKProgressHUD.showError("网络环境异常请稍后再试！");
            }
        }

    }

    //填充数据
    func  fetchCoverDetails(isRefresh:Bool){
        
        self.stuInfos.removeAll()
        var students  = [Dictionary<String,Any>]()
        for i in 0..<self.list.count {
            let json = JSON(self.list)[i]
        
            let stuinfo = askQuestionStuInfo.init(id: json["Id"].stringValue, name: json["Name"].stringValue,url: json["Avator"].stringValue, no: json["StuNo"].stringValue, socre: json["PerformanceScore"].intValue)
            self.stuInfos.append(stuinfo)
        
            let d = ["userId":stuinfo.id,
                     "StuNo":stuinfo.no,
                     "userName":stuinfo.name,
                     "userAvator":json["Avator"].stringValue,
                     "score":stuinfo.socre]
                as [String : Any]
            students.append(d)
        }
        self.addEventListenerStudents(students:students)
        self.tableView!.reloadData();
        if(!isRefresh){
             self.tableView!.mj_header.endRefreshing()
        }
        
        common.share.setTableFootView_noData(self.tableView, list: self.list)
    }


    //批量打分投屏
    fileprivate func addEventListenerScore(){
        var students  = [Dictionary<String,Any>]()
        for i in 0..<self.stuInfos.count {
            let stu = self.stuInfos[i]
            let d = ["userId":stu.id,
                     "StuNo":stu.no,
                     "userName":stu.name,
                     "userAvator":JSON(self.list)[i]["Avator"].stringValue,
                     "score":stu.socre]
                as [String : Any]
            students.append(d)
        }
        self.addEventListenerStudents(students:students)
    }


    //单个评分
    func checkScore(ask:askQuestionStuInfo){
        let dict=["askId":self.quizId,
                  "stuIds":ask.id,
                  "score":ask.socre,
                  "sourceType":3] as [String : Any]
        Alamofire.request(appAPI.FaceTeach_saveStuAskScore, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in

            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{
                    self.addEventListenerMarkScoreForStudent(ask: ask)
                        self.tableView!.reloadData();
                }else{
                    ZKProgressHUD.showError("网络异常请稍后再试！");
                }
            }else{
                ZKProgressHUD.showError("网络环境异常请稍后再试！");
            }
        }
        
    }
    //批量打分
    func saveStuAskScore(score:Int){
        self.stuIdList = []
        let  userlist = self.stuInfos
        for i in 0 ..< self.stuInfos.count {
            let indexPath =  NSIndexPath.init(item: i, section: 0) as IndexPath
            
            if  let cell:batchScorseTableCell = tableView.dequeueReusableCell(withIdentifier: "batchScorseCell",for: indexPath) as? batchScorseTableCell{
                if(cell.isSelected){
                    //NS array adding  不能添加数据
                    self.stuIdList.append(self.stuInfos[i].id)
                    self.stuInfos[i].socre = score
                }
            }
        }
        
        if(self.stuIdList.count == 0){
            ZKProgressHUD.showError("请选择要评分的学生!");
            self.tableView.removeFromSuperview()
            self.setTableviewUI()
            self.view_foot.removeAllSubviews()
            self.setFootSubviewUI()
            return
        }
        let dict=["askId":self.quizId,
                  "stuIds":self.stuIdList,
                  "score":score,
                  "sourceType":3] as [String : Any]
        Alamofire.request(appAPI.FaceTeach_saveStuAskScore, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in

            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{
                    self.tableView.removeFromSuperview()
                    self.setTableviewUI()
                    self.view_foot.removeAllSubviews()
                    self.setFootSubviewUI()
                    self.addEventListenerScore()
                }else{
                    self.stuInfos = userlist
                    ZKProgressHUD.showError("网络异常请稍后再试！");
                }
            }else{
                self.stuInfos = userlist
                ZKProgressHUD.showError("网络异常请稍后再试！");
            }
        }
    }
    ///    投屏事件
    ///
    /// - Parameter dict: [String:String]

    func emitToPC(dict:[String:String]){

        ZQSocketManager.share.notificationSocketManager(data: dict)
    }
}
