//
//  test_saveViewController.swift
//  66iclasscloud
//
//  Created by 尤增强 on 2018/1/12.
//  Copyright © 2018年 zqy. All rights reserved.
//

import UIKit
import Alamofire
import SwiftyJSON

extension test_saveView {

    @objc func editquestion(){
        let vc = test_selectquestionView()
        vc.openClassIds = self.openClassIds
        vc.courseOpenId = self.courseOpenId
        vc.activityId = self.activityId
        vc.classState = self.classState
        vc.testId = self.testId
        vc.selected = JSON.init(parseJSON: self.questionData)
        self.navigationController?.pushViewController(vc, animated: true)
    }

    //开始或者保存
    @objc func savetest(_ btn:UIButton){
        if(self.iseditForStart && btn.tag == 1){
            if(self.text_title.text != self.testTitle){
                self.add(tag: btn.tag)
            }else{
                self.navigationController?.popViewController(animated: true)
            }
        }else if(self.iseditForStart && btn.tag == 2){
            self.editTestAndStart()
        }else{
            self.add(tag: btn.tag)
        }
    }
    //修改测验并且开始
    func editTestAndStart(){
        let dict = ["classTestId":self.testId]
        Alamofire.request(appAPI.FaceTeach_startClassTest, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in

            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{
                    self.closeVCS()
                    ZKProgressHUD.showMessage("开始测验成功")
                    self.sendGTmsg(data:json)

                    let NotifyChatMsgRecv = NSNotification.Name("reloadFaceTestList")
                    NotificationCenter.default.post(name:NotifyChatMsgRecv, object:nil);

                    self.navigationController?.popViewController(animated: true)
                }else{
                    ZKProgressHUD.showError(json["msg"].stringValue);
                }
            }else{
                ZKProgressHUD.showError("网络环境异常请稍后再试！");
            }
        }
    }
    //添加or 修改保存测验
    func add(tag:Int){
        let actTitle = self.text_title.text!.trimmingCharacters(in:.whitespaces);
        let dict = ["Id":self.testId,
                    "activityId":self.activityId,
                    "courseOpenId":self.courseOpenId,
                    "CreatorId":Account.defaultAccount.id!,
                    "CreatorName":Account.defaultAccount.displayName!, 
                    "schoolId":Account.defaultAccount.schoolId!,
                    "classState":self.classState,
                    "Title":actTitle,
                    "SourceType":3,
                    "State":tag,
                    "ViewAnswer":2] as [String : Any];
        
        let data = ["data":JSON.init(dict).debugDescription,"questionData":self.questionData]

        XLBallLoading.show(in: self.view)
        Alamofire.request(appAPI.FaceTeach_addClassTest, method: .post, parameters: data, encoding: URLEncoding.default).responseJSON { response in
            
            if let value = response.result.value {

                let json = JSON(value)
                if json["code"] == 1{
                    //新建点击保存和开始textid都为空
                    self.closeVCS()
                 self.navigationController?.popViewController(animated: true)
                    if(tag == 2){
                        self.sendGTmsg(data:json)
                    }
                    let NotifyChatMsgRecv = NSNotification.Name("reloadFaceTestList")
                    NotificationCenter.default.post(name:NotifyChatMsgRecv, object:nil);
                }else{
                    ZKProgressHUD.showError("网络异常请稍后再试！");
                }
                XLBallLoading.hide(in: self.view)
            }else{
                ZKProgressHUD.showError("网络环境异常请稍后再试！");
                XLBallLoading.hide(in: self.view)
            }
        }
    
    }

    func closeVCS(){
        if(!self.iseditForStart){
              let count = self.navigationController?.viewControllers.count;
            var i = 2
            repeat {
                self.navigationController?.viewControllers.remove(at: count! - i);
                i += 1;
            } while ((self.navigationController?.viewControllers[ count!-i] as? faceTestListTableView) == nil)
        }

    }

    //获得单个测验详情及测验下的题目列表
    func getClassTestData(){
        if(self.iseditForStart){
            self.text_title.isEnabled = true
            let dict = ["schoolId":Account.defaultAccount.schoolId!,
                        "courseOpenId":self.courseOpenId,
                        "activityId":self.activityId,
                        "classTestId":self.testId]

            XLBallLoading.show(in: self.view)

            Alamofire.request(appAPI.FaceTeach_getClassTestData, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
                if let value = response.result.value {
                    let json = JSON(value)
                    if json["code"] == 1{

                        self.text_num.text = "\(json["classTestQuestionList"].count)"
                        self.questionData = json["classTestQuestionList"].rawString()!
                    }else{
                        ZKProgressHUD.showError(json["msg"].stringValue);
                    }
                    XLBallLoading.hide(in: self.view)
                }else{
                    ZKProgressHUD.showError("网络环境异常请稍后再试！");
                    XLBallLoading.hide(in: self.view)
                }
            }
        }else{
            self.text_num.text = "\(JSON.init(parseJSON: self.questionData).count)"
        }
    }
    //开启个消息推送
    func sendGTmsg(data:JSON){

        let dict = ["actionType":"examing",
                    "title":data["classTestInfo"]["title"].stringValue.isEmpty ?self.testTitle: data["classTestInfo"]["title"].stringValue,
                    "actId":data["classTestInfo"]["classTestId"].stringValue.isEmpty ?self.testId :data["classTestInfo"]["classTestId"].stringValue,
                    "creatorId":Account.defaultAccount.id!,
                    "faceId":self.activityId,
                    "openClassIds":self.openClassIds,
                    "courseOpenId":self.courseOpenId] as [String : Any];

        geTuiSendController.share.sendGTMSG(str: JSON.init(dict).description, userId: Account.defaultAccount.id!, openClassIds: self.openClassIds)
        
    }
    
}
