//
//  testingController.swift
//  66iclasscloud
//
//  Created by 尤增强 on 2018/1/15.
//  Copyright © 2018年 zqy. All rights reserved.
//

import UIKit
import SwiftyJSON
import Alamofire

extension testingView {


    @objc func refresh(){

        XLBallLoading.show(in: self.view)

        let dict = ["activityId":self.activityId,
                    "courseOpenId":self.courseOpenId,
                    "openClassIds":self.openClassIds,
                    "classTestId":self.classTestId,
                    "schoolId":Account.defaultAccount.schoolId!]
        Alamofire.request(appAPI.FaceTeach_getClassTestStuList, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in

            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{
                    self.MakeStuCount = json["classTestStuCount"].intValue

                    self.theWebView.evaluateJavaScript("examing.ListenerstuStormeds('\(self.classTestId)',\(self.MakeStuCount),\(self.openClassStuCount),\(json["classTestStuList"]));",
                        completionHandler: nil)

                }else{
                    ZKProgressHUD.showMessage("网络异常请稍后再试！");
                }
                XLBallLoading.hide(in: self.view)
            }else{
                ZKProgressHUD.showMessage("网络环境异常请稍后再试！");
                XLBallLoading.hide(in: self.view)
            }
        }
    }


    @objc func IsCloseClassTest(){

        let alertController = UIAlertController(title: "提示",
                                                message: "是否要结束此次测验活动",
                                                preferredStyle: .alert);
        let cancelAction = UIAlertAction(title: "取消", style: .cancel, handler: nil);
        let okAction = UIAlertAction(title: "确定", style: .default, handler: {
            action in
            self.doneCloseClassTest();
        })
        alertController.addAction(cancelAction)
        alertController.addAction(okAction)
        self.present(alertController, animated: true, completion: nil);
        
    }

    func doneCloseClassTest(){

        let dict = ["classTestId":self.classTestId]

        Alamofire.request(appAPI.FaceTeach_closeClassTest, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in

            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{

                    self.pushvc()
                }else{
                    ZKProgressHUD.showError("网络异常请稍后再试！");
                }
            }else{
                ZKProgressHUD.showError("网络环境异常请稍后再试！");
            }
        }
    }
    //跳到结果页
    func pushvc(){

        NotificationCenter.default.post(name:NotifyReload, object:nil);
        let vc = resultStuListView()
        vc.openClassIds = self.openClassIds
        vc.courseOpenId = self.courseOpenId
        vc.classTestId = self.classTestId
        vc.activityId = self.activityId

        self.navigationController?.pushViewController(vc, animated: true)

        let count = self.navigationController?.viewControllers.count;
        self.navigationController?.viewControllers.remove(at: count!-2)

    }

    func addEventListener(){


        let params = ["type":"examing",
                      "examId":self.classTestId,
                      "classId":self.openClassIds,
                      "courseId":self.courseOpenId,
                      "studycount":self.openClassStuCount,
                      "studentNumber":self.MakeStuCount ,
                      "fromRes":false] as [String : Any];
        let dict = ["type":"face","params":JSON.init(params).description ];
       ZQSocketManager.share.notificationSocketManager(data: dict)
    }
    
    @objc func stufeedback(notice: NSNotification){
        let dict =  notice.object as? Dictionary<String ,String>

        if(dict!["type"] == "stuTested"){

            let data = JSON.init(parseJSON: dict!["data"]!)

            let params = ["type":"examed",
                          "actId":self.classTestId,
                          "sendId":data["userId"],
                          "displayName":data["displayName"]
                ] as [String : Any];

            let dict = ["type":"face",
                        "params":JSON.init(params).description ];
          ZQSocketManager.share.notificationSocketManager(data: dict)

            self.theWebView.evaluateJavaScript("examing.addEventListener(\(data));",
                completionHandler: nil)
           
        }

        print("test反馈。。。。。")
    }

    func setTime(){

        // 在global线程里创建一个时间源
        codeTimer = DispatchSource.makeTimerSource(queue:  DispatchQueue.global())
        // 设定这个时间源是每秒循环一次，立即开始
        codeTimer?.schedule(deadline: .now(), repeating: .seconds(10))
        // 设定时间源的触发事件
        codeTimer?.setEventHandler(handler: {
            // 每秒计时一次
            print(self.refreshCount)
            self.refreshCount = self.refreshCount + 1
        })
        // 启动时间源
        codeTimer?.resume()
    }
}
