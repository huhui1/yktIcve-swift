//
//  test_selectquestionController.swift
//  66iclasscloud
//
//  Created by 尤增强 on 2018/1/11.
//  Copyright © 2018年 zqy. All rights reserved.
//

import UIKit
import Alamofire
import SwiftyJSON
extension test_selectquestionView {

    func getQuestions(){
        //        ZKProgressHUD.setAnimationStyle(.chrysanthemum);
//
//        ZKProgressHUD.show();
        XLBallLoading.show(in: self.view)
        let dict = ["courseOpenId":self.courseOpenId,
                    "questionType":"",
                    "knowledgeIds":""] as [String : Any];
        Alamofire.request(appAPI.FaceTeach_getCourseFixedQuestionList, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in

            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{
                    self.json = json
                    self.theWebView.evaluateJavaScript("select_question.get(\(json));",completionHandler: nil)

                    self.theWebView.evaluateJavaScript("select_question.loadContent(\(self.selected));",completionHandler: nil)
                    
                    self.getCoursKnowledgeList()
//                    ZKProgressHUD.hide()
                }else{
                    ZKProgressHUD.showError("网络异常请稍后再试！");
                }
                XLBallLoading.hide(in: self.view)
            }else{
                ZKProgressHUD.showError("网络环境异常请稍后再试！");
                XLBallLoading.hide(in: self.view)
            }
        }

    }

    func getCoursKnowledgeList(){
//        ZKProgressHUD.setAnimationStyle(.chrysanthemum);
//
//        ZKProgressHUD.show();
        XLBallLoading.show(in: self.view)
        let dict = ["courseOpenId":self.courseOpenId];
        Alamofire.request(appAPI.FaceTeach_getCoursKnowledgeList, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in

            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{
//                    ZKProgressHUD.hide()
                    self.CoursKnowledge = json
                    self.theWebView.evaluateJavaScript("select_question.set(\(self.CoursKnowledge));",
                        completionHandler: nil)
                }else{
                    ZKProgressHUD.showError("网络异常请稍后再试！");
                }
                XLBallLoading.hide(in: self.view)
            }else{
                ZKProgressHUD.showError("网络环境异常请稍后再试！");
                XLBallLoading.hide(in: self.view)
            }
        }
    }

    func singlePreview(questionInfo:String){

        let vc = testSingleView()
        vc.questionInfo = questionInfo
        self.isPushed = true
        self.navigationController?.pushViewController(vc, animated: true)
    }

    func sel_next(json:JSON){
        if(json.count < 1){
            ZKProgressHUD.showMessage("请选择题目")
            return
        }
         let vc = test_selectalreadyView()
         vc.openClassIds = self.openClassIds
         vc.courseOpenId = self.courseOpenId
         vc.activityId = self.activityId
         vc.classState = self.classState
         vc.json = json
         vc.testId = self.testId
         self.isPushed = true
         vc.modalTransitionStyle = .crossDissolve
         self.navigationController?.pushViewController(vc, animated: true)
    }
    
    //指示浮窗
    func maskView(){
        self.view.addSubview( self.makeView)
        self.makeView.backgroundColor = UIColor(red: 0, green: 0, blue: 0, alpha: 0.3);
        let tapBtn = UIButton.init()
        tapBtn.setBackgroundImage(UIImage.init(named: "handTap.png"), for: .normal)
        
        self.makeView.addSubview(tapBtn)
        tapBtn.snp.makeConstraints { (make) in
            make.width.height.equalTo(60)
            make.top.equalTo(10)
            make.left.equalTo(UIScreen.main.bounds.width / 4 - 30)
        }
        let Btn_title = UIButton.init()
        
        Btn_title.setTitle("只支持客观题|下一步", for: .normal)
        Btn_title.setTitleColor(UIColor.white, for: .normal)
        
        self.makeView.addSubview( Btn_title)
        let lw = UIScreen.main.bounds.width - 70  > 300 ? 300 :UIScreen.main.bounds.width - 70
        Btn_title.snp.makeConstraints { (make) in
            make.width.equalTo(lw)
            make.height.equalTo(30)
            make.left.equalTo(UIScreen.main.bounds.width / 4)
            make.centerY.equalTo(tapBtn)
        }
        Btn_title.titleLabel?.adjustsFontSizeToFitWidth = true
        Btn_title.titleLabel?.textAlignment = .left
        tapBtn.addTarget(self, action: #selector(self.hideview), for: .touchUpInside)
        Btn_title.addTarget(self, action: #selector(self.hideview), for: .touchUpInside)
    }
    
    @objc func hideview(){
        self.makeView.isHidden = true
        cx.updateData(isType: "isbrowseTest")
    }
    
    
}
