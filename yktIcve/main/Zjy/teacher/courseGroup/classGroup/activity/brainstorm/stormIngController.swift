//
//  stormIngController.swift
//  云课堂-职教云
//
//  Created by zqy on 2018/3/21.
//  Copyright © 2018年 zqy. All rights reserved.
//

import Foundation
import SwiftyJSON
import Alamofire

extension stormIngView{


    @objc func stufeedback(notice: NSNotification){
        let dict =  notice.object as? Dictionary<String ,String>

        if(dict!["type"] == "stuBrainstormed"){

            let data = JSON.init(parseJSON: dict!["data"]!)

            let params = ["type":"brainstorming_student",
                          "actId":self.brainstorm.Id,
                          "userId":data["userId"],
                          "displayName":data["displayName"],
                          "avator":"",
                          "isFirst":true] as [String : Any];
            let dict = ["type":"face",
                        "params":JSON.init(params).description ];
            self.emitToPC(dict: dict)
            self.theWebView.evaluateJavaScript("storming.Listenerstued(\(data));",
                completionHandler: nil)
        }
        print("stuBrainstormed反馈。。。。。")
    }

    func addEventListener(){

        let params = [
              "type": "brainStorming",
            "activityId": self.brainstorm.activityId,
            "courseOpenId": self.brainstorm.courseOpenId,
            "schoolId": Account.defaultAccount.schoolId!,
            "studycount":self.brainstorm.total,
            "studentNumber":self.brainstorm.joinStuCount,
            "send2student":false,
            "stormId": self.brainstorm.Id,
             "fromRes":false] as [String : Any]

        let dict = ["type":"face",
                    "params":JSON.init(params).description ];
        self.emitToPC(dict: dict)

    }

    func closeBrainStorm(){
        let alertController = UIAlertController(title: "温馨提示！",
                                                message: "是否结束当前头脑风暴", preferredStyle: .alert)
        let cancelAction = UIAlertAction(title: "取消", style: .cancel, handler: nil)
        let okAction = UIAlertAction(title: "确定", style: .destructive, handler: {
            action in
            self.closeStorm()
        })
        alertController.addAction(cancelAction)
        alertController.addAction(okAction)
        self.present(alertController, animated: true, completion: nil)
    }

    func closeStorm(){
        let dict = ["brainStormId":self.brainstorm.Id]
        Alamofire.request(appAPI.FaceTeach_closeBrainStorm, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                //                ZKProgressHUD.hide(delay: 0);
                let json = JSON(value)
                if(json["code"]>0){
                   NotificationCenter.default.post(name:NSNotification.Name("reloadBrainstorm"), object: dict);
                    let vc = brainStormView();
                    vc.brainStormInfo = self.brainstorm
                    self.navigationController?.pushViewController(vc, animated: true)
                    let count = self.navigationController?.viewControllers.count
                    self.navigationController?.viewControllers.remove(at: count! - 2)
                }else{
                    ZKProgressHUD.showError(json["msg"].stringValue);
                }
                
            }else{
                ZKProgressHUD.showError("网络环境异常请稍后再试！");
            }
        }
    }

    @objc func refresh(){

        XLBallLoading.show(in: self.view)
        let dict = ["brainStormId":self.brainstorm.Id,
                    "type":1] as [String : Any]
        Alamofire.request(appAPI.FaceTeach_getUnJoinStuList, method: .post,parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{
                    self.theWebView.evaluateJavaScript("storming.ListenerstuStormeds('\(self.brainstorm.Id)',\(json["datalist"].count),\(self.brainstorm.total),\(json["datalist"]));",
                        completionHandler: nil)

                }else{
                    ZKProgressHUD.showMessage(json["msg"].stringValue);
                }
                XLBallLoading.hide(in: self.view)
            }else{
                XLBallLoading.hide(in: self.view)
                ZKProgressHUD.showError("网络环境异常请稍后再试！");
            }
        }
    }

    func setTime(){

        // 在global线程里创建一个时间源
        codeTimer = DispatchSource.makeTimerSource(queue:  DispatchQueue.global())
        // 设定这个时间源是每秒循环一次，立即开始
        codeTimer?.schedule(deadline: .now(), repeating: .seconds(10))
        // 设定时间源的触发事件
        codeTimer?.setEventHandler(handler: {
            // 每秒计时一次
            print(self.refreshCount)
            self.refreshCount = self.refreshCount + 1
        })
        // 启动时间源
        codeTimer?.resume()
    }

    ///    投屏事件
    ///
    /// - Parameter dict: [String:String]

    func emitToPC(dict:[String:String]){

        ZQSocketManager.share.notificationSocketManager(data: dict)
    }
}
