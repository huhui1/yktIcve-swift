//
//  stormIngView.swift
//  云课堂-职教云
//
//  Created by zqy on 2018/3/20.
//  Copyright © 2018年 zqy. All rights reserved.
//

import UIKit
import WebKit
import SwiftyJSON
class stormIngView: UIViewController,WKScriptMessageHandler {
    lazy var backView:UIView = {
        let view = UIView()
        return view
    }()
    override func viewDidLoad() {
        
        super.viewDidLoad()
        self.title = "头脑风暴"
        self.view.backgroundColor = UIColor.white
        self.addEventListener()
        self.setWebViewUI()
        NotificationCenter.default.addObserver(self, selector: #selector(self.stufeedback), name: NotifyEventListener, object: nil)
        self.setTime()
        let item = UIBarButtonItem(title: "返回", style: .plain, target: self, action: nil)
        self.navigationItem.backBarButtonItem = item
    }
    
    //设置H5页面
    func setWebViewUI(){
        
        let path = Bundle.main.path(forResource: "storming", ofType: ".html",
                                    inDirectory: "HTML5/src/teacher/brainStorm");
        let url = URL(fileURLWithPath:path!);
        //let request = URLRequest(url:url);
        
        //创建供js调用的接口
        let theConfiguration = WKWebViewConfiguration()
        theConfiguration.userContentController.add(self, name: "interOp")
        
        //将浏览器视图全屏(在内容区域全屏,不占用顶端时间条)
        let frame = CGRect(x:0, y:0, width:UIScreen.main.bounds.width,
                           height:UIScreen.main.bounds.height-60)
        theWebView = WKWebView(frame:frame, configuration: theConfiguration)
        //禁用页面在最顶端时下拉拖动效果
        theWebView.scrollView.bounces = false;
        //theWebView.isUserInteractionEnabled = false;
        //加载页面
        if #available(iOS 9.0, *) {
            
            theWebView.loadFileURL(url, allowingReadAccessTo: url)
        } else {
            
            do{
                
                let url1 = try common.share.fileURLForBuggyWKWebView8(fileURL:url as NSURL)
                let request = URLRequest(url:url1 as URL);
                theWebView.load(request)
                
            }catch{}
        }
        //theWebView.load(request)
        self.view.addSubview(theWebView);

        let Item = UIBarButtonItem.init(title: "刷新", style: UIBarButtonItemStyle.plain, target: self, action: #selector(self.refresh));
         self.navigationItem.rightBarButtonItem = Item
    }
    
    
    
    //返回处理h5清除页面，防内存溢出
    override func viewWillDisappear(_ animated: Bool) {
        self.codeTimer?.cancel()
        let dict = ["type":"closeRes"];
          NotificationCenter.default.removeObserver(self)
        self.emitToPC(dict: dict)
        theWebView.configuration.userContentController.removeScriptMessageHandler(forName: "interOp")
    }
    
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    func userContentController(_ userContentController:WKUserContentController,
                               didReceive message: WKScriptMessage) {
        let sentData = message.body as! Dictionary<String,String>
        if(sentData["method"] == "load" ){
            self.theWebView.evaluateJavaScript("storming.getparameter('\(self.brainstorm.joinStuCount)','\(self.brainstorm.total)')",
                completionHandler: nil)
        }else if(sentData["method"] == "overBrainStorm"){
            self.closeBrainStorm()
        }else if(sentData["method"] == "params"){
            let dict = ["type":"face",
                        "params":sentData["params"]! ];
           self.emitToPC(dict: dict)

        }
    }

    var refreshCount:Int = 0
    {

        didSet
        {
            if refreshCount<10
            {
                self.refresh()
            }else{
                codeTimer?.cancel()
                codeTimer = nil
            }

        }
    }
    var codeTimer: DispatchSourceTimer?
  

    var brainstorm = brainStormInfoModel.init()

    let NotifyEventListener = NSNotification.Name("stufeedback")


    lazy var theWebView:WKWebView = {
        let WK = WKWebView()
        
        return WK
    }()

}




