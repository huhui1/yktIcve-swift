//
//  createStormView.swift
//  66iclasscloud
//
//  Created by 尤增强 on 2018/1/13.
//  Copyright © 2018年 zqy. All rights reserved.
//

import UIKit
import SwiftyJSON

class createStormView: UIViewController,UIImagePickerControllerDelegate,UINavigationControllerDelegate ,UITextViewDelegate{

    //用来放置各个图片单元
    var collectionView:UICollectionView!

    //collectionView的布局
    var collectionViewLayout: UICollectionViewFlowLayout!

    let width = UIScreen.main.bounds.width;



    let maxImgCount = 9
    override func viewDidLoad() {
        super.viewDidLoad()
        self.view.backgroundColor = UIColor.colorWithHex(hexColor: 0xf1f1f1)
        self.title = "新增头脑风暴";

        self.setUI()
        NotificationCenter.default.addObserver(self, selector: #selector(textViewEditChanged(sender:)), name: NSNotification.Name.UITextViewTextDidChange, object: nil);
        if(self.brainStormInfo.imgList.count < self.maxImgCount){
            let  m = UploadDocModel.init(data: JSON(), img:UIImage.init(named: "scancode_photo")!)
            m.isAdd = true
            self.brainStormInfo.imgList.insert(m, at: 0)
        }

        self.contenText.delegate = self
        self.setUICollectionView()
        // Do any additional setup after loading the view.
    }

    func setUI(){
        let item = UIBarButtonItem(title: "返回", style: .plain, target: self, action: nil)
        self.navigationItem.backBarButtonItem = item
        
        // Adding Button ToolBar
        toolBar = common.share.AddToolKeyboardDoneBar()
        let doneButton = UIBarButtonItem(title: "确定", style: .plain, target: self, action: #selector(self.DoneClick));
        let spaceButton = UIBarButtonItem(barButtonSystemItem: .flexibleSpace, target: nil, action: nil)
        toolBar.setItems([spaceButton,doneButton], animated: false);
      
  
        self.view.addSubview(discussTitleText)
        discussTitleText.snp.makeConstraints { (make) in
            make.width.equalTo(width )
            make.left.equalTo(0)
            make.top.equalTo(6)
            make.height.equalTo(40)
        }

        self.view.addSubview(msglable)
        msglable.snp.makeConstraints { (make) in
            make.width.equalTo(width)
            make.top.equalTo(discussTitleText.snp.bottom)
            make.height.equalTo(40)
            make.left.equalTo(0)
        }
        msglable.text = "    最多可输入300字"
        self.view.addSubview(contenText)
        contenText.snp.makeConstraints { (make) in
            make.width.equalTo(width)
            make.height.equalTo(200)
            make.left.equalTo(0)
            make.top.equalTo(msglable.snp.bottom)
        }
        contenText.returnKeyType = .next
        let HX = common.share.returnSafeAreaLineHeight()
        self.view.addSubview(saveBtn)
        saveBtn.snp.makeConstraints { (make) in
            make.width.equalTo(width / 2)
            make.height.equalTo(40)
            make.left.equalTo(0)
            make.bottom.equalTo(self.view.snp.bottom).offset(HX)
        }
        self.view.addSubview(submitBtn)
        submitBtn.snp.makeConstraints { (make) in
            make.width.equalTo(width / 2)
            make.height.equalTo(saveBtn.snp.height)
            make.centerY.equalTo(saveBtn.snp.centerY)
            make.left.equalTo(saveBtn.snp.right)
        }
        
        if(self.brainStormInfo.Id.isEmpty){
            let date = NSDate()
            let timeFormatter = DateFormatter()
            timeFormatter.dateFormat = "yyy-MM-dd HH:mm"
            let strNowTime = timeFormatter.string(from: date as Date) as String + "的头脑风暴"

            self.discussTitleText.text = strNowTime
        }else{
            self.discussTitleText.text = self.brainStormInfo.title
            self.contenText.text = self.brainStormInfo.content
          
        }
    }



    func textViewShouldBeginEditing(_ textView: UITextView) -> Bool {
        textView.inputAccessoryView = toolBar;
        if(!self.isup){
            common.share.animateViewMoving(up: true, moveValue: 73, view: self.view)
        }
        self.isup = true
        return true
    }

    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
         self.view.endEditing(true)
    }

    @objc func DoneClick(){
        self.view.endEditing(true)
        if(self.isup){
            common.share.animateViewMoving(up: false, moveValue: 73, view: self.view)
        }
        self.isup = false
    }
    //ipad键盘
    func textViewShouldEndEditing(_ textView: UITextView) -> Bool {
        textView.resignFirstResponder()
        if(self.isup){
            common.share.animateViewMoving(up: false, moveValue: 73, view: self.view)
        }
        self.isup = false
        return true
    }
    override func viewWillDisappear(_ animated: Bool) {
        if !isPushed{
            NotificationCenter.default.removeObserver(self)
        }
        self.isPushed = false
    }
    
    //字数限制
    @objc func textViewEditChanged(sender:NSNotification) {
        let textVStr = contenText.text as NSString
        if (textVStr.length >= 300) {
            let str = textVStr.substring(to: 300)
            contenText.text = str
            ZKProgressHUD.showMessage("最多输入300字")
        }
    }
    

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    lazy var contenText : UITextView = {
        let text = UITextView();
        text.backgroundColor = UIColor.white
        return text;
    }()

    lazy var discussTitleText:UITextField = {
        let text = UITextField()
        text.setValue(NSNumber(value:10), forKey:"paddingLeft")
        text.font = UIFont.init(name: "iconfont", size: 14)
        text.backgroundColor = UIColor.white
        text.placeholder = "请输入标题"
        text.clearButtonMode = .unlessEditing
        return text
    }()

    lazy var msglable : UILabel = {
        let lab = UILabel()

        lab.font = UIFont.init(name: "iconfont", size: 10)
        return lab;
    }()


    var img_collectionView:UICollectionView!

    lazy  var saveBtn : UIButton = {
        let btn = UIButton()
        btn.contentMode = .center
        btn.setTitleColor(UIColor.white, for: .normal)
        btn.setTitle("保存", for: .normal)
        btn.tag = 1
        btn.backgroundColor = UIColor.colorWithHex(hexColor: 0x23c397)
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 16)
        btn.addTarget(self, action:  #selector(self.editbrainStorm(_:)), for: .touchUpInside)
        return btn ;

    }()

    lazy  var submitBtn : UIButton = {
        let btn = UIButton()
        btn.contentMode = .center
        btn.setTitleColor(UIColor.white, for: .normal)
        btn.backgroundColor = UIColor.bg
        btn.setTitle("开始", for: .normal)
        btn.tag = 2
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 16)
        btn.addTarget(self, action:  #selector(self.editbrainStorm(_:)), for: .touchUpInside)
        return btn ;

    }()


   var  uploadUrl  = ""
    lazy var isup :Bool = {
        return false
    }()
    var toolBar = UIToolbar();
    var isPushed = false

    var brainStormInfo  = brainStormInfoModel.init()


}

extension createStormView:UICollectionViewDataSource,UICollectionViewDelegate{



    func setUICollectionView(){

        //collectionView尺寸样式设置
        collectionViewLayout = UICollectionViewFlowLayout()
        collectionViewLayout.minimumLineSpacing = 4
        collectionViewLayout.minimumInteritemSpacing = 4

        //横向滚动
        collectionViewLayout.scrollDirection = .vertical

        collectionViewLayout.itemSize = CGSize.init(width:50, height:50)

        let c = CGRect.init(x: 20, y: 290, width:self.width, height: 105)
        //collectionView初始化
        collectionView = UICollectionView(frame:c ,
                                          collectionViewLayout: collectionViewLayout)
        collectionView.backgroundColor = UIColor.white

        collectionView.delegate = self
        collectionView.dataSource = self
        collectionView.isPagingEnabled = true
        collectionView.backgroundColor = UIColor.clear
        self.view.addSubview(collectionView)

    }



    //collectionView单元格创建
    func collectionView(_ collectionView: UICollectionView,
                        cellForItemAt indexPath: IndexPath)
        -> UICollectionViewCell {
            let d = Date()
            let identifier = "cell\(d.timeIntervalSince1970)"
            //注册重用的单元格
            let cellXIB = UINib.init(nibName: "ZQUICollectionViewCell_Img", bundle: Bundle.main)
            collectionView.register(cellXIB, forCellWithReuseIdentifier: identifier)
            let cell = collectionView.dequeueReusableCell(withReuseIdentifier: identifier,
                                                          for: indexPath) as! ZQUICollectionViewCell_Img

            let m = self.brainStormInfo.imgList[indexPath.row]
            if (self.brainStormInfo.Id.isEmpty){
                     cell.setModelByUIImage(Model: m)
                }else{
                    cell.setModelByOnline(model: m)
                }

                cell.CellBlock = {  () -> Void in
                    self.uploadImg()
                }

            return cell
    }

    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
         let m = self.brainStormInfo.imgList[indexPath.row]

         let vc = uploadImgPreviewView()
            if(m.img.size != CGSize.zero){
                 vc.img = m.img
            }else{
                vc.imgurl = m.url
            }
         vc.reloadImglistClosure = {(index) in

            if(self.brainStormInfo.imgList.count == self.maxImgCount){
                 self.brainStormInfo.imgList.insert(m, at: 0)
            }
            self.brainStormInfo.imgList.remove(at: indexPath.row)
            self.collectionView.deleteItems(at: [indexPath])
         }
         vc.modalTransitionStyle = .crossDissolve
        self.present(vc, animated: true, completion: nil)
    }

    //collectionView单元格数量
    func collectionView(_ collectionView: UICollectionView,
                        numberOfItemsInSection section: Int) -> Int {

        return self.brainStormInfo.imgList.count
    }
}
