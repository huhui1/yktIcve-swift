//
//  gradeAnalysisList.swift
//  云课堂-职教云
//
//  Created by zqy on 2018/3/23.
//  Copyright © 2018年 zqy. All rights reserved.
//
import UIKit
import SwiftyJSON
import Charts

class reultsAnalysisListView : UIViewController,UITableViewDelegate,UITableViewDataSource{

    var charts:RadarChartView!
    lazy var width :CGFloat = UIScreen.main.bounds.width;
    lazy var height:CGFloat = UIScreen.main.bounds.height;

    override func viewDidLoad() {
        super.viewDidLoad()
        let Item = UIBarButtonItem(title: "返回", style: .plain, target: self, action: nil)
        self.navigationItem.backBarButtonItem = Item
        if isStu == 1{
            let appDelegate = UIApplication.shared.delegate as! AppDelegate
            let value = UIInterfaceOrientation.landscapeRight.rawValue
            appDelegate.isEffective = true
            appDelegate.allowRotation = false
            UIDevice.current.setValue(value, forKey: "orientation")
        }
        self.view.backgroundColor = UIColor.white;
        charts  = RadarChartView.init(frame: CGRect.init(x: 0, y: 0, width: width, height: height / 2))
        self.view.addSubview(charts)
        self.getStuScore()
        
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }




    func setChartsUI(items:Double...){
        let data = items
        var item :[ChartDataEntry] = Array()

        for i in data{

            let dataEntry = ChartDataEntry(x:Double(i), y: Double(i))
            item.append(dataEntry)
        }

        let dataset = RadarChartDataSet.init(values: item, label: "成绩分布")

        dataset.lineWidth = 0.3
        dataset.fillColor = UIColor.bg
        dataset.valueTextColor = UIColor.white
        dataset.fillAlpha = 0.9
        dataset.setColors([UIColor.white], alpha: 1)
        dataset.drawFilledEnabled = true


        charts.backgroundColor = UIColor.colorWithHex(hexColor: 0x161626)

        let t = RadarChartData.init(dataSets: [dataset])
      
        charts.data = t
        charts.xAxis.labelPosition = .bottom

        charts.yAxis.enabled = false
        charts.xAxis.labelTextColor = UIColor.white

        charts.noDataTextColor = UIColor.white



    }
    override func viewWillDisappear(_ animated: Bool) {
        let appDelegate = UIApplication.shared.delegate as! AppDelegate
        if isStu == 1{
            if (!self.isPused){
                appDelegate.allowRotation = true
                appDelegate.isEffective = true
                let value = UIInterfaceOrientation.portrait.rawValue
                
                UIDevice.current.setValue(value, forKey: "orientation")
            }
            self.isPused = false
        }
    }


    
    func  setTableView(){

        //创建表视图
        self.tableView = UITableView.init(frame:  CGRect(x:0, y:height/2, width:width, height:height/10*5))
        
        self.tableView.delegate = self;
        self.tableView.dataSource = self;
        self.tableView.isScrollEnabled = false//禁止tableview滚动
        //        //创建一个重用的单元格
        self.tableView.register(reultsAnalysisListCell.self, forCellReuseIdentifier: "SwiftCell");
        //
        self.tableView.tableFooterView = UIView(frame:CGRect.zero)//除去多余的cell
        //
        if #available(iOS 9.0, *) {
            self.tableView.cellLayoutMarginsFollowReadableWidth = false
        } else {
            
        }
        self.view.addSubview(self.tableView);
        
    }


    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }

    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat{
        return height/8
        ;
    }

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 3;
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        //为了提供表格显示性能，已创建完成的单元需重复使用
        let identify:String = "SwiftCell"
        //同一形式的单元格重复使用，在声明时已注册
        let cell = tableView.dequeueReusableCell(withIdentifier: identify,
                                                 for: indexPath) as! reultsAnalysisListCell
        self.lab_name.textAlignment = .center
        self.lab_score.text = "总分:\(json["totalScore"].doubleValue)"
        switch indexPath.row {
        case 0:
            cell.lab_name.text = "比例"
            cell.lab_online.text = "\(json["onLinePercent"])%"
            cell.lab_offline.text = "\(json["offLinePercent"])%"
            cell.lab_task.text = "\(json["homeWorkPercent"])%"
            cell.lab_examination.text = "\(json["examPercent"])%"
            cell.lab_statisticalscore.text = "---"
            cell.lab_sumscore.text = "---"
        case 1:
            cell.lab_name.text = "实际分"
            cell.lab_online.text = "\(json["onLineScore"])"
            cell.lab_offline.text = "\(json["offLineScore"])"
            cell.lab_task.text = "\(json["homeWorkScore"])"
            cell.lab_examination.text = "\(json["examScore"])"
            cell.lab_sumscore.text = "---"
        case 2:
            cell.lab_name.text = "比例分"
            let onlineSocre = (json["onLineScore"].float! *  json["onLinePercent"].float! * 0.01)

            cell.lab_online.text = "\(String(format: "%.2f",onlineSocre ))"

            let offlineSocre = (json["offLineScore"].float! *  json["offLinePercent"].float! * 0.01)
            cell.lab_offline.text = "\(String(format: "%.2f", offlineSocre))"

            let taskSocre = (json["homeWorkScore"].float! *  json["homeWorkPercent"].float! * 0.01)
            cell.lab_task.text = "\(String(format: "%.2f", taskSocre))"

            let examinationScore = (json["examScore"].float! *  json["examPercent"].float! * 0.01)
            cell.lab_examination.text = "\(String(format: "%.2f", examinationScore))"

           
            self.setChartsUI(items: Double(onlineSocre),Double(offlineSocre),Double(taskSocre),Double(examinationScore))
            cell.lab_statisticalscore.text = "\(String(format: "%.2f", ((json["onLineScore"].float! *  json["onLinePercent"].float! * 0.01) + (json["offLineScore"].float! *  json["offLinePercent"].float! * 0.01 ) + (json["homeWorkScore"].float! *  json["homeWorkPercent"].float! * 0.01 ) + (json["examScore"].float! *  json["examPercent"].float! * 0.01)+(json["groupTaskScore"].float! *  json["groupTaskPercent"].float!) * 0.01 )) )"
            cell.lab_sumscore.text = "\(json["totalScore"].doubleValue)"
        default:
            break
        }
        return cell
    }

    
    func setUI(){

        
        self.view.addSubview(self.btn_View)
        self.view.addSubview(lab_scoredetails)
        self.view.addSubview(lab_score)
        
        self.btn_View.addSubview(btn_online)
        self.btn_View.addSubview(btn_offline)
        self.btn_View.addSubview(btn_examination)
     
        self.btn_View.addSubview(btn_task)
        self.btn_View.addSubview(lab_name)
        self.btn_View.addSubview(lab_statisticalscore)
        self.btn_View.addSubview(lab_sumscore)

        //成绩详情
        self.lab_scoredetails.snp.makeConstraints{ (make) in
            make.width.equalTo(100)
            make.height.equalTo(height/10)
            make.top.equalTo(120)
            make.left.equalTo(6)
        }
        self.lab_scoredetails.textAlignment = NSTextAlignment.center
        
        self.lab_score.snp.makeConstraints{ (make) in
            make.width.height.top.equalTo(self.lab_scoredetails)
            make.right.equalTo(self.lab_sumscore.snp.right).offset(-40)
        }
        lab_score.text = "总分:"
        self.lab_score.textAlignment = NSTextAlignment.center
        
        self.btn_View.snp.makeConstraints{ (make) in
            make.width.equalTo(width)
            make.height.equalTo(height/8)
            make.top.equalTo(height / 10 * 4)
            make.left.equalTo(0)
        }
        
        self.lab_name.snp.makeConstraints{ (make) in
            make.width.equalTo(width/7)
            make.height.equalTo(30)
            make.centerY.equalTo(self.btn_View.snp.centerY)
            make.left.equalTo(10)
        }
        
        self.btn_online.snp.makeConstraints{ (make) in
            make.width.height.centerY.equalTo(self.lab_name)
            make.left.equalTo(self.lab_name.snp.right).offset(0)
        }
        self.btn_offline.snp.makeConstraints{ (make) in
            make.width.height.centerY.equalTo(self.lab_name)
            make.left.equalTo(self.btn_online.snp.right).offset(0)
        }
        
        self.btn_task.snp.makeConstraints{ (make) in
            make.width.height.centerY.equalTo(self.lab_name)
            make.left.equalTo(self.btn_offline.snp.right).offset(0)
        }
        
        self.btn_examination.snp.makeConstraints{ (make) in
            make.width.height.centerY.equalTo(self.lab_name)
            make.left.equalTo(self.btn_task.snp.right).offset(0)
        }
        
     
        self.lab_statisticalscore.snp.makeConstraints{ (make) in
            make.width.height.centerY.equalTo(self.lab_name)
            make.left.equalTo(self.btn_examination.snp.right).offset(0)
        }
        
        self.lab_sumscore.snp.makeConstraints{ (make) in
            make.width.height.centerY.equalTo(self.lab_name)
            make.left.equalTo(self.lab_statisticalscore.snp.right).offset(0)
        }
        
        self.btn_online.contentHorizontalAlignment = .center;
        self.btn_offline.contentHorizontalAlignment = .center;
        self.btn_task.contentHorizontalAlignment = .center;
        self.btn_examination.contentHorizontalAlignment = .center;
        
        self.btn_online.addTarget(self, action:#selector(tappedcache(_:)), for:.touchUpInside);
        self.btn_offline.addTarget(self, action:#selector(tappedcache(_:)), for:.touchUpInside);
        self.btn_task.addTarget(self, action:#selector(tappedcache(_:)), for:.touchUpInside);
        self.btn_examination.addTarget(self, action:#selector(tappedcache(_:)), for:.touchUpInside);
        
        
    }
    
   @objc func tappedcache(_ button:UIButton){
        let tag = button.tag;
        switch tag {
        case 1,2:
            let vc = online_offlineListView();
                vc.courseOpenId = self.courseOpenId
                vc.openClassId = self.openClassId
                vc.stuId = self.stuId
                vc.state = tag
                self.isPused = true
             self.navigationController?.pushViewController(vc, animated: true);
             print("=======")
        case  3 :
            let vc = testdetailsView();
            vc.hidesBottomBarWhenPushed = true;
            vc.title = "作业详情";
            vc.courseOpenId = self.courseOpenId
            vc.openClassId = self.openClassId
            vc.stuId = self.stuId
            self.isPused = true
            self.navigationController?.pushViewController(vc, animated: true);
        case 4:
            let vc = examinationdetailsView();
            vc.hidesBottomBarWhenPushed = true;
            vc.title = "考试详情";
            vc.courseOpenId = self.courseOpenId
            vc.openClassId = self.openClassId
            vc.stuId = self.stuId
            self.isPused = true
            self.navigationController?.pushViewController(vc, animated: true);
    //    case 5 :
//            let vc =  grouptaskView();
//            vc.hidesBottomBarWhenPushed = true;
//            vc.title = "小组任务";
//            vc.courseOpenId = self.courseOpenId
//            vc.openClassId = self.openClassId
//            vc.stuId = self.stuId
//            self.navigationController?.pushViewController(vc, animated: true);
        default:
            print("--------")
        }
    }

    
    lazy var lab_scoredetails :UILabel = {
        let lab = UILabel()
        lab.textColor = UIColor.gray
        lab.font = UIFont.init(name: "iconfont", size: 14)
        lab.text = "成绩详情"
        return lab
    }()
    //总分
    lazy var lab_score :UILabel = {
        let lab = UILabel()
        lab.textColor = UIColor.gray
        lab.font = UIFont.init(name: "iconfont", size: 14)
        
        return lab
    }()
    
    lazy var btn_View:UIView = {
        let view = UIView()
        view.backgroundColor = UIColor.colorWithHex(hexColor: 0xf2f2f2)
        return view
    }()
    //名称
    lazy var lab_name :UILabel = {
        let lab = UILabel()
        lab.textColor = UIColor.gray
        lab.font = UIFont.init(name: "iconfont", size: 14)
        lab.textAlignment = NSTextAlignment.center
        lab.text = "名称"
        return lab
    }()
    
    lazy var btn_online :UIButton={
        let btn = UIButton()
        btn.titleLabel?.font = UIFont(name: "iconfont", size: 14);
        btn.setTitle("线上", for:.normal) //普通状态下的文字
        btn.setTitleColor(UIColor.bg, for: .normal) //普通状态下文字的颜色
        btn.tag = 1;
        return  btn
    }()
    
    lazy var btn_offline :UIButton={
        let btn = UIButton()
        btn.titleLabel?.font = UIFont(name: "iconfont", size: 14);
        btn.setTitle("线下", for:.normal)
        btn.setTitleColor(UIColor.bg, for: .normal)
        btn.tag = 2;
        return  btn
    }()
    
    lazy var btn_task :UIButton={
        let btn = UIButton()
        btn.titleLabel?.font = UIFont(name: "iconfont", size: 14);
        btn.setTitle("作业", for:.normal)
        btn.setTitleColor(UIColor.bg, for: .normal)
        btn.tag = 3;
        return  btn
    }()
    
    lazy var btn_examination :UIButton={
        let btn = UIButton()
        btn.titleLabel?.font = UIFont(name: "iconfont", size: 14);
        btn.setTitle("考试", for:.normal)
        btn.setTitleColor(UIColor.bg, for: .normal)
        btn.tag = 4;
        return  btn
    }()
    

    //统计分
    lazy var lab_statisticalscore :UILabel = {
        let lab = UILabel()
        lab.textColor = UIColor.gray
        lab.font = UIFont.init(name: "iconfont", size: 14)
        lab.textAlignment = NSTextAlignment.center
        lab.text = "统计分"
        return lab
    }()
    //最终分
    lazy var lab_sumscore :UILabel = {
        let lab = UILabel()
        lab.textColor = UIColor.gray
        lab.font = UIFont.init(name: "iconfont", size: 14)
        lab.textAlignment = NSTextAlignment.center
        lab.text = "最终分"
        return lab
    }()


    lazy var courseOpenId :String = {
        return ""
    }()
    lazy var openClassId :String = {
        return ""
    }()
    lazy var stuId :String = {
        return ""
    }()
    lazy var json :JSON={return []}();
    var tableView :UITableView!
    var isStu = 0
    fileprivate lazy var isPused :Bool = {return false}()
}
