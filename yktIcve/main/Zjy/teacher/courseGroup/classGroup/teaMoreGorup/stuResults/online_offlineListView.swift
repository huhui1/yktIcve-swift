//
//  online_offlineListView.swift
//  云课堂-职教云
//
//  Created by zqy on 2018/3/26.
//  Copyright © 2018年 zqy. All rights reserved.
//


import UIKit
import WebKit
import SwiftyJSON
class online_offlineListView: UIViewController,UIScrollViewDelegate  {
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.title = "线上/线下 详情"
        self.view.backgroundColor = UIColor.white
        self.setUI()
        self.getStuScoreDetail()
        
    }
    
    func setUI(){
        self.scrollView.frame = self.view.frame
        self.scrollView.delegate = self
        self.view.addSubview(scrollView)
        self.scrollView.contentSize = CGSize.init(width: width, height: height + 50)
        self.scrollView.addSubview(view_online)
        self.scrollView.addSubview(lab_online)
        self.scrollView.addSubview(view_bg)
        self.view_bg.addSubview(lab_learningprocess)
        self.view_bg.addSubview(lab_Number)
        self.view_bg.addSubview(lab_learningtime)
        self.view_bg.addSubview(lab_learningscore)
        self.scrollView.addSubview(progressBar)
        self.scrollView.addSubview(progresstext)
        self.scrollView.addSubview(Number)
        self.scrollView.addSubview(learningtime)
        self.scrollView.addSubview(learningscore)
        
        self.scrollView.addSubview(view_bg1)
        self.view_bg1.addSubview(lab_levaluation)
        self.view_bg1.addSubview(lab_Questionandanswer)
        self.view_bg1.addSubview(lab_notes)
        self.view_bg1.addSubview(lab_Errorcorrection)
        self.scrollView.addSubview(levaluation)
        self.scrollView.addSubview(Questionandanswer)
        self.scrollView.addSubview(notes)
        self.scrollView.addSubview(Errorcorrection)

        self.scrollView.addSubview(view_offline)
        self.scrollView.addSubview(lab_offline)

        self.scrollView.addSubview(view_bg2)
        self.view_bg2.addSubview(lab_attendance)
        self.view_bg2.addSubview(lab_takepartin)
        self.view_bg2.addSubview(lab_Classperformancescore)
        self.view_bg2.addSubview(lab_Testaverage)
        self.view_bg2.addSubview(lab_score)

        self.scrollView.addSubview(attendance)
        self.scrollView.addSubview(takepartin)
        self.scrollView.addSubview(Classperformancescore)
        self.scrollView.addSubview(Testaverage)
        self.scrollView.addSubview(score)

        //绘制图形
        let trianglePath = UIBezierPath()
        let triangleLayer = CAShapeLayer()
        //change the CGPoint values to get the triangle of the shape you want
        trianglePath.move(to: CGPoint(x: 0, y: 0))
        trianglePath.addLine(to: CGPoint(x: 0, y: 30))
        trianglePath.addLine(to: CGPoint(x: 40, y: 30))
        trianglePath.addLine(to: CGPoint(x: 60, y: 15))
        trianglePath.addLine(to: CGPoint(x: 40, y: 0))
        trianglePath.addLine(to: CGPoint(x: 0, y: 0))
        triangleLayer.path = trianglePath.cgPath
        triangleLayer.fillColor = UIColor.bg.cgColor
        view_online.layer.addSublayer(triangleLayer)

        let triangPath = UIBezierPath()
        let triangLayer = CAShapeLayer()
        //change the CGPoint values to get the triangle of the shape you want
        triangPath.move(to: CGPoint(x: 0, y: 0))
        triangPath.addLine(to: CGPoint(x: 0, y: 30))
        triangPath.addLine(to: CGPoint(x: 40, y: 30))
        triangPath.addLine(to: CGPoint(x: 60, y: 15))
        triangPath.addLine(to: CGPoint(x: 40, y: 0))
        triangPath.addLine(to: CGPoint(x: 0, y: 0))
        triangLayer.path = trianglePath.cgPath
        triangLayer.fillColor = UIColor.bg.cgColor
        view_offline.layer.addSublayer(triangLayer)

        self.view_online.snp.makeConstraints { (make) in
            make.width.equalTo(65)
            make.height.equalTo(40)
            make.left.equalTo(3)
            make.top.equalTo(8)
        }
        self.lab_online.snp.makeConstraints { (make) in
            make.width.equalTo(65)
            make.height.equalTo(40)
            make.left.equalTo(7)
            make.top.equalTo(4)
        }
        self.view_bg.snp.makeConstraints { (make) in
            make.width.equalTo(width)
            make.left.equalTo(0)
            make.height.equalTo(55)
            make.top.equalTo(self.view_online.snp.bottom).offset(1)
        }
        self.lab_learningprocess.snp.makeConstraints { (make) in
            make.width.equalTo(width / 4)
            make.left.equalTo(0)
            make.height.equalTo(40)
            make.centerY.equalTo(self.view_bg.snp.centerY)
        }
        self.lab_learningtime.snp.makeConstraints { (make) in
            make.width.height.centerY.equalTo(lab_learningprocess)
            make.left.equalTo(lab_learningprocess.snp.right)

        }
        self.lab_Number.snp.makeConstraints { (make) in
            make.width.height.centerY.equalTo(lab_learningprocess)
            make.left.equalTo(lab_learningtime.snp.right)
        }
        self.lab_learningscore.snp.makeConstraints { (make) in
            make.width.height.centerY.equalTo(lab_learningprocess)
            make.left.equalTo(lab_Number.snp.right)
        }

        
        
        self.progressBar.snp.makeConstraints { (make) in
            make.width.equalTo(width / 4 - 40)
            make.left.equalTo(0)
            make.height.equalTo(10)
            make.top.equalTo(self.view_bg.snp.bottom).offset(15)
        }
        
        self.progressBar.layer.masksToBounds = true
        self.progressBar.layer.cornerRadius = 4
        self.progressBar.layer.borderColor = UIColor.bg.cgColor
        self.progressBar.layer.borderWidth = 0.4
        
        self.progresstext.snp.makeConstraints { (make) in
            make.width.equalTo(40)
            make.left.equalTo(self.progressBar.snp.right)
            make.height.equalTo(40)
            make.top.equalTo(self.view_bg.snp.bottom)
        }
        
        self.learningtime.snp.makeConstraints { (make) in
            make.width.equalTo(width / 4)
            make.height.equalTo(40)
            make.top.equalTo(self.view_bg.snp.bottom)
            make.left.equalTo(progressBar.snp.right).offset(40)
        }
        self.Number.snp.makeConstraints { (make) in
            make.width.height.centerY.equalTo(learningtime)
            make.left.equalTo(learningtime.snp.right)
        }
        self.learningscore.snp.makeConstraints { (make) in
            make.width.height.centerY.equalTo(learningtime)
            make.left.equalTo(Number.snp.right)
        }
        
        


        self.view_bg1.snp.makeConstraints { (make) in
            make.width.height.left.equalTo(view_bg)
            make.top.equalTo(self.learningtime.snp.bottom).offset(3)
        }
        self.lab_levaluation.snp.makeConstraints { (make) in
            make.width.equalTo(width / 4)
            make.left.equalTo(0)
            make.height.equalTo(40)
            make.centerY.equalTo(self.view_bg1.snp.centerY)
        }
        self.lab_Questionandanswer.snp.makeConstraints { (make) in
            make.width.height.centerY.equalTo(lab_levaluation)
            make.left.equalTo(lab_levaluation.snp.right)
        }
        self.lab_notes.snp.makeConstraints { (make) in
            make.width.height.centerY.equalTo(lab_levaluation)
            make.left.equalTo(lab_Questionandanswer.snp.right)
        }
        self.lab_Errorcorrection.snp.makeConstraints { (make) in
            make.width.height.centerY.equalTo(lab_notes)
            make.left.equalTo(lab_notes.snp.right)
        }

        self.levaluation.snp.makeConstraints { (make) in
            make.width.equalTo(width / 4)
            make.left.equalTo(0)
            make.height.equalTo(40)
            make.top.equalTo(self.view_bg1.snp.bottom)
        }
        self.Questionandanswer.snp.makeConstraints { (make) in
            make.width.height.centerY.equalTo(levaluation)
            make.left.equalTo(levaluation.snp.right)
        }
        self.notes.snp.makeConstraints { (make) in
            make.width.height.centerY.equalTo(Questionandanswer)
            make.left.equalTo(Questionandanswer.snp.right)
        }
        self.Errorcorrection.snp.makeConstraints { (make) in
            make.width.height.centerY.equalTo(notes)
            make.left.equalTo(notes.snp.right)
        }

        //线下
        self.view_offline.snp.makeConstraints { (make) in
            make.width.equalTo(65)
            make.height.equalTo(40)
            make.left.equalTo(3)
            make.top.equalTo(self.levaluation.snp.bottom).offset(5)
        }
        self.lab_offline.snp.makeConstraints { (make) in
            make.width.equalTo(65)
            make.height.equalTo(40)
            make.left.equalTo(7)
            make.top.equalTo(self.levaluation.snp.bottom).offset(1)
        }

        self.view_bg2.snp.makeConstraints { (make) in
            make.width.height.left.equalTo(view_bg)
            make.top.equalTo(self.view_offline.snp.bottom).offset(3)
        }
        self.view_bg2.addSubview(lab_attendance)
        self.view_bg2.addSubview(lab_takepartin)
        self.view_bg2.addSubview(lab_Classperformancescore)
        self.view_bg2.addSubview(lab_Testaverage)
        self.view_bg2.addSubview(lab_score)

        self.lab_attendance.snp.makeConstraints { (make) in
            make.width.equalTo(width / 5)
            make.left.equalTo(0)
            make.height.equalTo(40)
            make.centerY.equalTo(self.view_bg2.snp.centerY)
        }
        self.lab_takepartin.snp.makeConstraints { (make) in
            make.width.height.centerY.equalTo(lab_attendance)
            make.left.equalTo(lab_attendance.snp.right)
        }
        self.lab_Classperformancescore.snp.makeConstraints { (make) in
            make.width.equalTo(lab_attendance)
            make.height.equalTo(50)
            make.top.equalTo(self.view_bg2.snp.top).offset(5)
            make.left.equalTo(lab_takepartin.snp.right)
        }
        self.lab_Testaverage.snp.makeConstraints { (make) in
            make.width.equalTo(lab_attendance)
            make.height.equalTo(50)
            make.top.equalTo(self.view_bg2.snp.top).offset(5)
            make.left.equalTo(lab_Classperformancescore.snp.right)
        }
        self.lab_score.snp.makeConstraints { (make) in
            make.width.height.centerY.equalTo(lab_attendance)
            make.left.equalTo(lab_Testaverage.snp.right)
        }

        self.attendance.snp.makeConstraints { (make) in
            make.width.equalTo(width / 5)
            make.left.equalTo(0)
            make.height.equalTo(40)
            make.top.equalTo(self.lab_attendance.snp.bottom)
        }
        self.takepartin.snp.makeConstraints { (make) in
            make.width.height.centerY.equalTo(attendance)
            make.left.equalTo(attendance.snp.right)
        }
        self.Classperformancescore.snp.makeConstraints { (make) in
            make.width.height.centerY.equalTo(attendance)
            make.left.equalTo(takepartin.snp.right)
        }
        self.Testaverage.snp.makeConstraints { (make) in
            make.width.height.centerY.equalTo(attendance)
            make.left.equalTo(Classperformancescore.snp.right)
        }
        self.score.snp.makeConstraints { (make) in
            make.width.height.centerY.equalTo(attendance)
            make.left.equalTo(Testaverage.snp.right)
        }
    }
    
    
 
    
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    
    lazy var onlinejson :JSON = {
        return []
    }()
    lazy var offlinejson :JSON = {
        return []
    }()
    var PostCount = 0
    var PostPercent = 0
    
    //线上
    lazy var view_online :UIView = {
        let view = UIView()
        return view
    }()
    
    lazy var lab_online :UILabel = {
        let lab = UILabel()
        lab.font = UIFont.systemFont(ofSize: 18)
        lab.text = "线上"
        lab.textColor = UIColor.white
        return lab
    }()
    //背景view
    lazy var view_bg :UIView = {
        let view = UIView()
        view.backgroundColor = UIColor.colorWithHex(hexColor: 0xf2f2f2)
        return view
    }()
    //学习进度
    lazy var lab_learningprocess :UILabel = {
        let lab = UILabel()
        lab.font = UIFont.systemFont(ofSize: 18)
        lab.text = "学习进度"
        lab.textColor = UIColor.gray
        lab.textAlignment = .center
        return lab
    }()
    //学习时长
    lazy var lab_learningtime :UILabel = {
        let lab = UILabel()
        lab.font = UIFont.systemFont(ofSize: 18)
        lab.textColor = UIColor.gray
        lab.textAlignment = .center
        return lab
    }()
    //发帖数
    lazy var lab_Number :UILabel = {
        let lab = UILabel()
        lab.font = UIFont.systemFont(ofSize: 18)
        lab.textColor = UIColor.gray
        lab.textAlignment = .center
        return lab
    }()
    //得分
    lazy var lab_learningscore :UILabel = {
        let lab = UILabel()
        lab.font = UIFont.systemFont(ofSize: 18)
        lab.textColor = UIColor.gray
        lab.textAlignment = .center
        lab.text = "得分"
        return lab
    }()
    //学习进度条
    lazy var progressBar : UIProgressView = {
        let progress = UIProgressView()
        progress.progress = 0
        progress.setProgress(0, animated: true)
        progress.progressTintColor = UIColor.bg
        progress.trackTintColor = UIColor.clear
        return progress
    }()
    
    lazy var progresstext :UILabel = {
        let lab = UILabel()
        lab.font = UIFont.systemFont(ofSize: 18)
        lab.textColor = UIColor.gray
        lab.textAlignment = .left
        lab.textColor = UIColor.bg
        return lab
    }()
    
    lazy var learningtime :UILabel = {
        let lab = UILabel()
        lab.font = UIFont.systemFont(ofSize: 18)
        lab.textColor = UIColor.gray
        lab.textAlignment = .center
        return lab
    }()
  
    lazy var Number :UILabel = {
        let lab = UILabel()
        lab.font = UIFont.systemFont(ofSize: 18)
        lab.textColor = UIColor.gray
        lab.textAlignment = .center
        return lab
    }()

    lazy var learningscore :UILabel = {
        let lab = UILabel()
        lab.font = UIFont.systemFont(ofSize: 18)
        lab.textColor = UIColor.gray
        lab.textAlignment = .center
        return lab
    }()
    
    //背景view
    lazy var view_bg1 :UIView = {
        let view = UIView()
        view.backgroundColor = UIColor.colorWithHex(hexColor: 0xf2f2f2)
        return view
    }()
    
    //评价
    lazy var lab_levaluation :UILabel = {
        let lab = UILabel()
        lab.font = UIFont.systemFont(ofSize: 18)
        lab.textColor = UIColor.gray
        lab.textAlignment = .center
        lab.text = "评价"
        return lab
    }()
    //问答
    lazy var lab_Questionandanswer :UILabel = {
        let lab = UILabel()
        lab.font = UIFont.systemFont(ofSize: 18)
        lab.textColor = UIColor.gray
        lab.textAlignment = .center
        return lab
    }()
    //笔记
    lazy var lab_notes :UILabel = {
        let lab = UILabel()
        lab.font = UIFont.systemFont(ofSize: 18)
        lab.textColor = UIColor.gray
        lab.textAlignment = .center
        return lab
    }()
    //纠错
    lazy var lab_Errorcorrection :UILabel = {
        let lab = UILabel()
        lab.font = UIFont.systemFont(ofSize: 18)
        lab.textColor = UIColor.gray
        lab.textAlignment = .center
        return lab
    }()
    

    lazy var levaluation :UILabel = {
        let lab = UILabel()
        lab.font = UIFont.systemFont(ofSize: 18)
        lab.textColor = UIColor.gray
        lab.textAlignment = .center
        return lab
    }()

    lazy var Questionandanswer :UILabel = {
        let lab = UILabel()
        lab.font = UIFont.systemFont(ofSize: 18)
        lab.textColor = UIColor.gray
        lab.textAlignment = .center
        return lab
    }()

    lazy var notes :UILabel = {
        let lab = UILabel()
        lab.font = UIFont.systemFont(ofSize: 18)
        lab.textColor = UIColor.gray
        lab.textAlignment = .center
        return lab
    }()

    lazy var Errorcorrection :UILabel = {
        let lab = UILabel()
        lab.font = UIFont.systemFont(ofSize: 18)
        lab.textColor = UIColor.gray
        lab.textAlignment = .center
        return lab
    }()
    //线下
    lazy var view_offline :UIView = {
        let view = UIView()
        return view
    }()
    
    lazy var lab_offline :UILabel = {
        let lab = UILabel()
        lab.font = UIFont.systemFont(ofSize: 18)
        lab.textColor = UIColor.gray
        lab.text = "线下"
        lab.textColor = UIColor.white
        return lab
    }()
    
    //背景view
    lazy var view_bg2 :UIView = {
        let view = UIView()
        view.backgroundColor = UIColor.colorWithHex(hexColor: 0xf2f2f2)
        return view
    }()

    //考勤
    lazy var lab_attendance :UILabel = {
        let lab = UILabel()
        lab.font = UIFont.systemFont(ofSize: 18)
        lab.textAlignment = .center
        lab.textColor = UIColor.gray
        lab.text = "考勤"
        return lab
    }()
    //参与
    lazy var lab_takepartin :UILabel = {
        let lab = UILabel()
        lab.font = UIFont.systemFont(ofSize: 18)
        lab.textColor = UIColor.gray
        lab.textAlignment = .center
        return lab
    }()
    //课堂表现分
    lazy var lab_Classperformancescore :UILabel = {
        let lab = UILabel()
        lab.font = UIFont.systemFont(ofSize: 18)
        lab.textColor = UIColor.gray
        lab.textAlignment = .center
        lab.numberOfLines = 2
        return lab
    }()
    //测验平均分
    lazy var lab_Testaverage :UILabel = {
        let lab = UILabel()
        lab.font = UIFont.systemFont(ofSize: 18)
        lab.textColor = UIColor.gray
        lab.numberOfLines = 2
        lab.textAlignment = .center
        return lab
    }()
    //得分
    lazy var lab_score :UILabel = {
        let lab = UILabel()
        lab.font = UIFont.systemFont(ofSize: 18)
        lab.textColor = UIColor.gray
        lab.text = "得分"
        lab.textAlignment = .center
        return lab
    }()
    
 
    lazy var attendance :UILabel = {
        let lab = UILabel()
        lab.font = UIFont.systemFont(ofSize: 18)
        lab.textColor = UIColor.gray
        lab.textAlignment = .center
        return lab
    }()

    lazy var takepartin :UILabel = {
        let lab = UILabel()
        lab.font = UIFont.systemFont(ofSize: 18)
        lab.textColor = UIColor.gray
        lab.textAlignment = .center
        return lab
    }()

    lazy var Classperformancescore :UILabel = {
        let lab = UILabel()
        lab.font = UIFont.systemFont(ofSize: 18)
        lab.textColor = UIColor.gray
        lab.textAlignment = .center
        return lab
    }()

    lazy var Testaverage :UILabel = {
        let lab = UILabel()
        lab.font = UIFont.systemFont(ofSize: 18)
        lab.textColor = UIColor.gray
        lab.textAlignment = .center
        return lab
    }()

    lazy var score :UILabel = {
        let lab = UILabel()
        lab.font = UIFont.systemFont(ofSize: 18)
        lab.textColor = UIColor.gray
        lab.textAlignment = .center
        return lab
    }()
    
    lazy var scrollView :UIScrollView = {
        let scrollView = UIScrollView()
        return scrollView
    }()
    
    lazy var stuId: String = {
      return ""
    }()
    lazy var state: Int = {
        return 0
    }()
    lazy var courseOpenId: String = {
        return""
    }()
    lazy var openClassId: String = {
        return ""
    }()
    let width = UIScreen.main.bounds.width;
    let height = UIScreen.main.bounds.height;
    
}
