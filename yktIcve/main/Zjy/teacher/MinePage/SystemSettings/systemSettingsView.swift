//
//  systemSettingsView.swift
//  云课堂2
//
//  Created by 志辉教育 on 2018/7/18.
//  Copyright © 2018年 zqyou. All rights reserved.
//

import UIKit

class systemSettingsView: UIViewController {
    
    lazy var cache:UILabel = {
        let lab = UILabel()
        lab.backgroundColor = UIColor.white
        lab.font = UIFont.init(name: "HelveticaNeue-Light", size: 16)
        lab.textColor = UIColor.gray
        return lab
    }()

    
    
    @IBOutlet weak var lab_check: UILabel!
    @IBOutlet var lab_version: UILabel!
    @IBOutlet var btn_about: UIButton!
    @IBOutlet var btn_check: UIButton!
    @IBOutlet var btn_changePassword: UIButton!
    @IBOutlet var btn_share: UIButton!
    override func viewDidLoad() {
        super.viewDidLoad()
        self.title = "设置"
        // Do any additional setup after loading the view.
        self.setBtniconfont()
        let item = UIBarButtonItem(title: "返回", style: .plain, target: self, action: nil)
        self.navigationItem.backBarButtonItem = item
        let currentVersion = Bundle.main.infoDictionary!["CFBundleShortVersionString"] as! String
        self.lab_version.text = "当前版本:\(currentVersion)"
       
    }
    init() {
        super.init(nibName: "systemSettingsView", bundle: nil)
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    func  setBtniconfont(){
        self.btn_share.titleLabel?.font = UIFont.init(name: "iconfont", size:20)
        self.btn_changePassword.titleLabel?.font = UIFont.init(name: "iconfont", size:20)
        self.btn_check.titleLabel?.font = UIFont.init(name: "iconfont", size:20)
        self.btn_about.titleLabel?.font = UIFont.init(name: "iconfont", size:20)
        
        self.btn_share.setTitle("\u{e609}", for: .normal)
        self.btn_changePassword.setTitle("\u{e609}", for: .normal)
//        self.btn_check.setTitle("\u{e609}", for: .normal)
        self.btn_about.setTitle("\u{e609}", for: .normal)
        
        self.btn_check.addSubview(self.cache)
        self.cache.snp.makeConstraints { (make) in
            make.width.equalTo(100)
            make.height.equalTo(20)
            make.centerY.equalTo(self.btn_check)
            make.right.equalTo(self.btn_check.snp.right).offset(-5)
        }
        self.cache.textAlignment = .right
        self.cache.text = "\(self.fileSizeOfCache().description)MB"
    }
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    
    @IBAction func share(_ sender: Any) {
        print("分享")
        let previwe = shareCanopyViewController()
        previwe.view.backgroundColor = UIColor(red: 0, green: 0, blue: 0, alpha: 0);
        self.present(previwe, animated:true, completion:nil)
    }
    @IBAction func about(_ sender: Any) {
        print("关于")
        let vc = aboutView()
        vc.modalTransitionStyle = .crossDissolve
        self.navigationController?.pushViewController(vc, animated: true)
    }
    @IBAction func check(_ sender: Any) {
        print("清除缓存")
        self.clearCacheBtnClick()
    }
    @IBAction func changePassword(_ sender: Any) {
        let vc = modiftyPwdViewController();
        
        vc.title = "密码修改";
        vc.modalTransitionStyle = .crossDissolve
        self.navigationController?.pushViewController(vc, animated: true)
    }
  
    
    //清除缓存
    func clearCacheBtnClick(){
        let alertController = UIAlertController(title: "提示",
                                                message:"确定要删除所有的缓存吗？", preferredStyle: .alert)
        let cancelAction = UIAlertAction(title: "取消", style: .cancel, handler: nil)
        
        let okAction = UIAlertAction(title: "确定", style: .destructive, handler: {
            action in
            self.clearCache()
        })
        alertController.addAction(cancelAction)
        alertController.addAction(okAction)
        self.present(alertController, animated: true, completion: nil)
    }
    //统计缓存
    func fileSizeOfCache()-> Int {
        // 取出cache文件夹目录 缓存文件都在这个目录下
        let cachePath = NSSearchPathForDirectoriesInDomains(FileManager.SearchPathDirectory.cachesDirectory, FileManager.SearchPathDomainMask.userDomainMask, true).first
        //缓存目录路径
        // 取出文件夹下所有文件数组
        let fileArr = FileManager.default.subpaths(atPath: cachePath!)
        //快速枚举出所有文件名 计算文件大小
        var size = 0
        for file in fileArr! {
            // 把文件名拼接到路径中
            let path = (cachePath! as NSString).appending("/\(file)")
            // 取出文件属性
            let floder = try! FileManager.default.attributesOfItem(atPath: path)
            // 用元组取出文件大小属性
            for (abc, bcd) in floder {
                // 累加文件大小
                if abc == FileAttributeKey.size {
                    size += (bcd as AnyObject).integerValue
                }
            }
        }
        let mm = size / 1024 / 1024
        return mm
    }
    //清除缓存
    func clearCache() {
        // 取出cache文件夹目录 缓存文件都在这个目录下
        let cachePath = NSSearchPathForDirectoriesInDomains(FileManager.SearchPathDirectory.cachesDirectory, FileManager.SearchPathDomainMask.userDomainMask, true).first
        // 取出文件夹下所有文件数组
        let fileArr = FileManager.default.subpaths(atPath: cachePath!)
        // 遍历删除
        for file in fileArr! {
            let path = (cachePath! as NSString).appending("/\(file)")
            if FileManager.default.fileExists(atPath: path) {
                do {
                    try FileManager.default.removeItem(atPath: path)
                } catch {
                    
                }
            }
        }
        self.cache.text = "\(self.fileSizeOfCache().description)MB"
    }

}
