//
//  CourseBBSDetailsView.swift
//  云课堂职教云
//
//  Created by 尤增强 on 2018/3/30.
//  Copyright © 2018年 jcjy. All rights reserved.
//

import UIKit
import  SwiftyJSON
import WebKit

class CourseBBSDetailsView: UIViewController,WKScriptMessageHandler {


    var courseBBSAction : CourseBBSAction?
    override func viewDidLoad() {
        super.viewDidLoad()
        self.view.backgroundColor = UIColor.white
        self.setSubWebUI()
        let deleteItem = UIBarButtonItem(title: "\u{e62c}", style: .plain, target: self, action: #selector(self.isDelete))
//        let deleteItem=UIBarButtonItem(title: UIBarButtonSystemItem.trash, target: self, action: #selector(self.deleleBBS))
        self.navigationItem.rightBarButtonItem = deleteItem
        common.share.setdeleteButtonItem(item: deleteItem)
        // Do any additional setup after loading the view.
    }


    fileprivate func setSubWebUI(){

        let path = Bundle.main.path(forResource: "list", ofType: ".html",
                                    inDirectory: "HTML5/src/teacher/host");

        let url = URL(fileURLWithPath:path!);
        //let request = URLRequest(url:url);

        //创建供js调用的接口
        let theConfiguration = WKWebViewConfiguration()
        theConfiguration.userContentController.add(self, name: "interOp")

        //将浏览器视图全屏(在内容区域全屏,不占用顶端时间条)
//        let frame = view.frame
        let frame = CGRect(x:0, y:0, width:UIScreen.main.bounds.width,
                           height:UIScreen.main.bounds.height + CGFloat(HX))
        theWebView = WKWebView(frame:frame, configuration: theConfiguration)
        //禁用页面在最顶端时下拉拖动效果
        theWebView!.scrollView.bounces = false;
//        theWebView?.scrollView.isScrollEnabled = false;

        //加载页面
        if #available(iOS 9.0, *) {
            
            theWebView?.loadFileURL(url, allowingReadAccessTo: url)
        } else {
            
            do{
                
                let url1 = try common.share.fileURLForBuggyWKWebView8(fileURL:url as NSURL)
                let request = URLRequest(url:url1 as URL);
                theWebView?.load(request)
                
            }catch{}
        }
        //theWebView!.load(request)
        self.view.addSubview(theWebView!);
    }


    func userContentController(_ userContentController: WKUserContentController, didReceive message: WKScriptMessage) {
         let sentData = message.body as! Dictionary<String,String>
        if(sentData["method"] == "load"){
            self.theWebView!.evaluateJavaScript("list.setContent('\(evaluation.userId)','\(self.activeType)','\(evaluation.star)','\(evaluation.displayName)',\(self.isMainTeacher),'\(evaluation.avatorUrl)','\(evaluation.dateCreated)',\(evaluation.docJson),\(evaluation.isAccept),'\(evaluation.content)')",
                completionHandler: nil)
            self.getCellBBSReplyList()
        }else if(sentData["method"] == "preview"){

            let vc = PicturePreviewView()
            vc.imgurl = sentData["url"]!
            self.navigationController?.pushViewController(vc, animated: true)
        }else if(sentData["method"] == "reply"){
            self.reply(userId:sentData["replyToUserId"]!, userDisplyName: sentData["replyToDisplayName"]!)
        }else if (sentData["method"] == "del"){
            self.delBBS(Id:sentData["Id"]!, userId:sentData["userId"]!)
        }

    }

    override func viewWillDisappear(_ animated: Bool) {
        if(!self.isPushed){
            theWebView?.configuration.userContentController.removeScriptMessageHandler(forName: "interOp")
        }
        self.isPushed = false
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    var openClassId = "";
    var courseOpenId = "";
    var cellId = "";
    
    var activeType = 1;
   
    var evaluation:evaluationModel!
    var isMainTeacher = 0
    var theWebView:WKWebView?;
    lazy var isPushed:Bool = {
        return false
    }()
//    var reloadBBSListClosure :(() ->Void)?
    let HX = common.share.returnSafeAreaLineHeight()
}
