//
//  createCourseBBSViewController.swift
//  云课堂职教云
//
//  Created by 尤增强 on 2018/3/30.
//  Copyright © 2018年 jcjy. All rights reserved.
//

import UIKit
import SwiftyJSON
import Alamofire

extension createCourseBBSView {

    //添加主题
   @objc func addBBs(){

        let content = self.contenText.text
        if self.activeType == "1" && self.StarNum <= 0{
            ZKProgressHUD.showMessage("请输入分数")
            return
        }
        if( (content?.count)! < 1 ){
            ZKProgressHUD.showMessage("请输入内容")
            return
        }else if((content?.count)! > 300){
            ZKProgressHUD.showMessage("内容超过限制，请简化描述！")
            return
        }
        var  DocJson = [Dictionary<String,String>]()
        for i in self.imgList{
            if(!i.docUrl.isEmpty){
                let d = ["docTitle":i.docTitle,"docUrl":i.docUrl]
                DocJson.append(d)
            }
        }
        
        var dict = ["CourseOpenId":self.courseOpenId,
                    "OpenClassId":self.openClassId,
                    "CellId":self.cellId,
                    "UserId":Account.defaultAccount.id!,
                    "Content":content,
                    "DocJson":JSON(DocJson).description,
                    "SourceType":3] as [String : Any];
        if self.activeType == "1" {
            dict = ["CourseOpenId":self.courseOpenId,
                    "OpenClassId":self.openClassId,
                    "CellId":self.cellId,
                    "UserId":Account.defaultAccount.id!,
                    "Content":content,
                    "DocJson":JSON(DocJson).description,
                    "SourceType":3,"Star":self.StarNum] as [String : Any];
        }

        let data = ["data":JSON.init(dict)]
        let appurl =  ["", appAPI.BBS_addCellComment, appAPI.BBS_addCellAskAnswer, appAPI.BBS_addCellNote,appAPI.BBS_addCellError];


        XLBallLoading.show(in: self.view)
        Alamofire.request(appurl[Int(self.activeType)!], method: .post, parameters: data, encoding: URLEncoding.default).responseJSON { response in

            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{
                    self.reloadParentView()
                }else{
                    ZKProgressHUD.showError(json["msg"].stringValue);
                }
                XLBallLoading.hide(in: self.view)
            }else{
                ZKProgressHUD.showError("网络环境异常请稍后再试！");
                XLBallLoading.hide(in: self.view)
            }
        }
    }

    override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {
        self.contenText.resignFirstResponder();
    }

    //操作成功后刷新
    func reloadParentView(){
        if(self.courseBBSAction == nil){
            let count = self.navigationController?.viewControllers.count
            if let vc :CourseBBSDetailsView = self.navigationController?.viewControllers[count! - 2] as? CourseBBSDetailsView{
                vc.getCellBBSReplyList()
            }
        }else{
            self.courseBBSAction?.actionType = Int(self.activeType)!
            self.courseBBSAction?.ActionName = "refresh"
        }
        self.navigationController?.popViewController(animated: true)
    }
    //底部弹窗
    func uploadImg(){
        //判断是否开启打开相册权限
        if(!common.share.isAuthorizePhotos()){
            common.share.authorizePhotos()
        }else{
            self.upload()
        }
    }
    //底部弹窗
    func upload(){
        if( self.uploadUrl.isEmpty){
            common.share.getUploadUrl();
        }
        let userIconAlert = UIAlertController(title: "请选择操作",
                                              message: "", preferredStyle: UIAlertControllerStyle.actionSheet)

        let chooseFromPhotoAlbum = UIAlertAction(title: "从相册选择", style: UIAlertActionStyle.default, handler: funcChooseFromPhotoAlbum)
        userIconAlert.addAction(chooseFromPhotoAlbum)

        let chooseFromCamera = UIAlertAction(title: "拍照", style: UIAlertActionStyle.default,handler:funcChooseFromCamera)
        userIconAlert.addAction(chooseFromCamera)

        let canelAction = UIAlertAction(title: "取消", style: UIAlertActionStyle.cancel,handler: nil)
        userIconAlert.addAction(canelAction)

        if(UIDevice.current.model == "iPad")
        {
            let mine = UIView.init(frame: CGRect(x:self.view.bounds.width/2,y:self.view.bounds.height,width:20,height:20))
            self.view.addSubview(mine)
            let popPresenter =  userIconAlert.popoverPresentationController

            popPresenter?.sourceView = mine
            popPresenter?.sourceRect = mine.bounds
            self.present(userIconAlert, animated: true, completion: nil)
        }
        else{
            self.present(userIconAlert, animated: true, completion: nil)
        }
    }
    //从相册选择照片
    func funcChooseFromPhotoAlbum(_ avc:UIAlertAction) -> Void{
        let masterVC = HsuAlbumMasterTableViewController()
        let navi = UINavigationController(rootViewController: masterVC)
        masterVC.title = "图片"
        let gridVC = HsuAssetGridViewController()
        gridVC.title = "所有图片"
        let leftBarBtn = UIBarButtonItem(title: "", style: .plain, target: self,
                                         action:nil)
        gridVC.navigationItem.leftBarButtonItem = leftBarBtn
        navi.pushViewController(gridVC, animated: false)

        UIDevice.current.setValue(UIInterfaceOrientation.landscapeLeft.rawValue, forKey: "orientation")
        present(navi, animated: true)

        HandleSelectionPhotosManager.share.getSelectedPhotos(with: 1) { (assets, images) in


            self.upload(img: images[0])
        }
    }

    func funcChooseFromCamera(_ avc:UIAlertAction) -> Void{
        if UIImagePickerController.isSourceTypeAvailable(UIImagePickerControllerSourceType.camera) {
            let imagePicker = UIImagePickerController()

            //设置代理
            imagePicker.delegate = self
            //允许编辑
            imagePicker.isEditing = false;
            //设置图片源
            imagePicker.sourceType = UIImagePickerControllerSourceType.camera
            //模态弹出IamgePickerView

            self.present(imagePicker, animated: true, completion: nil)

        }else{
            print("模拟器不支持拍照功能")
        }
    }
    func imagePickerControllerDidCancel(_ picker: UIImagePickerController){
        picker.dismiss(animated: true, completion: nil)
    }
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : Any]) {
        //获取照片的原图
        let image = (info as NSDictionary).object(forKey: UIImagePickerControllerOriginalImage)as!UIImage
        //获得编辑后的图片
        //let image = (info as NSDictionary).object(forKey: UIImagePickerControllerEditedImage)as!UIImage


        self.upload(img: image);

        picker.dismiss(animated: true, completion: nil)
    }
    //上传
    func upload(img:UIImage)
    {
        self.uploadUrl = appAPI.uploadUrl;

        let fileManager = FileManager.default
        let rootPath = NSSearchPathForDirectoriesInDomains(.documentDirectory,
                                                           .userDomainMask, true)[0] as String
        let date = NSDate(),
        timeInterval = date.timeIntervalSince1970 * 1000
        let filePath = "\(rootPath)/" + String(timeInterval) + ".jpg"
        let  imageData =  common.share.resetImgSize(sourceImage: img, maxImageLenght: 0, maxSizeKB: 200)
        fileManager.createFile(atPath: filePath, contents: imageData, attributes: nil)
        let imageNSURL = URL.init(fileURLWithPath: filePath)
         ZKProgressHUD.show("0.0%")
        Alamofire.upload(multipartFormData: { multipartFormData in
            multipartFormData.append(imageNSURL, withName: "file1")
        },to: self.uploadUrl,encodingCompletion: { encodingResult in
            switch encodingResult {
            case .success(let upload, _, _):
                upload.responseJSON { response in
                    let result = JSON(response.result.value ?? "");

                    self.setModelToList(result: result, img: img, docTitle: "\(timeInterval).jpg")
                    ZKProgressHUD.hide(delay: 0)
                    }.uploadProgress { progress in
                        // main queue by default
                        ZKProgressHUD.show("\(String(format: "%.1f", progress.fractionCompleted * 100)) %")
                }
            case .failure(let encodingError):
                print(encodingError)
            }
        })
    }
    
    //model加入数组
    func setModelToList(result:JSON,img:UIImage,docTitle:String){
        
        
        let m = UploadDocModel.init(data: result,type:"jpg",img: img, docTitle:docTitle)
        self.imgList.append(m)
        if(self.imgList.count == self.maxImgCount + 1){
            self.imgList.remove(at: 0)
        }
        self.collectionView.reloadData()
        
    }


}
