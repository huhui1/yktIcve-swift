//
//  studyView.swift
//  66iclasscloud
//
//  Created by 尤增强 on 2018/2/5.
//  Copyright © 2018年 zqy. All rights reserved.
//

import UIKit
import SwiftyJSON
import SDWebImage
class studyView: UIViewController ,UITableViewDelegate,UITableViewDataSource{
    let height = UIScreen.main.bounds.height;
    let width = UIScreen.main.bounds.width
    var list :NSArray = [];
    //老师我的学习时使用
    var isTeacher = false
    var isTeacherHt = 0
    var H = 0
    
    
    
    var tableView:UITableView!

    lazy var user :String = {
        let str: String = String();
        return str;
    }()
    var ht = 0
    lazy var classState:Int = {
        return 0
    }()
    lazy var guiDangList :NSArray = {
        return [];
    }()
    lazy var unGuiDangList :NSArray = {
        return [];
    }()
    lazy var view_headview :UIView = {
        let view = UIView()
        view.backgroundColor = UIColor.white
        return view
    }()
    
    lazy var btn_screen : UIButton = {
        let btn = UIButton()
        btn.setTitle("\u{e722}", for: .normal)
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 26)
        btn.setTitleColor(UIColor.white, for: .normal)
        btn.titleLabel?.textAlignment = .center
        btn.backgroundColor = UIColor.bg
        btn.tag = 2
        return btn
    }()
    lazy var lab_screen : UILabel = {
        let lab = UILabel()
        lab.textColor = UIColor.white
        lab.backgroundColor = UIColor.bg
        lab.text = "投屏演示"
        lab.font = UIFont.init(name: "iconfont", size: 12)
        return lab
    }()
    
    lazy var btn_todayclass : UIButton = {
        let btn = UIButton()
        btn.setTitle("\u{e72f}", for: .normal)
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 30)
        btn.setTitleColor(UIColor.white, for: .normal)
        btn.titleLabel?.textAlignment = .center
        btn.backgroundColor = UIColor.bg
        btn.tag = 3
        return btn
    }()
    
    lazy var lab_todayclass : UILabel = {
        let lab = UILabel()
        lab.textColor = UIColor.white
        lab.backgroundColor = UIColor.bg
        lab.text = "今日课堂"
        lab.font = UIFont.init(name: "iconfont", size: 12)
        return lab
    }()
    lazy var btn_select : UIButton = {
        let btn = UIButton()
        btn.setTitle("\u{e727}", for: .normal)
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 26)
        btn.setTitleColor(UIColor.white, for: .normal)
        btn.titleLabel?.textAlignment = .center
        btn.backgroundColor = UIColor.bg
        btn.tag = 4
        return btn
    }()
    lazy var lab_select : UILabel = {
        let lab = UILabel()
        lab.textColor = UIColor.white
        lab.backgroundColor = UIColor.bg
        lab.text = "扫码选课"
        lab.font = UIFont.init(name: "iconfont", size: 12)
        return lab
    }()
    
    lazy  var btn_studyed :UIButton = {
        let btn = UIButton()
        btn.setTitle("在修课程", for: .normal)
        btn.setTitleColor(UIColor.bg, for: .selected)
        btn.setTitleColor(UIColor.gray, for: .normal)
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 16)
        btn.isSelected = true
        btn.tag = 0
        return btn
    }()
    lazy  var btn_studing :UIButton = {
        let btn = UIButton()
        btn.setTitle("已修课程", for: .normal)
        btn.setTitleColor(UIColor.bg, for: .selected)
        btn.setTitleColor(UIColor.gray, for: .normal)
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 16)
        btn.tag = 1
        return btn
    }()
    lazy var top_View:UIView = {
        let view = UIView()
        view.backgroundColor = UIColor.bg
        return view
    }()
    lazy var _lineLable :UILabel = {
        let lab = UILabel()
        lab.backgroundColor = UIColor.bg
        return lab
    }()
   
    //隐藏状态栏
    override var prefersStatusBarHidden: Bool {
        if isTeacher{
            return false
        }else{
            return true
        }
        
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        common.share.authorizeNotice()

        if(Account.defaultAccount.id == nil){
            let vc = LogInController()
            //let vc = loginCheckViewController()
            vc.hidesBottomBarWhenPushed = true
            NavigatorService.navigateToPage(vc
                , animated: true)
        }else{
            ZQSocketManager.share.addHandlers()
            self.setUI()
            self.setTableView()
            self.refreshItemData(isRefresh: true)
        }
        if isTeacher{
            let todayClassItem = UIBarButtonItem.init(title: "\u{e72f}", style: UIBarButtonItemStyle.plain, target: self, action:   #selector(self.todayClass));
            let qrCodeItem = UIBarButtonItem.init(title: "\u{e727}", style: UIBarButtonItemStyle.plain, target: self, action: #selector(self.qrCode));
            self.navigationItem.rightBarButtonItems = [qrCodeItem,todayClassItem]
            common.share.setteacherStudyButtonItem(item: todayClassItem)
            common.share.setdeleteButtonItem(item: qrCodeItem)
        }
    }
    //老师我的学习今日课堂
    @objc func todayClass(){
        print("今日课堂")
        let vc = stu_teachingView()
        vc.hidesBottomBarWhenPushed = true
        vc.IsPages = true
        self.navigationController?.pushViewController(vc, animated: false)
    }
    //老师我的学习扫码选课
    @objc func qrCode(){
        print("扫码选课")
        let vc = qrcodeViewController()
        vc.isRegister = false
        vc.reloadList = {() in
            self.refreshItemData(isRefresh: false)
        }
        vc.hidesBottomBarWhenPushed = true
        self.navigationController?.pushViewController(vc, animated: false)
    }
    
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(false)
        if isTeacher{
            self.navigationController?.navigationBar.isHidden = false
        }else{
            self.navigationController?.navigationBar.isHidden = true
        }
    }
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(false)
        if isTeacher{
            print("===")
        }else{
            self.navigationController?.navigationBar.isHidden = false
        }
    }

    func setUI(){
        if isTeacher{
            isTeacherHt = 100
        }
        self.view.addSubview(self.top_View)
        self.top_View.addSubview(self.btn_screen)
        self.top_View.addSubview(self.lab_screen)
        self.top_View.addSubview(self.btn_todayclass)
        self.top_View.addSubview(self.lab_todayclass)
        self.top_View.addSubview(self.btn_select)
        self.top_View.addSubview(self.lab_select)
        
        self.view.addSubview(self.view_headview)
        self.view.addSubview(self.btn_studing)
        self.view.addSubview(self.btn_studyed)
        self.view.addSubview(self._lineLable)
        self.top_View.snp.makeConstraints { (make) in
            make.width.equalTo(width)
            make.height.equalTo(100)
            make.top.equalTo(0)
            make.left.equalTo(0)
        }
        self.lab_screen.snp.makeConstraints { (make) in
            make.width.equalTo(50)
            make.height.equalTo(15)
            make.bottom.equalTo(self.top_View.snp.bottom).offset(-25)
            make.left.equalTo(self.top_View.snp.left).offset(15)
        }
        self.btn_screen.snp.makeConstraints { (make) in
            make.width.equalTo(40)
            make.height.equalTo(40)
            make.bottom.equalTo(self.lab_screen.snp.top).offset(5)
            make.centerX.equalTo(self.lab_screen.snp.centerX)
        }
        self.lab_todayclass.snp.makeConstraints { (make) in
            make.width.equalTo(50)
            make.height.equalTo(15)
            make.bottom.equalTo(self.lab_screen.snp.bottom)
            make.centerX.equalTo(self.top_View.snp.centerX)
        }
        self.btn_todayclass.snp.makeConstraints { (make) in
            make.width.equalTo(40)
            make.height.equalTo(40)
            make.bottom.equalTo(self.lab_todayclass.snp.top).offset(5)
            make.centerX.equalTo(self.lab_todayclass.snp.centerX)
        }
        
        self.lab_select.snp.makeConstraints { (make) in
            make.width.equalTo(50)
            make.height.equalTo(15)
            make.bottom.equalTo(self.lab_screen.snp.bottom)
            make.right.equalTo(self.top_View.snp.right).offset(-15)
        }
        self.btn_select.snp.makeConstraints { (make) in
            make.width.equalTo(40)
            make.height.equalTo(40)
            make.bottom.equalTo(self.lab_select.snp.top).offset(5)
            make.centerX.equalTo(self.lab_select.snp.centerX)
        }
        
        self.view_headview.snp.makeConstraints { (make) in
            make.width.equalTo(width)
            make.height.equalTo(40)
            make.top.equalTo(100 - CGFloat(isTeacherHt))
            make.left.equalTo(0)
        }
        self.btn_studyed.snp.makeConstraints { (make) in
            make.centerY.height.equalTo(self.view_headview)
            make.width.equalTo(width / 2)
            make.left.equalTo(0)
        }
        
        self.btn_studing.snp.makeConstraints { (make) in
            make.width.height.centerY.equalTo(self.btn_studyed)
            make.left.equalTo(self.btn_studyed.snp.right)
        }
        
        self._lineLable.snp.makeConstraints { (make) in
            make.bottom.centerX.equalTo(self.btn_studyed)
            make.height.equalTo(2)
            make.width.equalTo(60)
        }
        
        self.btn_screen.addTarget(self, action: #selector(self.tap(_:)), for: .touchUpInside)
        self.btn_todayclass.addTarget(self, action: #selector(self.tap(_:)), for: .touchUpInside)
        self.btn_select.addTarget(self, action: #selector(self.tap(_:)), for: .touchUpInside)
        
        self.btn_studyed.addTarget(self, action: #selector(self.selType(_:)), for: .touchUpInside)
        self.btn_studing.addTarget(self, action: #selector(self.selType(_:)), for: .touchUpInside)
        if isTeacher{
            self.top_View.isHidden = true
        }
    }
    

    func setTableView(){
        if(common.share.isX()){
            ht = 30
        }
        if isTeacher{
            isTeacherHt = 100
            H = 18
        }
        //创建表视图
        self.tableView = UITableView.init(frame: CGRect(x:0, y:140 - CGFloat(isTeacherHt), width:width, height:height - 189 - CGFloat(ht) + CGFloat(isTeacherHt - H)))
        self.tableView.delegate = self;
        self.tableView.dataSource = self;
        self.tableView.backgroundColor = UIColor.colorWithHex(hexColor: 0xf9f9f9)
        tableView.register(studyTableViewCell.self, forCellReuseIdentifier: "studyTableViewCell")
        tableView.tableFooterView = UIView.init()//除去多余的cell
        if #available(iOS 9.0, *) {
            tableView.cellLayoutMarginsFollowReadableWidth = false
        } else {
            // Fallback on earlier versions
        }
        // 设置分割线的样式为None.
        self.tableView.separatorStyle = UITableViewCellSeparatorStyle.none
        //下拉刷新相关设置,使用闭包Block
        self.tableView.mj_header = MJRefreshNormalHeader(refreshingBlock: {
            //重现生成数据
            self.refreshItemData(isRefresh:false);

        })
        self.view.addSubview(self.tableView)

    }
    

    // MARK: - Table view data source
    
    func numberOfSections(in tableView: UITableView) -> Int {
        // #warning Incomplete implementation, return the number of sections
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        // #warning Incomplete implementation, return the number of rows
        return list.count
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat{
        
        return 110;
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        
        let cell:studyTableViewCell =  tableView.dequeueReusableCell(withIdentifier: "studyTableViewCell",for: indexPath) as! studyTableViewCell
        

        //获取当前行所对应的图片记录。

        let data = JSON(self.list[indexPath.row])
        //去除点击cell变灰
        cell.selectionStyle = UITableViewCellSelectionStyle.none
        cell.setCell(json:data)
        return cell
    }
    
    //点击
 func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if(self.classState == 0){
            tableView.deselectRow(at: indexPath, animated: true);
            let json = JSON(self.list[indexPath.row]);
            
            let vc = studentTabber();
                vc.homework.courseOpenId = json["courseOpenId"].stringValue
                vc.homework.openClassId = json["openClassId"].stringValue
                vc.homework.title = "作业"
                vc.exam.courseOpenId = json["courseOpenId"].stringValue
                vc.exam.openClassId = json["openClassId"].stringValue
                vc.exam.title = "考试"
                vc.face.openClassId = json["openClassId"].stringValue
                vc.face.courseOpenId = json["courseOpenId"].stringValue
                vc.finding.openClassId = json["openClassId"].stringValue
                vc.finding.courseOpenId = json["courseOpenId"].stringValue
                vc.finding.courseName = json["openClassName"].stringValue
                vc.finding.thumbnail = json["thumbnail"].stringValue
                vc.finding.mainTeacherName = json["mainTeacherName"].stringValue
                vc.finding.title = "更多"
                vc.courseKJ.courseOpenId = json["courseOpenId"].stringValue
                vc.courseKJ.openClassId = json["openClassId"].stringValue
                vc.courseKJ.courseTitle = json["courseName"].stringValue
            vc.modalTransitionStyle = .crossDissolve
            vc.hidesBottomBarWhenPushed = true;

            present(vc, animated: true, completion: nil)
        }else{
            ZKProgressHUD.showMessage("课程已修完，无法查看!")
        }
    }
    //头部button
    @objc func tap(_ btn :UIButton){
        let tag = btn.tag;
        switch tag {
        case 2:
             print("投屏演示")
             let vc = forScreenOptionsView()
             vc.isStu = true
             vc.hidesBottomBarWhenPushed = true
             self.navigationController?.pushViewController(vc, animated: false)

        case 3:
             print("今日课堂")
            let vc = stu_teachingView()
            vc.isFromtodayClass = true
            vc.IsPages = true
            vc.hidesBottomBarWhenPushed = true
            self.navigationController?.pushViewController(vc, animated: false)
        case 4:
             print("扫码选课")
             let vc = qrcodeViewController()
             vc.isRegister = false
             vc.reloadList = {() in
                self.refreshItemData(isRefresh: false)
             }
             vc.hidesBottomBarWhenPushed = true
             self.navigationController?.pushViewController(vc, animated: false)
        default:
            print("====")
        }
    }
}
