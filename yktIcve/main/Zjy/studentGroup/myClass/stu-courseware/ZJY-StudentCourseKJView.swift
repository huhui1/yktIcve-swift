//
//  ZJY-StudentCourseKJView.swift
//  云课堂2
//
//  Created by 尤增强 on 2018/6/14.
//  Copyright © 2018年 jcjy. All rights reserved.
//

import UIKit
import SwiftyJSON
import Alamofire
class ZJY_StudentCourseKJView: UIViewController,UITableViewDelegate,UITableViewDataSource {

    @IBOutlet var tableview: UITableView!
    var StuCourseKJModel: ZJY_StuCourseKJModel?
    lazy var resId = "";
    lazy var courseOpenId = "";
    var state:Bool = {return false}()
   
    var stuCellPicCount:Int = 0
    var stuCellViewTime:Int = 0  //学生已经学过该课件的视频、音频时长
    var stuStudyNewlyTime:Int = 0 //视音频最近一次看的位置
    var cellLogId:String = ""
    var openClassId = "";
    var resourcesUrl : JSON = [];
    var previewUrl = "";
    var docType = 0;
    var docTitle = "";
    var linkstr = ""
    var token = "" //学习课件的token,用于记录日志
    let cellArray : NSMutableArray = NSMutableArray()
    var courseTitle = ""
    var isNeedUpdate:Bool = false
    var cellIndexId = ""
    var cellIndexPathRow:Int = -999
    var cellIndexPathSection:Int = -999
    //带属性监视器的普通属性
    var moduleList = [zjycourseModule]()
    init() {
        super.init(nibName: "ZJY-StudentCourseKJView", bundle: nil)
    }

    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    deinit {
        self.StuCourseKJModel?.removeObserver(self, forKeyPath: "zjycellRefresh")
    }
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view, typically from a nib.
        //        makeData()
       
        setUpTableview()
        self.title = "课件"
        self.automaticallyAdjustsScrollViewInsets = false

        self.getModuleList()
        self.StuCourseKJModel = ZJY_StuCourseKJModel.init(zjycellRefresh:"")
        let Item = UIBarButtonItem(title: "\u{e6f7}返回", style: .plain, target: self, action: #selector(self.backBtnClick))
        self.navigationItem.leftBarButtonItem = Item
        common.share.setBackButtonItem(item:Item)
        
        let item = UIBarButtonItem(title: "返回", style: .plain, target: self, action: nil)
        self.navigationItem.backBarButtonItem = item
        //对变量进行监听
        self.StuCourseKJModel?.addObserver(self, forKeyPath: "zjycellRefresh", options: [.new, .old], context: nil)
        self.navigationController?.navigationBar.tintColor = UIColor.white
    }

    
    
    
    //返回按钮
    @objc func backBtnClick() {
        self.presentingViewController?.dismiss(animated: true, completion: nil)
    }
    func setUpTableview(){
        tableview.delegate = self
        tableview.dataSource = self
        tableview.tableFooterView = UIView.init()
        if #available(iOS 9.0, *) {
            self.tableview.cellLayoutMarginsFollowReadableWidth = false
        }
        tableview.separatorStyle = UITableViewCellSeparatorStyle.singleLine
        tableview.estimatedRowHeight = 200 //预设cell高度
        tableview.rowHeight = UITableViewAutomaticDimension
    }
    //MARK:-UITableViewDelegate
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        //  获取数据判断是topic 还是cell
        let courseModule = self.moduleList[indexPath.section]
        let t = self.getshowList(model:courseModule, _section: indexPath.row)
        //如果是topic 判断是否有cell 没有请求接口
        if(t.level == 2){
            t.isUnfold = !t.isUnfold
            if(t.cell.count < 1){
                print(t.id)
                self.getCellList(indexPath: indexPath, topic: t)
            }else{
                self.tableview.reloadSections(IndexSet.init(integer: indexPath.section), with: .automatic)
            }
        }else{
            //记录下当前点击的cell是那个分区,那一行
            self.cellIndexPathSection = indexPath.section
            self.cellIndexPathRow = indexPath.row
         
            self.cellIndexId = t.id
            self.isCanSee(cell: t)
        }

    }
    
    
    //MARK:-UITableViewDataSource
    func numberOfSections(in tableView: UITableView) -> Int {
        return moduleList.count
    }
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 52
    }
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let view : HelpSectionHeader = HelpSectionHeader()

        view.spreadBtn.isSelected = self.moduleList[section].isUnfold
        view.spreadBlock = {  () -> Void in
            self.moduleList[section].isUnfold = !self.moduleList[section].isUnfold
            self.getTopicList(moduleId: self.moduleList[section].moduleId,section:section)

        }
        view.titleLabel.text = self.moduleList[section].title
        return view
    }
    func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
        return 1
    }
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {

        return self.getCellNum(model:self.moduleList[section], _section: section)

    }
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 50
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {

        let courseModule = self.moduleList[indexPath.section]
        let courseTopicModule = self.getshowList(model:courseModule, _section: indexPath.row)
       
        let identifier = "cell\(courseTopicModule.id)"
        if ( courseTopicModule.level == 2){
            self.tableview.register(UINib.init(nibName: "courseWareViewTopic", bundle: Bundle.main), forCellReuseIdentifier: identifier)
            let cell : courseWareViewTopic = tableview.dequeueReusableCell(withIdentifier: identifier, for: indexPath) as! courseWareViewTopic
            cell.setZJYModel(courseTopicModule: courseTopicModule)
            print("------1------")
            return cell
        }else{
            self.tableview.register(UINib.init(nibName: "courseWareViewCell", bundle: Bundle.main), forCellReuseIdentifier: identifier)
            let cell : courseWareViewCell = tableview.dequeueReusableCell(withIdentifier: identifier, for: indexPath) as! courseWareViewCell
            cell.setZJYModel(model: courseTopicModule, isstu: true)
            print("------2------")
            return cell
        }
    }


    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

}
extension ZJY_StudentCourseKJView {
    override func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) {
        //let newValue = change?[NSKeyValueChangeKey.newKey]
        if keyPath == "zjycellRefresh" {
            
            let courseModule = self.moduleList[self.cellIndexPathSection]
            let t = self.getshowList(model:courseModule, _section: self.cellIndexPathRow)
            self.reloadCellList(t:t)
       }
    }
    func reloadCellList(t:zjycourseTopic){
        if (self.StuCourseKJModel?.topicId == nil) {
            return
        }
        let dict = ["courseOpenId": self.courseOpenId,
                    "topicId":self.StuCourseKJModel?.topicId! ?? "",
                    "openClassId":self.openClassId,
                    "stuId":Account.defaultAccount.id!] as [String : Any]
        Alamofire.request(appAPI.AssistTeacher_getCellListByTopicId, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{
                    for i in  json["cellList"]{
                        if( i.1["cellType"].intValue == 4){
                            for k in i.1["cellChildNodeList"]{
                                if  k.1["cellId"].stringValue == self.cellIndexId && k.1["isStuSeeCell"].intValue == 1{
                                    t.isStudyFinish = true
                                    let indexPath = IndexPath.init(row: self.cellIndexPathRow, section: self.cellIndexPathSection)
                                    self.tableview.reloadRows(at: [indexPath], with: .automatic)
                                }
                            }
                        }else{
                            if i.1["cellId"].stringValue == self.cellIndexId && i.1["isStuSeeCell"].intValue == 1{
                                t.isStudyFinish = true
                                let indexPath = IndexPath.init(row: self.cellIndexPathRow, section: self.cellIndexPathSection)
                                self.tableview.reloadRows(at: [indexPath], with: .automatic)
                            }
                          }
                       }
                    }
                    
                }else{
                    //ZKProgressHUD.showMessage(json["msg"].stringValue);
                }
          
            }
        }
}




