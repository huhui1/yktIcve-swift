//
//  activityTableView.swift
//  66iclasscloud
//
//  Created by 尤增强 on 2018/2/9.
//  Copyright © 2018年 zqy. All rights reserved.
//

import UIKit
import SwiftyJSON

class activityTableView: UIViewController,UITableViewDelegate,UITableViewDataSource {
    
    var refreshList:signModel?
    let width = UIScreen.main.bounds.width
    
    let height = UIScreen.main.bounds.height
    
    var tableView:UITableView!
    var teachingTitle = ""
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.setUI()
        self.refreshItemData(isRefresh: true)
        let item = UIBarButtonItem(title: "返回", style: .plain, target: self, action: nil)
        self.navigationItem.backBarButtonItem = item
        self.title = "课堂教学"
        self.refreshList = signModel.init(isSign: false)
        self.refreshList?.addObserver(self, forKeyPath: "isSign", options: [.new, .old], context: nil)
    }
    
    //添加监听后,使用完必须移除监听(一个add 对应一个 remove)
    deinit {
        self.refreshList?.removeObserver(self, forKeyPath: "isSign", context: nil)
    }
    
    override func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) {
        if keyPath == "isSign" {
            
            self.refreshItemData(isRefresh: false)
        }
    }
    
  fileprivate func setUI(){
       
        self.tableView = UITableView.init(frame: CGRect(x:0, y:0, width:width, height:height - 60));
        
        tableView.register(activityTableViewCell.self, forCellReuseIdentifier: "swiftCell");
        tableView.tableFooterView = UIView(frame:CGRect.zero)//除去多余的cell
        tableView.separatorInset = UIEdgeInsets.zero;
        
        tableView.layoutMargins = UIEdgeInsets.zero;
        self.tableView.delegate = self;
        self.tableView.dataSource = self;
        
        if #available(iOS 9.0, *) {
            tableView.cellLayoutMarginsFollowReadableWidth = false
        } else {
            // Fallback on earlier versions
        }
        
        //下拉刷新相关设置,使用闭包Block
        self.tableView.mj_header = MJRefreshNormalHeader(refreshingBlock: {

                self.refreshItemData(isRefresh:false);
        })

        self.view.addSubview(self.tableView!);
        
        let topview = UIView.init(frame: CGRect.init(x: 0, y: 0, width: width, height: 50))
            topview.addSubview(self.beforeClass)
            topview.addSubview(self.classIng)
            topview.addSubview(self.afterClass)
            topview.addSubview(self._linelab)
        self.beforeClass.snp.makeConstraints { (make) in
            make.width.equalTo(width/3)
            make.height.equalTo(40)
        }
        self.classIng.snp.makeConstraints { (make) in
            make.width.equalTo(width/3)
            make.height.equalTo(40)
            make.left.equalTo(self.beforeClass.snp.right)
        }
        self.afterClass.snp.makeConstraints { (make) in
            make.width.equalTo(width/3)
            make.height.equalTo(40)
            make.left.equalTo(self.classIng.snp.right)
        }
    
        var parentBtn = self.beforeClass
        if(self.classState == 1){
            self.beforeClass.isSelected = true
        }else if(self.classState == 2){
            parentBtn = self.classIng
            self.classIng.isSelected = true
        }else if(self.classState == 3){
            parentBtn = self.afterClass
            self.afterClass.isSelected = true
        }

        self._linelab.snp.makeConstraints { (make) in
            make.width.equalTo(self.beforeClass.snp.width)
            make.height.equalTo(2)
            make.centerX.equalTo(parentBtn.snp.centerX)
            make.top.equalTo(parentBtn.snp.bottom)
        }

        self.tableView.tableHeaderView = topview
        self.beforeClass.addTarget(self, action:#selector(self.resetLinePoint(_:)), for:.touchUpInside);
        self.classIng.addTarget(self, action: #selector(resetLinePoint(_:)), for: .touchUpInside);
        self.afterClass.addTarget(self, action: #selector(resetLinePoint(_:)), for: .touchUpInside);


    }
   @objc func tapped(_ button:UIButton){
        let tag = button.tag;
        switch tag {
        case 1:
            print("1");
            self.beforeClass.isSelected = true
            self.beforeClass.setTitleColor(UIColor.bg, for: .selected)
            self.classIng.setTitleColor(UIColor.gray, for: .selected)
            self.afterClass.setTitleColor(UIColor.gray, for: .selected)
            break;
        case 2:
            print("2");
            self.classIng.isSelected = true
            self.classIng.setTitleColor(UIColor.bg, for: .selected)
            self.beforeClass.setTitleColor(UIColor.gray, for: .selected)
            self.afterClass.setTitleColor(UIColor.gray, for: .selected)
            break;
        case 3:
            print("3");
            self.afterClass.isSelected = true
            self.afterClass.setTitleColor(UIColor.bg, for: .selected)
            self.beforeClass.setTitleColor(UIColor.gray, for: .selected)
            self.classIng.setTitleColor(UIColor.gray, for: .selected)
            break;
        default:
            break;
        }
    }
    //获取数据重绘制下滑线
   @objc func resetLinePoint(_ btn :UIButton){
        self.classState = btn.tag
        self._linelab.snp.remakeConstraints { (make) in
            make.width.equalTo(self.beforeClass.snp.width)
            make.height.equalTo(2)
            make.centerX.equalTo(btn.snp.centerX)
            make.top.equalTo(btn.snp.bottom)
        }
        self.refreshItemData(isRefresh:false)
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    // MARK: - Table view data source

     func numberOfSections(in tableView: UITableView) -> Int {
        // #warning Incomplete implementation, return the number of sections
        return 1
    }
    //返回表格行数（也就是返回控件数）
     func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        // #warning Incomplete implementation, return the number of rows
        return self.list.count
    }


     func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat
    {
        return 60;
    }

     func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell: activityTableViewCell = tableView.dequeueReusableCell(withIdentifier: "swiftCell", for: indexPath) as! activityTableViewCell

        let json = JSON(self.list[indexPath.row])

        let _index = self.DataTypes.index(of: json["DataType"].stringValue)
        cell.lab_activitytime.text = json["DataType"].stringValue + json["DateCreated"].stringValue
        cell.lab_activityTitle.text = json["Title"].stringValue

        cell.lab_activityState.text = self.states[json["State"].intValue]
        cell.lab_icon.text = self.DataTypeIcons[_index!]
        cell.lab_icon.backgroundColor = UIColor.colorWithHex(hexColor: Int64(self.DataTyoeIconColor[_index!]))
        cell.selectionStyle = .none
        return cell
    }


     func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        self.pushVCByType(indexPath: indexPath)
    }
    

    //禁止右滑退出事件
    override func viewDidAppear(_ animated: Bool) {
        navigationController?.interactivePopGestureRecognizer?.isEnabled = false;
    }

    //开启滑动退出 仅当前页面禁止
    override func viewDidDisappear(_ animated: Bool) {
        navigationController?.interactivePopGestureRecognizer?.isEnabled = true;
    }
    
    
   lazy var beforeClass:UIButton = {
        let btn = UIButton()
        btn.titleLabel?.font = UIFont(name: "iconfont", size: 20);
        btn.setTitleColor(UIColor.gray, for: .normal)
        btn.setTitleColor(UIColor.bg, for: .selected)
        btn.setTitle("课前", for: .normal)
        btn.titleLabel?.textAlignment = .center
        btn.tag = 1
        btn.backgroundColor = UIColor.colorWithHex(hexColor: 0xf0f0f0)
        btn.addTarget(self, action:#selector(tapped(_:)), for:.touchUpInside);
        return  btn
    }()
    
  lazy  var  classIng :UIButton = {
        let btn = UIButton()
        btn.titleLabel?.font = UIFont(name: "iconfont", size: 20);
        btn.setTitleColor(UIColor.gray, for: .normal)
        btn.setTitleColor(UIColor.bg, for: .selected)
        btn.setTitle("课中", for: .normal)
        btn.titleLabel?.textAlignment = .center
        btn.tag = 2
        btn.backgroundColor = UIColor.colorWithHex(hexColor: 0xf0f0f0)
        btn.addTarget(self, action:#selector(tapped(_:)), for:.touchUpInside);
        return  btn
    }()
    
    
  lazy  var afterClass:UIButton = {
        let btn = UIButton()
        btn.titleLabel?.font = UIFont(name:"iconfont",size:20);
        btn.setTitleColor(UIColor.gray, for: .normal)
        btn.setTitleColor(UIColor.bg, for: .selected)
        btn.setTitle("课后", for: .normal)
        btn.titleLabel?.textAlignment = .center
        btn.tag = 3
        btn.backgroundColor = UIColor.colorWithHex(hexColor: 0xf0f0f0)
        btn.addTarget(self, action:#selector(tapped(_:)), for:.touchUpInside);
        return btn
    }()

  fileprivate  lazy var _linelab :UILabel = {
        let lab = UILabel()
        lab.backgroundColor = UIColor.bg
        return lab
    }()

    lazy var openClassId :String = {
        return ""
    }()

    lazy var courseOpenId :String = {return ""}()

    lazy var activityId :String = {
        return ""
    }()

    lazy var classState :Int = {
        return 2
    }()

    lazy var faceEvaluation :Int = {
        return 1
    }()
    
    lazy var creatorId = ""
    lazy var states = ["","未开始","进行中","已结束","未总结","未评价","已总结","已评价","课堂表现"]
    lazy var DataTypes = ["课前要求","讨论","问卷调查","测验","头脑风暴","签到","提问","小组PK","问卷调查","投票","课后安排","总结","课堂表现","评价","课件","作业","考试"]
    lazy var DataTypeIcons = ["\u{e67a}","\u{e610}","\u{e6b9}","\u{e653}","\u{e656}","\u{e63b}","\u{e655}","\u{e69f}","\u{e6b9}","\u{e611}","\u{e67a}","\u{e661}","\u{e661}","\u{e637}","\u{e65a}","\u{e814}","\u{e627}"]
    lazy var DataTyoeIconColor = [0xFEB739,0x4FBAF2,0x45dafc,0xFEB739,0x879EFF,0xFA8144,0x2DCAA9,0xffd73e,0x32d5fe,0xFEB739,0xFEB739,0x32d5fe,0xFEB739,0xFEB739,0x37deac,0x54b8ff,0xd0de37]
    lazy var list :Array = {return []}()

    var token = "" //学习课件的token,用于记录日志
    var linkstr = ""
    var resourcesUrl : JSON = [];
    var previewUrl = "";
    var stuCellPicCount:Int = 0
    var cellLogId:String = ""
}

extension activityTableView
{
    //问卷调查
    func Questionnaire(json:JSON){
        if(json["State"].intValue == 3 && json["isAttend"].intValue == 0 ){
            ZKProgressHUD.showMessage("此次调查问卷已结束！")
        }else if (json["isAttend"].intValue == 1 ){
            ZKProgressHUD.showMessage("感谢你的参与，老师已收到你的问卷结果！")
        }else if(json["State"].intValue == 2){
            let vc = stuQuestionnaireView()
            vc.openClassId = self.openClassId
            vc.courseOpenId = self.courseOpenId
            vc.activityId = self.activityId
            vc.title = json["Title"].stringValue
            vc.questionnaireId = json["Id"].stringValue
            self.navigationController?.pushViewController(vc, animated: true)
        }
    }
    //考试
    func stuexam(json:JSON){
        if(json["hkOrExamType"].intValue == 1){
            if(json["isAnswerOrPreview"].intValue == 2){ //作答
                let vc = stuExaminationHandleView()
                vc.openClassId = self.openClassId
                vc.courseOpenId = self.courseOpenId
                
                vc.examId = json["Id"].stringValue
                vc.examStuId = json["examStuId"].stringValue
                vc.examTermTimeId = json["termTimeId"].stringValue
                vc.examTitle = json["Title"].stringValue
                vc.reloadExam  = { ()
                    self.refreshItemData(isRefresh: true)
                }
                vc.hidesBottomBarWhenPushed = true
                self.navigationController?.pushViewController(vc, animated: true)
            }else if(json["isAnswerOrPreview"].intValue == 3){//预览
                if(json["isPreview"].intValue == 1){
                    let vc = stuExaminationhandleRecordView()
                    vc.openClassId = self.openClassId
                    vc.courseOpenId = self.courseOpenId
                    
                    vc.examId = json["Id"].stringValue
                    vc.examStuId = json["examStuId"].stringValue
                    vc.examTermTimeId = json["termTimeId"].stringValue
                    vc.examTitle = json["Title"].stringValue
                    vc.hidesBottomBarWhenPushed = true
                    self.navigationController?.pushViewController(vc, animated: true)
                }else if(json["isPreview"].intValue == 0){
                    ZKProgressHUD.showMessage("未到查看时间")
                }
            }
            else if(json["isAnswerOrPreview"].intValue == 1){//既不作答也不展示
                ZKProgressHUD.showMessage("暂时无法作答")
            }
        }else{
            ZKProgressHUD.showMessage("登分考试暂不支持手机端查看!")
        }
    }
    //作业
    func stuhomework(json:JSON){
        // hkOrExamType :DataType为作业时1:题库作业 2：登分作业 3:第三方作业 4、附件作业（附件）
        switch json["hkOrExamType"].intValue{
        case 1:
            let vc = stuRecordView()
            
            vc.courseOpenId = self.courseOpenId
            vc.openClassId = self.openClassId
            vc.homeWorkId = json["Id"].stringValue
            vc.homeworkTermTimeId = json["termTimeId"].stringValue
            vc.homeworktitle = json["Title"].stringValue
            vc.hidesBottomBarWhenPushed = true
            self.navigationController?.pushViewController(vc, animated: true)
            print(1)
        case 2:
            ZKProgressHUD.showMessage("此作业直接由老师打分，无需作答！")
        case 4:
            let vc = stuRecordView()
            
            vc.courseOpenId = self.courseOpenId
            vc.openClassId = self.openClassId
            vc.homeWorkId = json["Id"].stringValue
            vc.homeworkTermTimeId = json["termTimeId"].stringValue
            vc.homeworktitle = json["Title"].stringValue
            vc.ztWay = 3
            vc.hidesBottomBarWhenPushed = true
            self.navigationController?.pushViewController(vc, animated: true)
            print(1)
        default:
            ZKProgressHUD.showMessage("此作业功能暂不支持手机端查看！")
            
        }
    }
    //课件
    func stucourse(json:JSON){
        
        
        switch json["categoryName"].stringValue {
        case "其他":
            print("其他")
        case "视频":
            print("视频")
            let vc = zjyVideoPlayView()
            vc.isStu = true
            vc.courseOpenId = self.courseOpenId
            vc.docId = json["Id"].stringValue
            vc.title = json["Title"].stringValue
            vc.openClassId = self.openClassId
            vc.moduleId = json["moduleId"].stringValue
            
            vc.hidesBottomBarWhenPushed = true
            self.navigationController?.pushViewController(vc, animated: true)
        case "音频":
            print("音频")
        case "图片":
            print("图片")
        case "文档":
            print("文档")
        case "ppt":
            print("ppt")
        case "zip":
            print("zip")
        case "图文":
            print("图文")
        case "链接":
            print("链接")
        default:
            print("===")
        }
    }
}
