//
//  stuTestingView.swift
//  66iclasscloud
//
//  Created by 尤增强 on 2018/2/8.
//  Copyright © 2018年 zqy. All rights reserved.
//

import UIKit
import WebKit
import SwiftyJSON
class stuTestingView: UIViewController,WKScriptMessageHandler,WKNavigationDelegate {
    var reloadClosure :(() ->Void)?

    override func viewDidLoad() {
        super.viewDidLoad()
        self.view.backgroundColor = UIColor.white

        self.setWebViewUI()
        self.setTime();

        let item = UIBarButtonItem(title: "\u{e6f7}返回", style: .plain, target: self, action: #selector(self.backBtnClick))
        self.navigationItem.leftBarButtonItem = item
        common.share.setBackButtonItem(item:item)

        // Do any additional setup after loading the view.
    }


    //设置H5页面
    func setWebViewUI(){

        let path = Bundle.main.path(forResource: "examhandle", ofType: ".html",
                                    inDirectory: "HTML5/src/student/class");
        let url = URL(fileURLWithPath:path!);
        //let request = URLRequest(url:url);

        //创建供js调用的接口
        let theConfiguration = WKWebViewConfiguration()
        theConfiguration.userContentController.add(self, name: "interOp")

        var fheight = 0 ;
        if((self.navigationController) == nil){
            fheight = 60
        }
        //将浏览器视图全屏(在内容区域全屏,不占用顶端时间条)
        let frame = CGRect.init(x: CGFloat(0), y:CGFloat(fheight), width: UIScreen.main.bounds.width, height: UIScreen.main.bounds.height - 60 + CGFloat(HX));
        theWebView = WKWebView(frame:frame, configuration: theConfiguration)
        //禁用页面在最顶端时下拉拖动效果
        //        theWebView.scrollView.bounces = false;
        //        theWebView.isUserInteractionEnabled = false;
        //加载页面
        if #available(iOS 9.0, *) {
            
            theWebView.loadFileURL(url, allowingReadAccessTo: url)
        } else {
            
            do{
                
                let url1 = try common.share.fileURLForBuggyWKWebView8(fileURL:url as NSURL)
                let request = URLRequest(url:url1 as URL);
                theWebView.load(request)
                
            }catch{}
        }
        //theWebView.load(request)
        theWebView.navigationDelegate = self
        self.view.addSubview(theWebView);

    }

    //返回处理h5清除页面，防内存溢出
    override func viewWillDisappear(_ animated: Bool) {
        if(!self.isPushed){
              self.codeTimer?.cancel()

        theWebView.configuration.userContentController.removeScriptMessageHandler(forName: "interOp")
        }
        self.isPushed = false
    }


    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    func userContentController(_ userContentController:WKUserContentController,
                               didReceive message: WKScriptMessage) {
        let sentData = message.body as! Dictionary<String,String>

        if(sentData["method"] == "load" ){
             self.getClassTestData(isfirst: true);
        }else if (sentData["method"] == "submitAll"){
            self.submitAll(isAllHandle: (sentData["isAllHandle"]?.description)!)
        }else if(sentData["method"] == "showMsg"){
            ZKProgressHUD.showMessage(sentData["msg"]!)
            return
        }else if(sentData["method"] == "previewIMG"){

            self.showPreviewImg(url:sentData["url"]!)
        }else if(sentData["method"] == "previewfile"){
            self.getFileByUrl(URL:sentData["url"]!)
        }
    }

    func webView(_ webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping (WKNavigationActionPolicy) -> Void) {
        let url = navigationAction.request.mainDocumentURL
        if((url?.scheme?.contains("http"))! || (url?.scheme?.contains("https"))!){
            //
            print("拒绝")
            let vc = linkjumpView()
            vc.linkStr = (navigationAction.request.mainDocumentURL?.absoluteString)!
            self.isPushed = true
            self.navigationController?.pushViewController(vc, animated: true)
            //            UIApplication.shared.openURL(url! as URL)
            decisionHandler(.cancel);
        }else{
            decisionHandler(.allow);
        }



    }

    func setTime(){

        // 在global线程里创建一个时间源
        codeTimer = DispatchSource.makeTimerSource(queue:  DispatchQueue.global())
        // 设定这个时间源是每秒循环一次，立即开始
        codeTimer?.schedule(deadline: .now(), repeating: .seconds(1))
        // 设定时间源的触发事件
        codeTimer?.setEventHandler(handler: {
            // 每秒计时一次
            self.timeCount = self.timeCount + 1

            // 返回主线程处理一些事件，更新UI等等
            DispatchQueue.main.async {
                let  seconds = self.timeCount % 60;
                let  minutes = Int(self.timeCount / 60);
                let title =  "\(minutes):\(seconds)";

                self.title = title
            }
        })
        // 启动时间源
        codeTimer?.resume()
        
    }

    override func viewDidDisappear(_ animated: Bool) {

        navigationController?.interactivePopGestureRecognizer?.isEnabled  = true;
    }

    override func viewDidAppear(_ animated: Bool) {

        navigationController?.interactivePopGestureRecognizer?.isEnabled  = false;
    }    /*
    // MARK: - Navigation

    // In a storyboard-based application, you will often want to do a little preparation before navigation
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        // Get the new view controller using segue.destinationViewController.
        // Pass the selected object to the new view controller.
    }
    */
    var list :NSMutableArray = [];
    var questionDic = ["questionId":"","answer":""]
    lazy var dataJson :JSON={return []}();
    lazy var theWebView:WKWebView = {
        let WK = WKWebView()

        return WK
    }()
   
    var codeTimer: DispatchSourceTimer?

    lazy var activityId = ""
    lazy var openClassId = ""
    lazy var courseOpenId = ""
    lazy var examId = ""
    lazy var creatorId = ""
    lazy var classTestStuId = ""
    lazy var timeCount = 0;
    lazy var user :String = {return ""}()
    lazy var isPushed:Bool = {
        return false
    }()
   
    let HX = common.share.returnSafeAreaLineHeight()
}
