//
//  faceEvaluationView.swift
//  云课堂-职教云
//
//  Created by 志辉教育 on 2018/4/4.
//  Copyright © 2018年 zqy. All rights reserved.
//

import UIKit

class faceEvaluationView:UIViewController,ZQStarReteViewDelegate,UITextViewDelegate{
    //创建一个闭包属性
    var reloadsummary :((_ int :Int)->Void)?
    override func viewDidLoad() {
        super.viewDidLoad()
        self.view.backgroundColor = UIColor.colorWithHex(hexColor: 0xf1f1f1)
        self.setUI()
        self.get()
        
        // Do any additional setup after loading the view.
        self.title = "评价";
        self.summarizeText.delegate = self

        if(!self.Id.isEmpty){
            self.btn_determine.isHidden = true
        }
        NotificationCenter.default.addObserver(self, selector: #selector(textViewEditChanged(sender:)), name: NSNotification.Name.UITextViewTextDidChange, object: nil);
        
        
    }
    
    func setUI(){
        let item = UIBarButtonItem(title: "\u{e6f7}返回", style: .plain, target: self, action: #selector(self.backBtnClick))
        self.navigationItem.leftBarButtonItem = item
        common.share.setBackButtonItem(item:item)
        self.navigationController?.navigationBar.tintColor = UIColor.white
        
        toolBar = common.share.AddToolKeyboardDoneBar()
        let doneButton = UIBarButtonItem(title: "确定", style: .plain, target: self, action: #selector(self.doneClick));
        let spaceButton = UIBarButtonItem(barButtonSystemItem: .flexibleSpace, target: nil, action: nil)
        toolBar.setItems([spaceButton,doneButton], animated: false)

        
        self.summarizeText.delegate = self
        self.view.addSubview(label)
        self.view.addSubview(summarizeText)
        self.view.addSubview(view_star)
        self.view.addSubview(btn_determine)
        self.view.addSubview(starNumber)
        self.summarizeText.addSubview(placeholder)
        self.label.snp.makeConstraints { (make) in
            make.width.equalTo(UIScreen.main.bounds.width)
            make.height.equalTo(50)
            make.left.equalTo(0)
            make.top.equalTo(10)
        }
        let HX = common.share.returnSafeAreaLineHeight()
        self.btn_determine.snp.makeConstraints { (make) in
            make.width.equalTo(UIScreen.main.bounds.width)
            make.height.equalTo(45)
            make.bottom.equalTo(self.view.snp.bottom).offset(HX)
        }
        self.btn_determine.addTarget(self, action: #selector(setSoceToOnline), for: .touchUpInside)
        
        self.placeholder.snp.makeConstraints { (make) in
            make.width.equalTo(200)
            make.height.equalTo(40)
            make.left.equalTo(self.summarizeText.snp.left).offset(0)
            make.top.equalTo(self.summarizeText.snp.top).offset(0)
        }
        
        self.view_star.snp.remakeConstraints { (make) in
            make.width.equalTo(100)
            make.height.equalTo(30)
            make.right.equalTo(self.view.snp.right).offset(-50)
            make.centerY.equalTo(self.label.snp.centerY)
        }
        self.view_star.delegate = self;
        self.view_star.allowUnderCompleteStar = false;
        
        self.starNumber.snp.remakeConstraints { (make) in
            make.width.equalTo(50)
            make.height.equalTo(30)
            make.right.equalTo(self.view.snp.right)
            make.centerY.equalTo(self.label.snp.centerY)
        }
        
        self.summarizeText.snp.makeConstraints { (make) in
            make.width.equalTo(UIScreen.main.bounds.width)
            make.height.equalTo(200)
            make.left.equalTo(0)
            make.top.equalTo( self.label.snp.bottom).offset(10)
        }

        
    }
    func textViewShouldBeginEditing(_ textView: UITextView) -> Bool {
        self.placeholder.isHidden = true
        textView.inputAccessoryView = toolBar;
        if(!self.isup){
            common.share.animateViewMoving(up: true, moveValue: 70, view: self.view)
        }
        self.isup = true
        return true
    }
    //返回按钮
   @objc func backBtnClick() {
       
        if(self.textstate && self.btn_determine.isHidden == false && self.summarizeText.text.count > 0 || self.score > 0){
            let alertController = UIAlertController(title: "提示",
                                                    message: "您已评价，没有保存，确定要离开吗？", preferredStyle: .alert)
            let cancelAction = UIAlertAction(title: "取消", style: .cancel, handler: nil)
            let okAction = UIAlertAction(title: "确定", style: .default, handler: {
                action in
                print("点击了确定")
                NotificationCenter.default.removeObserver(self)
                self.navigationController?.popViewController(animated: true)
            })
            alertController.addAction(cancelAction)
            alertController.addAction(okAction)
            self.present(alertController, animated: true, completion: nil)
        }
        else{
            self.navigationController?.popViewController(animated: true)
        }
    }
    //字数限制
    @objc func textViewEditChanged(sender:NSNotification) {
        let textVStr = summarizeText.text as NSString
        if (textVStr.length >= 300) {
            let str = textVStr.substring(to: 300)
            summarizeText.text = str
            ZKProgressHUD.showMessage("最多输入300字")
        }
    }
    
    //键盘处理
   @objc func doneClick(){
        self.view.endEditing(true)
        if(self.isup){
        common.share.animateViewMoving(up: false, moveValue: 70, view: self.view)
        }
        self.isup = false
    }
    //ipad键盘处理
    func textViewShouldEndEditing(_ textView: UITextView) -> Bool {
        textView.resignFirstResponder()
        if(self.isup){
            common.share.animateViewMoving(up: false, moveValue: 70, view: self.view)
        }
        self.isup = false
        return true
    }
   
    func textViewDidEndEditing(_ textView: UITextView) {
        if summarizeText.text.isEmpty {
            self.placeholder.isHidden = false  // 显示
        }
        else{
            self.placeholder.isHidden = true  // 隐藏
        }
    }
    //MARK: - 协议代理
    func starRate(view starRateView: ZQStarRateView, score: Float) {
        print(score)
        self.score = CGFloat(score)
        self.starNumber.text = "\(score)"
    }
    func setScoreUI(score:Float){
        self.view_star.changeStarRate(score:score)
    }
    lazy var placeholder :UILabel={
        let lab=UILabel()
        lab.backgroundColor = UIColor.white
        lab.text = "    最多输入300字"
        return lab
    }()
    lazy var label :UILabel={
        let lab=UILabel()
        lab.backgroundColor = UIColor.white
        lab.text = "    评星"
        return lab
    }()
    lazy var summarizeText :UITextView={
        let text = UITextView();
        text.font = UIFont.italicSystemFont(ofSize: 15)
        text.textColor = UIColor.black
        text.isEditable = true
        text.backgroundColor = UIColor.white
        text.isUserInteractionEnabled = true
        return text;
    }()
    
    lazy var btn_determine :UIButton = {
        let btn = UIButton()
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 16);
        btn.setTitle("发布评价", for: .normal)
        btn.backgroundColor = UIColor.bg
        btn.titleLabel?.textColor = UIColor.white
        return btn
    }()
    lazy var starNumber :UILabel={
        let lab=UILabel()
        lab.font = UIFont.italicSystemFont(ofSize: 18)
        lab.textAlignment = .center
        lab.text = "0.0"
        return lab
    }()
    var view_star:ZQStarRateView = {
        let view = ZQStarRateView.init(frame: CGRect.init(x: 0, y:0, width: 100, height: 30), starCount: 5, score: 0.0)
        view.isUserInteractionEnabled = true
        return view
    }()
    lazy var textstate :Bool = {return false}()
 
    lazy var courseOpenId :String = {return ""}()
    lazy var openClassId :String = {return ""}()
    lazy var Id :String = {return ""}()
    lazy var performScore :Int = {return 0}()
    lazy var Star :Int = {return 0}()
    lazy var activityId: String = {return ""}()
    lazy var score :CGFloat = {return  0.0}()
    var toolBar = UIToolbar();
    lazy var isup :Bool = {
        return false
    }()
}
