//
//  stu-teachingView.swift
//  云课堂2
//
//  Created by 尤增强 on 2018/6/29.
//  Copyright © 2018年 zqyou. All rights reserved.
//  stu_teachingView

import UIKit
import SwiftyJSON
import CVCalendar
class stu_teachingView: UIViewController {
    override func viewDidLoad() {
        super.viewDidLoad()
        self.view.backgroundColor = UIColor.white
        self.title = "课堂"
        let item1 = UIBarButtonItem(title: "返回", style: .plain, target: self, action: nil)
        self.navigationItem.backBarButtonItem = item1
        if IsPages == false{
            let item = UIBarButtonItem(title: "\u{e6f7} 返回", style: .plain, target: self, action: #selector(self.backBtnClick))
            self.navigationItem.leftBarButtonItem = item
            common.share.setBackButtonItem(item:item)
        }
        currentCalendar = Calendar.init(identifier: .gregorian)
        //初始化星期菜单栏
        self.menuView = CVCalendarMenuView(frame: CGRect(x:0, y:0, width:width, height:20))
        
        //初始化日历主视图
        self.calendarView = CVCalendarView(frame: CGRect(x:0, y:25, width:width,
                                                         height:45))
        
        //日历样式代理
        self.calendarView.calendarAppearanceDelegate = self
        //星期菜单栏代理
        self.menuView.menuViewDelegate = self
        
        //日历代理
        self.calendarView.calendarDelegate = self
        
        //将菜单视图和日历视图添加到主视图上
        self.view.addSubview(menuView)
        self.view.addSubview(calendarView)
        
        
        let Item = UIBarButtonItem.init(title: "全部", style: UIBarButtonItemStyle.plain, target: self, action: #selector(self.allclassteaching));
        
        self.navigationItem.rightBarButtonItem = Item
        
        self.setWeekUI()
        //标记有日期的点
        self.getFaceTeachDate()
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyy-MM-dd"
        self.date = dateFormatter.string(from: Date())
        
        
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    
    @objc func swipe(_ recognizer:UISwipeGestureRecognizer){
        if recognizer.direction == .up{
            self.UpdataView(isUp: true)
        }else if recognizer.direction == .down{
            self.UpdataView(isUp: false)
        }
    }
    
    
    //上下滑动修改页面样式
    fileprivate  func UpdataView(isUp:Bool){
        
        UIView.animate(withDuration: 0.6, animations: {
            
            if(isUp && !self.isWeek){
                self.calendarView.removeFromSuperview()
                self.calendarView = CVCalendarView(frame: CGRect(x:0, y:25, width:self.width,
                                                                 height:45))
                self.tableView.frame =  CGRect(x:0, y:100, width:self.width, height:self.height - 160)
                
                
            }else if(!isUp && self.isWeek){
                self.calendarView.removeFromSuperview()
                self.calendarView = CVCalendarView(frame: CGRect(x:0, y:25, width:self.width,
                                                                 height:310))
                self.tableView.frame =   CGRect(x:0, y:360, width: self.width, height:self.height - 420)
                
            }else{
                return
            }
            
            //日历样式代理
            self.calendarView.calendarAppearanceDelegate = self
            
            self.isWeek =  !self.isWeek
            //日历代理
            self.calendarView.calendarDelegate = self
            
            //将菜单视图和日历视图添加到主视图上
            self.view.addSubview(self.calendarView)
            self.swiplable.snp.remakeConstraints({ (make) in
                make.width.equalTo(self.width)
                make.top.equalTo(self.calendarView.snp.bottom)
                make.height.equalTo(20)
                make.centerX.equalTo(self.calendarView.snp.centerX)
            })
            self.swiplable.text =   self.isWeek ? "\u{e87e}" : "\u{e87d}"
        })
    }
    //全部
    @objc func allclassteaching(){
        let vc = stu_teachingAllView()
        vc.openClassId = self.openClassId
        vc.courseOpenId = self.courseOpenId
        if !self.isFromtodayClass{
           vc.isHadenTop = true
        }
        vc.hidesBottomBarWhenPushed = true
        self.navigationController?.pushViewController(vc, animated: true);
    }

    //返回按钮
    @objc func backBtnClick() {
        self.presentingViewController?.dismiss(animated: true, completion: nil)
    }

    
    
    func setWeekUI(){
        
        self.view.addSubview(self.swiplable)
        self.swiplable.snp.makeConstraints { (make) in
            make.width.equalTo(self.width)
            make.top.equalTo(calendarView.snp.bottom)
            make.height.equalTo(20)
            make.centerX.equalTo(self.calendarView.snp.centerX)
        }
        //添加上下滑动手势
        self.swiplable.isUserInteractionEnabled = true
        let swipe = UISwipeGestureRecognizer(target:self, action:#selector(swipe(_:)))
        swipe.direction = .down
        self.swiplable.addGestureRecognizer(swipe)
        let swipeup = UISwipeGestureRecognizer(target:self, action:#selector(self.swipe(_:)))
        swipeup.direction = .up
        self.swiplable.addGestureRecognizer(swipeup)
        
        //设置tableview
        self.tableView = UITableView.init(frame:  CGRect(x:0, y:100, width:self.width, height:self.height - 160))
        self.tableView.delegate = self;
        self.tableView.dataSource = self;
        
        self.tableView.register(UINib(nibName:"CourseTeachsCell", bundle:nil),
                                forCellReuseIdentifier:"CourseTeachsCell")
        // 设置分割线的样式为None.
        self.tableView.separatorStyle = UITableViewCellSeparatorStyle.none
        self.tableView.tableFooterView = UIView(frame:CGRect.zero)//除去多余的cell
        //下拉刷新相关设置,使用闭包Block
        self.tableView.mj_header = MJRefreshNormalHeader(refreshingBlock: {
            self.getfaceList(isRefresh: false,date: self.date)
        })
        
        self.view.addSubview(self.tableView)
     
        
    }
    
    override func viewDidLayoutSubviews() {
        super.viewDidLayoutSubviews()
        //更新日历frame
        if (self.menuView != nil) &&  (self.calendarView != nil){
            self.menuView.commitMenuViewUpdate()
            self.calendarView.commitCalendarViewUpdate()
        }
    }
//
//    lazy var courseOpenIds :String = {
//        return ""
//    }()
//    lazy var openClassIds :String = {
//        return ""
//    }()
    
    lazy var dates :NSArray = {return []}()
    var currentCalendar: Calendar!
    //星期菜单栏
    private var menuView: CVCalendarMenuView!
    
    //日历主视图
    private var calendarView: CVCalendarView!
    
    lazy var list : JSON =  {
        return []
    }()
    var isFromtodayClass :Bool = false

    var IsPages = false
    var isWeek = true
    lazy var courseOpenId:String = ""
    lazy var openClassId:String = ""
    var tableView :UITableView!
    let width = UIScreen.main.bounds.width
    let height = UIScreen.main.bounds.height
    lazy var swiplable :UILabel = {
        let lab = UILabel()
        lab.text = "\u{e87e}"
        lab.font = UIFont.init(name: "iconfont", size: 20)
        lab.textColor = UIColor.lightGray
        lab.textAlignment = .center
        return lab
    }()
    lazy var Dateview:UIView = {
        let view = UIView()
        return view
    }()
    var date:String = ""
    {
        didSet
        {
            self.getfaceList(isRefresh: true, date: date)
        }
    }
    
    
    
}
extension stu_teachingView: UITableViewDelegate,UITableViewDataSource{
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.list.count
    }
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 142
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let cell:CourseTeachsCell = tableView.dequeueReusableCell(withIdentifier: "CourseTeachsCell")
            as! CourseTeachsCell
        cell.selectionStyle = UITableViewCellSelectionStyle.none
        let json = self.list[indexPath.row]
        if !self.isFromtodayClass{
           cell.ishaddenStucourseName = true
        }else{
           cell.ishaddenStucourseName = false
        }
        cell.setStujson(json: json)
        return cell
    }
    
    //跳转到活动
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let json = self.list[indexPath.row]
        let vc = activityTableView()
        vc.openClassId = json["openClassId"].stringValue
        vc.courseOpenId = json["courseOpenId"].stringValue
        vc.activityId = json["Id"].stringValue
        vc.classState = json["state"].intValue
        vc.hidesBottomBarWhenPushed = true
        self.navigationController?.pushViewController(vc, animated: true)
    }
    
    
}
extension stu_teachingView: CVCalendarViewDelegate,CVCalendarMenuViewDelegate,CVCalendarViewAppearanceDelegate {
    //视图模式
    func presentationMode() -> CalendarMode {
        //使用周视图
        
        return self.isWeek  ? .weekView:.monthView
    }
    
    //文字背景色设置
    func dayLabelBackgroundColor(by weekDay: Weekday, status: CVStatus,
                                 present: CVPresent) -> UIColor? {
        switch (weekDay, status, present) {
        case (.sunday, .selected, _),
             (.sunday, .highlighted, _):
            return UIColor.bg
        case (_, .selected, _):
            return UIColor.bg
        case  (_, .highlighted, _):
            return UIColor.red
        default: return nil
        }
    }
    
    //每周的第一天
    func firstWeekday() -> Weekday {
        //从星期一开始
        return .monday
    }
    
    //每个日期上面是否添加横线(连在一起就形成每行的分隔线)
    func topMarker(shouldDisplayOnDayView dayView: CVCalendarDayView) -> Bool {
        return false
    }
    
    //切换周的时候日历是否自动选择某一天（本周为今天，其它周为第一天）
    func shouldAutoSelectDayOnWeekChange() -> Bool {
        return false
    }
    func shouldAutoSelectDayOnMonthChange() -> Bool {
        return false
    }
    //星期文字颜色设置
    func dayOfWeekTextColor(by weekday: Weekday) -> UIColor {
        return weekday == .sunday || weekday == .saturday ?
            UIColor.lightGray : UIColor.black
    }
    
    func presentedDateUpdated(_ date: CVDate) {
        //导航栏显示当前日历的年月
        self.navigationItem.title = date.globalDescription
        
    }
    //日期选择响应
    func didSelectDayView(_ dayView: CVCalendarDayView, animationDidFinish: Bool) {
        //获取日期
        let date = dayView.date.convertedDate(calendar: currentCalendar)!
        // 创建一个日期格式器
        let dformatter = DateFormatter()
        dformatter.dateFormat = "yyyy-MM-dd"
        self.date = dformatter.string(from: date)
    }
    
    
    //该日期视图是否有标记点
    func dotMarker(shouldShowOnDayView dayView: DayView) -> Bool {
        if !dayView.isHidden && dayView.date != nil {
            //获取该日期视图的年月日
            let dateFormatter = DateFormatter()
            
            dateFormatter.dateFormat = "yyyy-MM-dd"
            
            for i in 0..<self.dates.count{
                let date = dayView.date.convertedDate()!
                if dateFormatter.string(from: date) == "\(self.dates[i])"{
                    return true
                }
            }
        }
        return false
    }
    
    //标记点的偏移量
    func dotMarker(moveOffsetOnDayView dayView: DayView) -> CGFloat {
        return 20
    }
    //标记点的尺寸大小
    func dotMarker(sizeOnDayView dayView: DayView) -> CGFloat {
        return 20
    }
    //返回相应日期视图上各个标记点的颜色数组(每个日期最多3个点)
    func dotMarker(colorOnDayView dayView: DayView) -> [UIColor] {
        
        return [UIColor.bg]
        
    }
}




