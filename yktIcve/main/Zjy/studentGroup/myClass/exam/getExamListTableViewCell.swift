//
//  getExamListTableViewCell.swift
//  66iclasscloud
//
//  Created by zqy on 2018/2/7.
//  Copyright © 2018年 zqy. All rights reserved.
//

import UIKit
import SwiftyJSON

class getExamListTableViewCell: UITableViewCell {
    let width = UIScreen.main.bounds.width
    
    required init?(coder aDecoder:NSCoder) {
        super.init(coder: aDecoder)
    }
    
    override init(style:UITableViewCellStyle, reuseIdentifier:String?) {
        
        super.init(style: style, reuseIdentifier: reuseIdentifier);
        
        self.setUI();
    }
    
    override func setSelected(_ selected: Bool, animated: Bool) {
        super.setSelected(selected, animated: animated)
        
        // Configure the view for the selected state
    }
    func setUI(){
        self.addSubview(self.bgView)
        self.bgView.addSubview(self.lab_examName)
        self.bgView.addSubview(self.btn_examRemark)
        self.bgView.addSubview(self.lab_examTime)
        self.bgView.addSubview(self.lab_examType)
        self.bgView.addSubview(self.lab_examState)
        self.bgView.addSubview(self.btn_isMore)
        self.bgView.snp.makeConstraints  { (make) in
            make.width.equalTo(width - 12)
            make.height.equalTo(115)
            make.center.equalTo(self.snp.center)
        }
        let shadowPath = UIBezierPath(roundedRect: bounds, cornerRadius: 0.6)
        self.bgView.layer.masksToBounds = false
        self.bgView.layer.cornerRadius = 6
        self.bgView.layer.shadowColor = UIColor.white.cgColor
        self.bgView.layer.shadowOffset = CGSize.zero // CGSize(width: shadowOffsetWidth, height: shadowOffsetHeight);
        self.bgView.layer.shadowOpacity = 0.11
        self.bgView.layer.shadowPath = shadowPath.cgPath
        self.bgView.layer.borderColor = UIColor.colorWithHex(hexColor: 0x32bd73).cgColor
        self.bgView.layer.borderWidth = 0.08
        self.backgroundColor = UIColor.colorWithHex(hexColor: 0xfafafa)
        self.bgView.isUserInteractionEnabled = true
        
        self.lab_examName.snp.makeConstraints { (make) in
            make.height.equalTo(35)
            make.width.equalTo(width-110)
            make.left.equalTo(self.bgView.snp.left).offset(5)
            make.top.equalTo(self.bgView.snp.top).offset(10)
        }
        self.lab_examTime.snp.makeConstraints { (make) in
            make.height.equalTo(20)
            make.width.equalTo(width - 44)
            make.top.equalTo(self.lab_examName.snp.bottom).offset(3)
            make.left.equalTo(self.bgView.snp.left).offset(10)
        }
        self.btn_examRemark.snp.makeConstraints { (make) in
            make.height.equalTo(20)
            make.width.equalTo(width - 92)
            make.top.equalTo(self.lab_examTime.snp.bottom).offset(3)
            make.left.equalTo(self.bgView.snp.left).offset(10)
        }
        
        self.btn_isMore.snp.makeConstraints { (make) in
            make.height.equalTo(20)
            make.width.equalTo(60)
            make.top.equalTo(self.lab_examTime.snp.bottom).offset(3)
            make.left.equalTo(self.btn_examRemark.snp.right)
        }

        self.lab_examType.snp.makeConstraints { (make) in
            make.height.equalTo(20)
            make.width.equalTo(width - 44)
            make.top.equalTo(self.btn_examRemark.snp.bottom).offset(3)
            make.left.equalTo(self.bgView.snp.left).offset(10)
            
        }
        self.lab_examState.snp.makeConstraints { (make) in
            make.height.equalTo(20)
            make.width.equalTo(60)
            make.right.equalTo(self.bgView.snp.right).offset(-5)
            make.top.equalTo(self.bgView.snp.top).offset(10)
        }
        self.lab_examState.layer.masksToBounds = true
        self.lab_examState.layer.cornerRadius = 5
    }
    func setData(json:JSON){
        lab_examName.text = json["title"].stringValue
        if let score = Float(json["stuExamState"].stringValue) {
            if(score >= 60){
                lab_examState.text = json["stuExamState"].stringValue
                lab_examState.backgroundColor = UIColor.colorWithHex(hexColor: 0xCCFFE6)
                lab_examState.textColor = UIColor.colorWithHex(hexColor: 0x27BE71)
            }else{
                lab_examState.text = json["stuExamState"].stringValue
                lab_examState.backgroundColor = UIColor.colorWithHex(hexColor: 0xFFEAE5)
                lab_examState.textColor = UIColor.colorWithHex(hexColor: 0xE07863)
            }
        }else{
            lab_examState.text = json["stuExamState"].stringValue
            lab_examState.backgroundColor = UIColor.colorWithHex(hexColor: 0xCCCCCC)
            lab_examState.textColor = UIColor.colorWithHex(hexColor: 0x545454)
        }
        lab_examTime.text = "考试时间：\(json["startDate"])~\(json["endDate"])"
        
        if(json["remark"].stringValue != ""){
            //计算字的宽度
            let messtr = "考试要求：\(json["remark"].stringValue)" as NSString
            let widthstr = messtr.size(withAttributes: [NSAttributedStringKey.font:UIFont.systemFont(ofSize: 13)]).width
            btn_examRemark.text = "考试要求：\(json["remark"].stringValue)"
            if widthstr > self.width - 92{
                self.btn_isMore.setTitle("查看更多", for: .normal)
                self.btn_isMore.isHidden = false
            }else{
                self.btn_isMore.isHidden = true
                
            }
        }else{
            btn_examRemark.text = "考试要求：该考试暂无要求"
            self.btn_isMore.isHidden = true
        }
        
        if(json["examType"]==1){
            lab_examType.text = "考试类型：在线考试"
        }else if(json["examType"]==2){
            lab_examType.text = "考试类型：登分考试"
        }
    }
    
    lazy var bgView : UIView = {
        let view = UIView()
        view.backgroundColor = UIColor.white
        return view
    }()
    lazy var lab_examName :UILabel = {
        let lab = UILabel()
        lab.font = UIFont.init(name: "Helvetica-Light", size: 15)
        lab.textColor = UIColor.colorWithHex(hexColor: 0x333333)
        lab.numberOfLines = 2
        return  lab
    }()
    lazy var lab_examTime:UILabel = {
        let lab = UILabel()
        lab.font = UIFont.init(name: "Helvetica-Light", size: 13)
        lab.textColor = UIColor.colorWithHex(hexColor: 0x8F8F8F)
        return  lab
    }()
    lazy var btn_examRemark:UILabel = {
        let lab = UILabel()
        lab.font = UIFont.init(name: "Helvetica-Light", size: 13)
        lab.textColor = UIColor.colorWithHex(hexColor: 0x8F8F8F)
        return  lab
    }()
    lazy var lab_examType :UILabel = {
        let lab = UILabel()
        lab.font = UIFont.init(name: "Helvetica-Light", size: 13)
        lab.textColor = UIColor.colorWithHex(hexColor: 0x8F8F8F)
        return  lab
    }()
    lazy var lab_examState :UILabel = {
        let lab = UILabel()
        lab.font = UIFont.init(name: "Helvetica-Light", size: 13)
        lab.textAlignment = .center
        return  lab
    }()
    lazy var btn_isMore:UIButton = {
        let btn = UIButton()
        btn.isHidden = true
        btn.setTitleColor(UIColor.colorWithHex(hexColor: 0x8F8F8F), for: .normal)
        btn.titleLabel?.font = UIFont.init(name: "Helvetica-Light", size: 13)
        btn.setTitleColor(UIColor.bg, for: .normal)
        btn.titleEdgeInsets = UIEdgeInsetsMake(0, 0, 0, 0);
        return btn
    }()
}
