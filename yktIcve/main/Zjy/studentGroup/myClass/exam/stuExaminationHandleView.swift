//
//  stuExaminationHandleView.swift
//  云课堂-职教云
//
//  Created by zqy on 2018/3/28.
//  Copyright © 2018年 zqy. All rights reserved.
//

import UIKit
import WebKit
import SwiftyJSON
import SCLAlertView

class stuExaminationHandleView : UIViewController,WKScriptMessageHandler ,WKNavigationDelegate{
    let appDelegate = UIApplication.shared.delegate as! AppDelegate
    var myNews : myNewsModel?
    override func viewDidLoad() {
        super.viewDidLoad()
        self.title = self.examTitle
        self.view.backgroundColor = UIColor.white
        self.setWebViewUI()
        let item = UIBarButtonItem(title: "\u{e6f7}返回", style: .plain, target: self, action: #selector(self.backBtnClick))
        self.navigationItem.leftBarButtonItem = item
        common.share.setBackButtonItem(item:item)
        self.navigationController?.navigationBar.tintColor = UIColor.white
    }

    //设置H5页面
    func setWebViewUI(){
        
        let path = Bundle.main.path(forResource: "examination-handle", ofType: ".html",
                                    inDirectory: "HTML5/src/student/exam");
        let url = URL(fileURLWithPath:path!);
        //let request = URLRequest(url:url);
        
        //创建供js调用的接口
        let theConfiguration = WKWebViewConfiguration()
        theConfiguration.userContentController.add(self, name: "interOp")
        
        //将浏览器视图全屏(在内容区域全屏,不占用顶端时间条)
        let frame = CGRect(x:0, y:0, width:UIScreen.main.bounds.width,
                           height:UIScreen.main.bounds.height-60 + CGFloat(HX))
        theWebView = WKWebView(frame:frame, configuration: theConfiguration)
        //禁用页面在最顶端时下拉拖动效果
         theWebView.scrollView.bounces = false;
        //        theWebView.isUserInteractionEnabled = false;
        //加载页面
        if #available(iOS 9.0, *) {
            
            theWebView.loadFileURL(url, allowingReadAccessTo: url)
        } else {
            
            do{
                
                let url1 = try common.share.fileURLForBuggyWKWebView8(fileURL:url as NSURL)
                let request = URLRequest(url:url1 as URL);
                theWebView.load(request)
                
            }catch{}
        }
        //theWebView.load(request)
        theWebView.navigationDelegate = self
        self.view.addSubview(theWebView);
        
    }
    
    func webView(_ webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping (WKNavigationActionPolicy) -> Void) {
        let url = navigationAction.request.mainDocumentURL
        if((url?.scheme?.contains("http"))! || (url?.scheme?.contains("https"))!){
            //
            print("拒绝")
            let vc = linkjumpView()
            vc.linkStr = (navigationAction.request.mainDocumentURL?.absoluteString)!
            self.isPushed = true
            self.navigationController?.pushViewController(vc, animated: true)
            //            UIApplication.shared.openURL(url! as URL)
            decisionHandler(.cancel);
        }else{
            decisionHandler(.allow);
        }

    }
    
    //返回处理h5清除页面，防内存溢出
    override func viewWillDisappear(_ animated: Bool) {
        if(!self.isPushed){
            self.codeTimer?.cancel()
            theWebView.configuration.userContentController.removeScriptMessageHandler(forName: "interOp")
        }
        self.isPushed = false
    }

    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    func userContentController(_ userContentController:WKUserContentController,
                               didReceive message: WKScriptMessage) {
        let sentData = message.body as! Dictionary<String,String>
        
        if(sentData["method"] == "load" ){
            self.theWebView.evaluateJavaScript("examinationhandle.getparameter('\(self.courseOpenId)','\(self.openClassId)','\(self.examId)','\(self.examTermTimeId)','\(Account.defaultAccount.id!)','\(self.examStuId)')",
                completionHandler: nil)
        }else if(sentData["method"] == "unDoExam"){
            //自定义提示框样式
            let appearance = SCLAlertView.SCLAppearance(
                showCloseButton: false //不显示关闭按钮
            )
            //使用自定义样式的提示框
            let alert = SCLAlertView(appearance: appearance)
            alert.addButton("确定") {
                self.close()
            }
            alert.showInfo("温馨提示！", subTitle: sentData["msg"]!)
            
        }else if (sentData["method"] == "complete"){
            self.examStuId = sentData["stuExamId"]!
            self.uniqueId = sentData["uniqueId"]!
            self.paperStructUnique = sentData["paperStructUnique"]!
           self.isSubmit(msg: sentData["msg"]!)
            
        }else if(sentData["method"] == "showMsg"){
            ZKProgressHUD.showMessage(sentData["msg"]!)
        }else if(sentData["method"] == "setTime"){
            self.examStuId = sentData["stuExamId"]!
            self.uniqueId = sentData["uniqueId"]!
            self.paperStructUnique = sentData["paperStructUnique"]!
            self.useTime = Int(sentData["time"]!)!
            self.setTime()
        }else if(sentData["method"] == "previewImg"){
            self.previewImg(url:sentData["url"]!)
        }else if(sentData["method"] == "getUrlById"){
            self.getFileById(Id:sentData["Id"]!)
        }else if(sentData["method"] == "getFileInfoByUrl"){
            self.getFileInfoByUrl(url: sentData["url"]!)
        }else if(sentData["method"] == "uploadImg"){
            self.isPushed = true
            self.uploadImg()
        }

    }
    func close(){
        self.navigationController?.popViewController(animated: true)
    }

    func setTime(){

        // 在global线程里创建一个时间源
        codeTimer = DispatchSource.makeTimerSource(queue:  DispatchQueue.global())
        // 设定这个时间源是每秒循环一次，立即开始
        codeTimer?.schedule(deadline: .now(), repeating: .seconds(1))
        // 设定时间源的触发事件
        codeTimer?.setEventHandler(handler: {
            // 每秒计时一次
            self.useTime = self.useTime - 1

            if(self.useTime == 600){
                ZKProgressHUD.showMessage("距离考试结束还剩10分钟，请注意安排时间")
            }

            if(self.useTime == 0){
                self.codeTimer?.cancel()
                self.submitExam()
            }
            // 返回主线程处理一些事件，更新UI等等
            DispatchQueue.main.async {
                let  seconds = self.useTime % 60;
                let  minutes = Int(self.useTime / 60);
                let title =  "\(minutes):\(seconds)";
                self.title = title
            }
        })
        // 启动时间源
        codeTimer?.resume()
    }

     var codeTimer: DispatchSourceTimer?

    lazy var theWebView:WKWebView = {
        let WK = WKWebView()
        
        return WK
    }()
   
    lazy var courseOpenId: String = {
        return""
    }()
    lazy var openClassId: String = {
        return ""
    }()
    lazy var examStuId: String = {
        return ""
    }()
    lazy var examId: String = {
        return ""
    }()

    lazy var examTermTimeId: String = {
        return ""
    }()
    lazy var examTitle : String = {
        return ""
    }()
    lazy var uniqueId :String = {
        return ""
    }()
    lazy var paperStructUnique :String = {
        return ""
    }()
    lazy var useTime :Int = {
        return 0
    }()
    lazy var uploadUrl : String = {
        return ""
    }()
    lazy var isPushed:Bool = {
        return false
    }()
    //创建一个闭包属性
    var reloadExam :(()->Void)?
    let HX = common.share.returnSafeAreaLineHeight()
    
}

