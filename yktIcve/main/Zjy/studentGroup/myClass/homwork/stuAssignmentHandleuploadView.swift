//
//  assignmenthandleRecordUploadImgView.swift
//  云课堂职教云
//
//  Created by 尤增强 on 2018/4/10.
//  Copyright © 2018年 jcjy. All rights reserved.
//

import UIKit
import Alamofire
import SwiftyJSON
import MobileCoreServices
extension stuAssignmentHandleView:UIImagePickerControllerDelegate,UINavigationControllerDelegate {

    //处理获取到的图片
    func getImgOne(img: UIImage) {
        self.uploadUrl = appAPI.uploadUrl;
        //  self.prefixUrl = appAPI.prefixUrl;

        //let fileURL1 = Bundle.main.url(forResource: "faceMS", withExtension: "png")
        let fileManager = FileManager.default
        let rootPath = NSSearchPathForDirectoriesInDomains(.documentDirectory,
                                                           .userDomainMask, true)[0] as String
        let date = NSDate(),
        timeInterval = date.timeIntervalSince1970 * 1000

        let filePath = "\(rootPath)/" + String(timeInterval) + ".jpg"

        let  imageData =  common.share.resetImgSize(sourceImage: img, maxImageLenght: 0, maxSizeKB: 200)

        fileManager.createFile(atPath: filePath, contents: imageData, attributes: nil)
        let imageNSURL = URL.init(fileURLWithPath: filePath)

        ZKProgressHUD.show("0 %")
        Alamofire.upload(multipartFormData: { multipartFormData in
            multipartFormData.append(imageNSURL, withName: "file1")
        },to: self.uploadUrl,encodingCompletion: { encodingResult in
            switch encodingResult {
            case .success(let upload, _, _):
                upload.responseJSON { response in
                    let result = JSON(response.result.value ?? "");
                    ZKProgressHUD.hide(delay: 0)
                    self.theWebView.evaluateJavaScript("assignmenthandle.uploadImg(\(result))",
                        completionHandler: nil)
                    }.uploadProgress { progress in // main queue by default

                        ZKProgressHUD.show("\(String(format: "%.1f", progress.fractionCompleted * 100)) %")
                }
            case .failure(let encodingError):
                print(encodingError)
            }
        })
    }
    //底部弹窗
    func uploadImg(){
        //判断是否开启打开相册权限
        if(!common.share.isAuthorizePhotos()){
            common.share.authorizePhotos()
        }else{
            self.upload()
        }
    }
    //底部弹窗
    func upload(){

        if( self.uploadUrl.isEmpty){
            common.share.getUploadUrl();
        }
        let userIconAlert = UIAlertController(title: "请选择操作", message: "", preferredStyle: UIAlertControllerStyle.actionSheet)

        let chooseFromPhotoAlbum = UIAlertAction(title: "从相册选择", style: UIAlertActionStyle.default, handler: funcChooseFromPhotoAlbum)
        userIconAlert.addAction(chooseFromPhotoAlbum)

        let chooseFromCamera = UIAlertAction(title: "拍照", style: UIAlertActionStyle.default,handler:funcChooseFromCamera)
        userIconAlert.addAction(chooseFromCamera)

        let chooseFromPhotoVideo = UIAlertAction(title: "视频", style: UIAlertActionStyle.default, handler: funcChooseFromPhotoVideo)
        userIconAlert.addAction(chooseFromPhotoVideo)

        let canelAction = UIAlertAction(title: "取消", style: UIAlertActionStyle.cancel,handler: nil)
        userIconAlert.addAction(canelAction)

        if(UIDevice.current.model == "iPad")
        {
            let mine = UIView.init(frame: CGRect(x:self.view.bounds.width/2,y:self.view.bounds.height,width:20,height:20))
            self.view.addSubview(mine)
            let popPresenter =  userIconAlert.popoverPresentationController

            popPresenter?.sourceView = mine
            popPresenter?.sourceRect = mine.bounds
            self.present(userIconAlert, animated: true, completion: nil)
        }
        else{
            self.present(userIconAlert, animated: true, completion: nil)
        }

    }

    //从相册选择视频
    func funcChooseFromPhotoVideo(_ avc:UIAlertAction) -> Void{


        if UIImagePickerController.isSourceTypeAvailable(.photoLibrary) {
            //初始化图片控制器
            let imagePicker = UIImagePickerController()
            //设置代理
            imagePicker.delegate = self
            //指定图片控制器类型
            imagePicker.sourceType = .photoLibrary
            //只显示视频类型的文件
            imagePicker.mediaTypes = [kUTTypeMovie as String]
            //不需要编辑
            imagePicker.allowsEditing = false

            UIDevice.current.setValue(UIInterfaceOrientation.landscapeLeft.rawValue, forKey: "orientation")
            //弹出控制器，显示界面
            self.present(imagePicker, animated: true, completion: nil)
        }
        else {
            print("读取相册错误")
        }

    }

    //从相册选择照片
    func funcChooseFromPhotoAlbum(_ avc:UIAlertAction) -> Void{


        let masterVC = HsuAlbumMasterTableViewController()
        let navi = UINavigationController(rootViewController: masterVC)
        masterVC.title = "图片"
        let gridVC = HsuAssetGridViewController()
        gridVC.title = "所有图片"
        let leftBarBtn = UIBarButtonItem(title: "", style: .plain, target: self,
                                         action:nil)
        gridVC.navigationItem.leftBarButtonItem = leftBarBtn
        navi.pushViewController(gridVC, animated: false)

        UIDevice.current.setValue(UIInterfaceOrientation.landscapeLeft.rawValue, forKey: "orientation")
        present(navi, animated: true)

        HandleSelectionPhotosManager.share.getSelectedPhotos(with: 1) { (assets, images) in


            self.getImgOne(img: images[0])
        }


    }

    func funcChooseFromCamera(_ avc:UIAlertAction) -> Void{
        if UIImagePickerController.isSourceTypeAvailable(UIImagePickerControllerSourceType.camera) {
            let imagePicker = UIImagePickerController()

            //设置代理
            imagePicker.delegate = self
            //允许编辑
            imagePicker.isEditing = false;
            //设置图片源
            imagePicker.sourceType = UIImagePickerControllerSourceType.camera
            //模态弹出IamgePickerView

            self.present(imagePicker, animated: true, completion: nil)

        }else{
            print("模拟器不支持拍照功能")
        }
    }

    func imagePickerControllerDidCancel(_ picker: UIImagePickerController){
        picker.dismiss(animated: true, completion: nil)
    }

    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : Any]) {
        //获取照片的原图
        if let image :UIImage = (info as NSDictionary).object(forKey: UIImagePickerControllerOriginalImage)as?UIImage{
            //获得编辑后的图片
            //let image = (info as NSDictionary).object(forKey: UIImagePickerControllerEditedImage)as!UIImage
            self.getImgOne(img: image);
        }else{
            let videoURL = info[UIImagePickerControllerMediaURL] as! URL
            self.getVideoOne(url: videoURL)
        }

        picker.dismiss(animated: true, completion: nil)
    }

    //处理获取
    func getVideoOne(url:URL) {
        self.uploadUrl = appAPI.uploadUrl;
        XLBallLoading.show(in: self.theWebView)
        Alamofire.upload(multipartFormData: { multipartFormData in
            multipartFormData.append(url, withName: "file1")
        },to: self.uploadUrl,encodingCompletion: { encodingResult in
            switch encodingResult {
            case .success(let upload, _, _):
                upload.responseJSON { response in
                    let result = JSON(response.result.value ?? "");
                    XLBallLoading.hide(in: self.theWebView)
                    self.theWebView.evaluateJavaScript("assignmenthandle.uploadvideo(\(result))",
                        completionHandler: nil)
                    }.uploadProgress { progress in // main queue by default

                        //                        ZKProgressHUD.show("\(String(format: "%.1f", progress.fractionCompleted * 100)) %")
                }
            case .failure(let encodingError):
                print(encodingError)
            }
        })
    }

}

