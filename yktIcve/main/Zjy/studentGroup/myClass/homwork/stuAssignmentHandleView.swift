//
//  stuAssignmentHandleView.swift
//  云课堂-职教云
//
//  Created by zqy on 2018/3/28.
//  Copyright © 2018年 zqy. All rights reserved.
//

import UIKit
import WebKit
import SwiftyJSON
import SCLAlertView
class stuAssignmentHandleView : UIViewController,WKScriptMessageHandler,WKNavigationDelegate {
    let appDelegate = UIApplication.shared.delegate as! AppDelegate
    override func viewDidLoad() {
        super.viewDidLoad()
        self.title = self.homeworktitle
        self.view.backgroundColor = UIColor.white
        self.setWebViewUI()
       
        let item = UIBarButtonItem(title: "\u{e6f7}返回", style: .plain, target: self, action: #selector(self.backBtnClick))
        self.navigationItem.leftBarButtonItem = item
        common.share.setBackButtonItem(item:item)
        
        
        //用于设置子界面返回字样
        let item1 = UIBarButtonItem(title: "返回", style: .plain, target: self, action: nil)
        self.navigationItem.backBarButtonItem = item1
      
        
        self.navigationController?.navigationBar.tintColor = UIColor.white
    }
    //返回按钮
  @objc  func backBtnClick() {
        if(self.uniqueId.isEmpty && self.paperStructUnique.isEmpty){
            self.navigationController?.popViewController(animated: true)
        }else{
        let alertController = UIAlertController(title: "警告", message: "你当前处于做题状态，退出后将不会保存此次作业草稿，请确认是否保存？", preferredStyle: .alert)
        //设置 Actions   点击出发的响应事件都写在相应的代码块里
        let noAction = UIAlertAction(title: "不保存", style: .cancel){ (action) -> Void in
            self.navigationController?.popViewController(animated: true)
        }
        let yesAction = UIAlertAction(title: "保存", style: .default){ (action) -> Void in
            self.isDraft = "1"
            self.submit()
        }
        //添加 Actions，添加的先后和显示的先后顺序是有关系的
        alertController.addAction(noAction)
        alertController.addAction(yesAction)
        //展示Alert Controller
        self.present(alertController, animated: true, completion: nil)
        }
    }
    //设置H5页面
    func setWebViewUI(){
        
        let path = Bundle.main.path(forResource: "assignment-handle", ofType: ".html",
                                    inDirectory: "HTML5/src/student/assignment");

        let url = URL(fileURLWithPath:path!);

        //let request = URLRequest(url:url);
        
        //创建供js调用的接口
        let theConfiguration = WKWebViewConfiguration()
        theConfiguration.userContentController.add(self, name: "interOp")
        
        //将浏览器视图全屏(在内容区域全屏,不占用顶端时间条)
        let frame = CGRect(x:0, y:0, width:UIScreen.main.bounds.width,
                           height:UIScreen.main.bounds.height-60 + CGFloat(HX))
        theWebView = WKWebView(frame:frame, configuration: theConfiguration)
        //禁用页面在最顶端时下拉拖动效果
                theWebView.scrollView.bounces = false;
        //        theWebView.isUserInteractionEnabled = false;
        //加载页面
        if #available(iOS 9.0, *) {
            
            theWebView.loadFileURL(url, allowingReadAccessTo: url)
        } else {
            
            do{
                
                let url1 = try common.share.fileURLForBuggyWKWebView8(fileURL:url as NSURL)
                let request = URLRequest(url:url1 as URL);
                theWebView.load(request)
                
            }catch{}
        }
        //theWebView.load(request)
        theWebView.navigationDelegate = self
        self.view.addSubview(theWebView);
        
    }

    override func viewWillAppear(_ animated: Bool) {
        self.tabBarController?.tabBar.isHidden = true//隐藏tabbar
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    func userContentController(_ userContentController:WKUserContentController,
                               didReceive message: WKScriptMessage) {
        
        let sentData = message.body as! Dictionary<String,String>
        

        if(sentData["method"] == "load" ){
            self.theWebView.evaluateJavaScript("assignmenthandle.getparameter('\(self.courseOpenId)','\(self.openClassId)','\(self.homeWorkId)','\(self.homeworkTermTimeId)','\(Account.defaultAccount.id!)','\(self.homeworkStuId)')",
                completionHandler: nil)
            self.setTime()
        }else if (sentData["method"] == "complete"){
            self.uniqueId = sentData["uniqueId"]!
            self.paperStructUnique = sentData["paperStructUnique"]!
            self.isDraft =  sentData["isDraft"]!
            if(sentData["isDraft"]  == "1"){
                self.submit()
            }else {
                 self.getUnDoQuestionCount()
            }

        }else if(sentData["method"] == "showMsg"){
            ZKProgressHUD.showMessage(sentData["msg"]!)
        }else if(sentData["method"] == "previewImg"){
            self.previewImg(url:sentData["url"]!)
        }else if(sentData["method"] == "getUrlById"){
            self.getFileById(Id:sentData["Id"]!)
        }else if(sentData["method"] == "getFileInfoByUrl"){
            self.getFileInfoByUrl(url: sentData["url"]!)
        }else if(sentData["method"] == "uploadImg"){
            self.isPushed = true
            self.uploadImg()
        }else if(sentData["method"] == "setID"){
            self.uniqueId = sentData["uniqueId"]!
            self.paperStructUnique = sentData["paperStructUnique"]!
        }
    }

    //返回处理h5清除页面，防内存溢出
    override func viewWillDisappear(_ animated: Bool) {
        if(!self.isPushed){
             self.codeTimer?.cancel()
            theWebView.configuration.userContentController.removeScriptMessageHandler(forName: "interOp")
        }
        self.isPushed = false
    }
    func webView(_ webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping (WKNavigationActionPolicy) -> Void) {
        let url = navigationAction.request.mainDocumentURL
        if((url?.scheme?.contains("http"))! || (url?.scheme?.contains("https"))!){
            //
            print("拒绝")
            let vc = linkjumpView()
            vc.linkStr = (navigationAction.request.mainDocumentURL?.absoluteString)!
            self.isPushed = true
            vc.hidesBottomBarWhenPushed = true
            self.navigationController?.pushViewController(vc, animated: true)
//            //            UIApplication.shared.openURL(url! as URL)
            decisionHandler(.cancel);
        }else{
            decisionHandler(.allow);
        }

    }
    func doneSuccess (){
        
        let count  = self.navigationController?.viewControllers.count
        if  let vc :getHomeworkListView = self.navigationController?.viewControllers[count! - 2] as? getHomeworkListView   {
            vc.refreshItemData(isRefresh: false)
        }
        self.navigationController?.popViewController(animated: true)
        
    }

    func setTime(){

        // 在global线程里创建一个时间源
        codeTimer = DispatchSource.makeTimerSource(queue:  DispatchQueue.global())
        // 设定这个时间源是每秒循环一次，立即开始
        codeTimer?.schedule(deadline: .now(), repeating: .seconds(1))
        // 设定时间源的触发事件
        codeTimer?.setEventHandler(handler: {
            // 每秒计时一次
            self.useTime = self.useTime + 1


            // 返回主线程处理一些事件，更新UI等等
            DispatchQueue.main.async {
                let  seconds = self.useTime % 60;
                let  minutes = Int(self.useTime / 60);
                let title =  "\(minutes):\(seconds)";
                self.title = title
            }
        })
        // 启动时间源
        codeTimer?.resume()
    }

    var codeTimer: DispatchSourceTimer?

    lazy var theWebView:WKWebView = {
        let WK = WKWebView()
        
        return WK
    }()
    var userInfo:Account!
    lazy var courseOpenId: String = {
        return""
    }()
    lazy var openClassId: String = {
        return ""
    }()
    lazy var homeWorkId: String = {
        return ""
    }()
    lazy var homeworkTermTimeId: String = {
        return ""
    }()
    lazy var homeworktitle: String = {
        return ""
    }()
    lazy var homeworkStuId: String = {
        return ""
    }()
    lazy var uniqueId : String = {
        return ""
    }()
    lazy var isPushed:Bool = {
        return false
    }()

    lazy var useTime :Int = {
        return 0
    }()
    lazy var uploadUrl : String = {
        return ""
    }()
    lazy var paperStructUnique :String = {return ""}()
    lazy var isDraft :String = {return ""}()
    //创建一个闭包属性
    var reloadhomework :(()->Void)?
    let HX = common.share.returnSafeAreaLineHeight()
}




