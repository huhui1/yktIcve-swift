//
//  groupHomeworkViewController.swift
//  云课堂2
//
//  Created by 尤增强 on 2018/7/6.
//  Copyright © 2018年 zqyou. All rights reserved.
//

import UIKit
import Alamofire
import SwiftyJSON
import SCLAlertView
extension groupHomeworkView{

    //获取数据
    /// <param name="openClassId">开班Id</param>
    /// <param name="homeworkId">作业Id</param>
    /// <param name="stuId">学生Id</param>
    /// <param name="homeworkStuId">学生作业Id（附件作业用）</param>
    /// <param name="sourceType">数据来源</param>
    func getData(){

        let dict = ["openClassId":self.openClassId,
                    "homeworkId":self.homeWorkId,
                    "stuId":Account.defaultAccount.id!,
                    "homeworkStuId":self.homeworkStuId,
                    "sourceType":3] as [String : Any]
        XLBallLoading.show(in: self.view)
        Alamofire.request(appAPI.Homework_getHomeworkPreview, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let r = JSON(value)
                if r["code"] == 1{
                  
                    self.stuAnswerPreviewUrl = r["data"]["stuAnswerPreviewUrl"].stringValue
                    self.stuAnswerUploadUrl =  r["data"]["stuAnswerUploadUrl"].stringValue
                    self.questionsFile = r["data"]["questions"].arrayValue
                    for i in r["data"]["studentAnswer"]{
                        let m = UploadDocModel.init(homeWorkFile: i.1,ztWay:r ["data"]["ztWay"].intValue)
                        self.studentAnswer.append(m)
                    }
                    self.textView.text = r["data"]["answerContent"].stringValue
                    self.setTextView()
                    self.setTime()
                    self.setImg()
                    self.Collection.reloadData()
                    self.stuCollectionView.reloadData()
                }else{
                    ZKProgressHUD.showMessage(r["msg"].string)
                }
                XLBallLoading.hide(in: self.view)
            }else{
                ZKProgressHUD.showMessage("网络异常请稍后再试！");
                XLBallLoading.hide(in: self.view)
            }
        }
    }
    func setImg(){
        if !self.ischeck{
            if self.ztWay == 3{
                if(self.studentAnswer.count < self.maxImgCount){
                    let  m = UploadDocModel.init(data: JSON(), img:UIImage.init(named: "scancode_photo")!)
                      m.isAdd = true
                    self.studentAnswer.insert(m, at: 0)
                }
            }else{
                var IsMyImgCount = 0
                for i in self.studentAnswer{
                    if i.IsMyFile{
                        IsMyImgCount = IsMyImgCount + 1
                    }
                }
                if(IsMyImgCount < self.maxImgCount){
                    let  m = UploadDocModel.init(data: JSON(), img:UIImage.init(named: "scancode_photo")!)
                      m.isAdd = true
                    self.studentAnswer.insert(m, at: 0)
                }
            }
        }
    }
    //通过附件Id
    func getFileById(Id:String){

        let dict = ["Id": Id]

        XLBallLoading.show(in: self.view)
        Alamofire.request(appAPI.Homework_getFileHomeworkUrlById, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in

            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{
                    self.pushpreviewVC(json: json)
                }else{
                    ZKProgressHUD.showError(json["msg"].stringValue);
                }
                XLBallLoading.hide(in: self.view)
            }else{
                XLBallLoading.hide(in: self.view)
                ZKProgressHUD.showError("网络环境异常请稍后再试！");
            }
        }

    }

    //通过附件url
    func getFileByUrl(URL:String){
        let dict = ["url": URL]

        XLBallLoading.show(in: self.view)
        Alamofire.request(appAPI.MobileLogin_getFileInfoByUrl, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in

            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{
                    self.pushpreviewVC(json: json)
                }else{
                    ZKProgressHUD.showError(json["msg"].stringValue);
                }
                XLBallLoading.hide(in: self.view)
            }else{
                ZKProgressHUD.showError("网络环境异常请稍后再试！");
                XLBallLoading.hide(in: self.view)
            }
        }
    }



    func submitHomework(isDraft:Int){

        /// <param name="homeworkStuId">学生作业Id</param>
        /// <param name="openClassId">开班Id</param>
        /// <param name="homeworkId">作业ID</param>
        /// <param name="homeworkTermTimeId">作业时间ID</param>
        /// <param name="answerContent">学生内容</param>
        /// <param name="stuAnswerDocJson">
        ///     学生附件：[{
        ///         docTitle:文件标题
        ///         docSize:文件大小
        ///         docUrl:文件url
        ///         Md5:文件md5
        ///         docType:文件类型（jpg,doc,ppt...）
        ///     },....](注意大小写)
        /// </param>
        /// <param name="stuId">学生ID</param>
        /// <param name="useTime">用时</param>
        /// <param name="sourceType">数据来源</param>
        /// <param name="isDraft">1、草稿，0、不是草稿</param>
        var stuAnswerDocJson = [Dictionary<String,Any>]()
        for i in self.studentAnswer{

            if i.docUrl.isEmpty{
                continue
            }
            let s = ["docTitle":i.docTitle,"docSize":i.size,"docUrl":i.docUrl,"Md5":i.md5,"docType":i.type,"Id":i.Id] as [String : Any]

            stuAnswerDocJson.append(s)
        }
        if self.textView.text == "请输入回答内容"{
            self.textView.text = ""
        }
        let dict = ["courseOpenId":self.courseOpenId,
                    "homeworkStuId":self.homeworkStuId,
                    "homeworkId":self.homeWorkId,
                    "openClassId":self.openClassId,
                    "homeworkTermTimeId":self.homeworkTermTimeId,
                    "useTime":self.answer_time,
                    "sourceType":3,
                    "answerContent":self.textView.text,
                    "stuAnswerDocJson":JSON.init(stuAnswerDocJson),
                    "isDraft":isDraft,
                    "stuId":Account.defaultAccount.id!] as [String : Any]
        XLBallLoading.show(in: self.view)

        Alamofire.request(appAPI.Homework_stuSubmitFileHomework, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let r = JSON(value)
                if r["code"] == 1{
               NotificationCenter.default.post(name:NSNotification.Name("refreshStuHomeworkList"), object: nil);
                NotificationCenter.default.post(name:NSNotification.Name("refreshstuRecord"), object: nil);
                   self.navigationController?.popViewController(animated: true)
                }else{
                    ZKProgressHUD.showMessage(r["msg"].string)
                }
                XLBallLoading.hide(in: self.view)
            }else{
                ZKProgressHUD.showMessage("网络异常请稍后再试！");
                XLBallLoading.hide(in: self.view)
            }
        }

    }
    
    
    //删除自己的回答
    func deleteCommentaryFileById(Id:String){
        let dict = ["Id":Id]
        Alamofire.request(appAPI.Homework_deleteCommentaryFileById, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
             //   let r = JSON(value)
                
            }else{
                ZKProgressHUD.showMessage("网络异常请稍后再试！");
    
            }
        }
    }
    
    
    //跳转到相应界面
    func pushpreviewVC(json:JSON){
        let type = json["categoryName"].stringValue
        let jsonUrl = JSON.init(parseJSON: json["url"].stringValue)
        switch type {
        case "视频":
            let vc = videoPlayView()
            vc.courseOpenId = self.courseOpenId
            vc.isFromZjyErrorQuestion = true
            vc.videourls.removeAll()
            //拼接URL
            for (key, value) in  jsonUrl["args"]{
                if jsonUrl["urls"]["preview_oss_gen"].stringValue.isEmpty{
                    if value.boolValue{
                        let videoUrl = "\(jsonUrl["urls"]["preview"].stringValue)/\(key).mp4"
                        vc.videourls.append(videoUrl)
                    }
                }else{
                    if value.boolValue{
                        let videoUrl = "\(jsonUrl["urls"]["preview_oss_gen"].stringValue)/\(key).mp4"
                        vc.videourls.append(videoUrl)
                    }
                }

            }
            if(vc.videourls.count < 1){
              SCLAlertView().showInfo("温馨提示！", subTitle: "文件暂无法查看，未完成转换或转换失败",closeButtonTitle: "确定")
                return
            }
            self.isPushed = true
            self.keyboardPush = true
            vc.hidesBottomBarWhenPushed = true
            self.navigationController?.pushViewController(vc, animated: true)


        case "图片":
            let vc = PicturePreviewView()
            vc.imgurl = jsonUrl["urls"]["preview"].stringValue
            if(jsonUrl["urls"]["preview"].stringValue.isEmpty){
                vc.imgurl = json["urls"]["preview_oss_ori"].stringValue
            }
            self.isPushed = true
            self.keyboardPush = true
            vc.hidesBottomBarWhenPushed = true
            self.navigationController?.pushViewController(vc, animated: true)
//        case "图文":
//            let vc = courseware_tuWenView()
//            vc.courseOpenId = self.courseOpenId
//            vc.openClassId = self.openClassId
//            vc.hidesBottomBarWhenPushed = true
//            self.navigationController?.pushViewController(vc, animated: true)
//        case "压缩包":
//            let vc = courseware_tuWenView()
//            vc.courseOpenId = self.courseOpenId
//            vc.openClassId = self.openClassId
//            vc.hidesBottomBarWhenPushed = true
//            self.navigationController?.pushViewController(vc, animated: true)
        case "音频":
            let vc = audioViewController()
            vc.courseOpenId = self.courseOpenId
            vc.openClassId = self.openClassId
            vc.isNet = true
            vc.isKJ = false
            if jsonUrl["urls"]["preview"].stringValue.isEmpty{
                let str = jsonUrl["urls"]["preview_oss_ori"].stringValue
                vc.audiourl = str.substring(toIndex: str.length - 9)
            }else{
                let str = jsonUrl["urls"]["preview"].stringValue
                vc.audiourl = str.substring(toIndex: str.length - 9)
            }
            self.isPushed = true
            self.keyboardPush = true
            vc.hidesBottomBarWhenPushed = true
            self.navigationController?.pushViewController(vc, animated: true)
        case "ppt":
            if(jsonUrl["isH5"] != 1){
                let vc = stuImage_ppt_wordPreviewVC()
                vc.courseOpenId = self.courseOpenId
                vc.openClassId = self.openClassId
                vc.isfirst = false
                vc.resourceUrl = json["url"].stringValue
                self.isPushed = true
                self.keyboardPush = true
                vc.hidesBottomBarWhenPushed = true
                self.navigationController?.pushViewController(vc, animated: true)
            }else{
                let vc = PPT_Animation_PreviewView()
                vc.courseOpenId = self.courseOpenId
                vc.openClassId = self.openClassId
                vc.linkStr = jsonUrl["h5PreviewUrl"].stringValue
                self.isPushed = true
                self.keyboardPush = true
                vc.hidesBottomBarWhenPushed = true
                self.navigationController?.pushViewController(vc, animated: true)
            }
          case "文档":
                let vc = stuImage_ppt_wordPreviewVC()
                vc.courseOpenId = self.courseOpenId
                vc.openClassId = self.openClassId
                vc.isfirst = false
                vc.resourceUrl = json["url"].stringValue
                self.isPushed = true
                self.keyboardPush = true
                vc.hidesBottomBarWhenPushed = true
                self.navigationController?.pushViewController(vc, animated: true)

        default:
            SCLAlertView().showInfo("温馨提示！", subTitle: "暂不支持打开,请从网页查看",closeButtonTitle: "确定")
        
    }

}
}
