//
//  ZykCourseWareView.swift
//  云课堂2
//
//  Created by cc on 2018/7/3.
//  Copyright © 2018年 zqyou. All rights reserved.
//

import UIKit
import SwiftyJSON
import Alamofire
class ZykCourseWareView: UIViewController,UITableViewDataSource,UITableViewDelegate {
    //带属性监视器的普通属性
    var moduleList = [ZykcourseModule]()
    
    var sentionTitles = [JSON](){
        willSet
        {
            
        }
        didSet
        {
            self.makeData()
        }
    }
    var isRefesh:Bool = false
    var cellIndexId = ""
    var cellIndexPathRow:Int = -999
    var cellIndexPathSection:Int = -999
    var ZykCourseKjModel: ZykCourseKjModel!
    lazy var type :Int = 1
    lazy var isHas:Bool = false
    lazy var resId = "";
    lazy var courseOpenId = "";
    lazy var sectionId = "";
    lazy var jsonlist : JSON =  {
        return []
    }()
    var cellTitles = [courseCell]()
    let cellArray : NSMutableArray = NSMutableArray()
    @IBOutlet var tableview: UITableView!
    override func viewDidLoad() {
        super.viewDidLoad()
        self.view.backgroundColor = UIColor.white
        // Do any additional setup after loading the view.
        setUpTableview()
        self.isRefesh = true
        print("1")
        self.automaticallyAdjustsScrollViewInsets = false
    }
    init() {
        super.init(nibName: "ZykCourseWareView", bundle: nil)
    }
    
    required init?(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    func setUpTableview(){
        tableview.delegate = self
        tableview.dataSource = self
        tableview.tableFooterView = UIView.init()
        tableview.separatorStyle = UITableViewCellSeparatorStyle.singleLine
        tableview.estimatedRowHeight = 200 //预设cell高度
        tableview.rowHeight = UITableViewAutomaticDimension
    }
    //MARK:-UITableViewDelegate
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        //  获取数据判断是topic 还是cell
        let courseModule = self.moduleList[indexPath.section]
        let t = self.getshowList(model:courseModule, _section: indexPath.row)
        //如果是topic 判断是否有cell 没有请求接口
        if(t.level == 2){
            t.isUnfold = !t.isUnfold
            if(t.cell.count < 1){
                self.getCellList(indexPath: indexPath, topic: t)
            }else{
                self.tableview.reloadSections(IndexSet.init(integer: indexPath.section), with: .automatic)
            }
        }else{
            if !self.isHas{
                ZKProgressHUD.showMessage("必须参加学习后才能观看该课程资源！");
                return
            }
            
            self.cellIndexPathSection = indexPath.section
            self.cellIndexPathRow = indexPath.row
            self.cellIndexId = t.id
    
            
            self.ZykCourseKjModel.cellType.cellId = t.childNodeListId
            self.ZykCourseKjModel.cellType.courseOpenId = self.courseOpenId
            self.ZykCourseKjModel.cellType.cellName = t.categoryName
            self.ZykCourseKjModel.cellType.celltitle = t.title
            self.ZykCourseKjModel.cellType.type = t.cellType
        }
        
        
    }
    //MARK:-UITableViewDataSource
    func numberOfSections(in tableView: UITableView) -> Int {
        return moduleList.count
    }
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 52
    }
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let view : HelpSectionHeader = HelpSectionHeader()
        
        view.spreadBtn.isSelected = self.moduleList[section].isUnfold
        view.spreadBlock = {  () -> Void in
            self.moduleList[section].isUnfold = !self.moduleList[section].isUnfold
            self.getTopicList(moduleId: self.moduleList[section].moduleId,section:section)
            
        }
      
        view.titleLabel.text = self.moduleList[section].title
        return view
    }
    func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
        return 1
    }
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        
      return self.getCellNum(model:self.moduleList[section], _section: section)
        
    }
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 50
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let courseModule = self.moduleList[indexPath.section]
        let courseTopicModule = self.getshowList(model:courseModule, _section: indexPath.row)
        
        let identifier = "cell\(courseTopicModule.id)"
        if ( courseTopicModule.level == 2){
            self.tableview.register(UINib.init(nibName: "courseWareViewTopic", bundle: Bundle.main), forCellReuseIdentifier: identifier)
            let cell : courseWareViewTopic = tableview.dequeueReusableCell(withIdentifier: identifier, for: indexPath) as! courseWareViewTopic
            
            cell.setZykModel(courseTopicModule: courseTopicModule)
            return cell
        }else{
            self.tableview.register(UINib.init(nibName: "courseWareViewCell", bundle: Bundle.main), forCellReuseIdentifier: identifier)
            let cell : courseWareViewCell = tableview.dequeueReusableCell(withIdentifier: identifier, for: indexPath) as! courseWareViewCell
            cell.setZykModel(model: courseTopicModule)
          
            return cell
        }
    }
    
}
extension ZykCourseWareView {
    func reloadList(){
        let courseModule = self.moduleList[self.cellIndexPathSection]
        let t = self.getshowList(model:courseModule, _section: self.cellIndexPathRow)
        if self.ZykCourseKjModel.sectionId == nil{
            return
        }
        let dict = ["courseId":self.courseOpenId,
                    "sectionId":self.ZykCourseKjModel.sectionId!,
                    "type":1,
                    "token":Account.defaultAccount.token!] as [String : Any]
        Alamofire.request(ZYKAPI.course_courseInfo, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{
                    for i in  json["list"]{
                        if i.1["sourselist"].isEmpty{
                          //判断资源下有几个knowSourselist
                            for w in 0...json["list"].count{
                                for j in i.1["list1"][w]["knowSourselist"]{
                                    if  j.1["Id"].stringValue == self.cellIndexId && j.1["status"].intValue == 1{
                                        t.isStudyFinish = true
                                        let indexPath = IndexPath.init(row: self.cellIndexPathRow, section: self.cellIndexPathSection)
                                        self.tableview.reloadRows(at: [indexPath], with: .automatic)
                                    }
                                 }
                              }
                        }else{
                            for k in i.1["sourselist"]{
                                if  k.1["Id"].stringValue == self.cellIndexId && k.1["status"].intValue == 1{
                                    t.isStudyFinish = true
                                    let indexPath = IndexPath.init(row: self.cellIndexPathRow, section: self.cellIndexPathSection)
                                    self.tableview.reloadRows(at: [indexPath], with: .automatic)
                                }
                            }
                        }
                    }
            }else{
                //ZKProgressHUD.showMessage(json["msg"].stringValue);
            }

        }
     }
   }
}
