//
//  audioViewController.swift
//  66iclasscloud
//
//  Created by 尤增强 on 2017/12/7.
//  Copyright © 2017年 zqy. All rights reserved.
//

import UIKit
import AVFoundation
import Alamofire
import SwiftyJSON
import SCLAlertView
class audioViewController: UIViewController {
    var ZykCourseKjModel: ZykCourseKjModel?
    var StuCourseKJModel: ZJY_StuCourseKJModel?
    let reachability = Reachability()
    var MOOCCourseKJModel: MOOCCourseKJModel?
    lazy var makeView:UIView = {
        let view = UIView()
        return view
    }()
    var isNeedUpdate = false
    var isFromZyk:Bool = false
    var token = "" //学习课件的token,用于记录日志
    lazy var enterTime:Int = 0
    lazy var studyCellTime:Int = 0
    lazy var stuCellPicCount:Int = 0
    lazy var cellLogId:String = ""
    let tittlelab = UILabel();
    lazy var leavelocation:Int = 0     //离开时的位置
    lazy var IsFromMooc:Bool = false //是否从Mooc进来的
    var player = AVPlayer()
    var audiourl = "";
    var isNet = false;
    var ht = 30
    let width = UIScreen.main.bounds.width;
    let height = UIScreen.main.bounds.height;
    var isAllowDownLoad = false
    var isPlay = false //记录是否在播放
    var foreImageView = UIImageView()
    var timeObserver: Any! //播放时间的监听
    
    var isPushed = false
    var isKJ = false
    var isStu = false
    var openClassId = "";
    var courseOpenId = "";
    var cellId = "";
   
    var moduleId = ""
    var musicDuration: Float64 = 1 //单曲的总时长
    var playedMusicLength = 0
  
    var isSliderEdit = false
    var isremoveObserver = true
    var playBtn = UIButton()
    var progressLabel =  UILabel()
    var allTimeLabel = UILabel()
    var downProgress = UIProgressView()
    var mySlider = UISlider()
    var utilBtn = UIButton()
    var dowBtn = UIButton()
    var courseBBSRefresh = CourseBBSAction.init(ActionName: "")
    lazy var bbsView :audioBBSAreaView = {
        let v  = audioBBSAreaView()
        v.courseBBSRefresh = self.courseBBSRefresh
        v.backgroundColor = UIColor.init(red: 0, green: 0, blue: 0, alpha: 0.2)
        v.isHidden = true
        return v
    }()
    
    override func viewDidLoad() {
        super.viewDidLoad();

        self.courseBBSRefresh.addObserver(self, forKeyPath: "ActionName", options: [.new, .old], context: nil)
        self.setUI();
        let Item = UIBarButtonItem(title: "返回", style: .plain, target: self, action: nil)
        self.navigationItem.backBarButtonItem = Item
        let itemBack = UIBarButtonItem(title: "\u{e6f7}返回", style: .plain, target: self, action: #selector(self.backBtnClick))
        self.navigationItem.leftBarButtonItem = itemBack
        common.share.setBackButtonItem(item:itemBack)
        self.navigationController?.navigationBar.tintColor = UIColor.white

        self.playBtn.isEnabled = false
        self.mySlider.value = 0.0

        mySlider.addTarget(self, action: #selector(self.sliderDidchange(send:)), for: .valueChanged)
        mySlider.addTarget(self, action: #selector(self.sliderTouch(send:)), for: .touchUpInside)
        mySlider.addTarget(self, action: #selector(self.sliderTouchOut(send:)), for: .touchUpOutside)


        let str = self.audiourl;
        var url = URL(string: str)
        if(!self.isNet ){
            // 沙盒（使用前要再沙盒中写入资源）
            let sandboxFilePath = "\(NSHomeDirectory())/Documents/\(self.audiourl)"
            url = URL(fileURLWithPath: sandboxFilePath);
        }
        let item = AVPlayerItem.init(url: url!)
        player = AVPlayer.init(playerItem: item)

        //监听该文件是否能播放
        self.player.currentItem?.addObserver(self, forKeyPath: "status", options: NSKeyValueObservingOptions.new, context: nil)
        //监听音乐的缓冲进度
        self.player.currentItem?.addObserver(self, forKeyPath: "loadedTimeRanges", options: NSKeyValueObservingOptions.new, context: nil)

        NotificationCenter.default.addObserver(self, selector: #selector(self.playFinished(send:)), name: NSNotification.Name.AVPlayerItemDidPlayToEndTime, object: self.player.currentItem!)

        // Do any additional setup after loading the view.
        //判断是否点击过
        let cx = SQLiteManagerMask()
        let model = cx.readOneData(_userId: Account.defaultAccount.id!)
        
        if(!model.isbrowselessonaudioDiscuss && !self.cellId.isEmpty){
            self.maskView()
        }
    }
    //视图显示时
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.enterTime = common.share.getNowdate()
        
    }
    //添加监听后,使用完必须移除监听(一个add 对应一个 remove)
    deinit {
         NotificationCenter.default.removeObserver(self, name: NSNotification.Name.AVPlayerItemDidPlayToEndTime, object: self.player.currentItem!)
        self.bbsView.removeObserver(self, forKeyPath: "actionType")
        self.courseBBSRefresh.removeObserver(self, forKeyPath: "ActionName", context: nil)
    }


    override  func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {
        if(self.bbsView.isHidden){return }
        self.bbsView.isHidden = true
    }
    //自定义有导航的返回按钮
   @objc func backBtnClick() {
        self.navigationController?.popViewController(animated: true)
    }

    func setUI(){
        self.view.addSubview(self.playBtn);
        self.view.addSubview(self.allTimeLabel);
        self.view.addSubview(self.downProgress);
        self.view.addSubview(self.mySlider);
        self.view.addSubview(self.progressLabel);
        self.view.addSubview(self.utilBtn)
        self.view.addSubview(self.dowBtn)

        self.playBtn.setImage(#imageLiteral(resourceName: "play.png"),for:.normal);

        self.playBtn.snp.makeConstraints { (make) in
            make.width.height.equalTo(50)
            make.bottom.equalTo(-30)
            make.centerX.equalTo(self.view.snp.centerX)
        }

        self.playBtn.setTitleColor(UIColor.black, for: .normal);
        self.playBtn.titleLabel?.font = UIFont.italicSystemFont(ofSize: 50);
        self.playBtn.addTarget(self, action:#selector(playAct(_:)), for:.touchUpInside);

        //播放进度时间显示
        self.progressLabel.snp.makeConstraints { (make) in
            make.width.equalTo(30)
            make.left.equalTo(10)
            make.height.equalTo(20)
            make.bottom.equalTo(self.playBtn.snp.top).offset(-6)
        }
        self.progressLabel.text = "00:00";
        self.progressLabel.textColor = UIColor.white;
        self.progressLabel.font = UIFont.boldSystemFont(ofSize: 8);


        //缓存进度
        self.downProgress.snp.makeConstraints { (make) in
            make.width.equalTo(width - 70)
            make.height.equalTo(3)
            make.left.equalTo(self.progressLabel.snp.right)
            make.centerY.equalTo(self.progressLabel.snp.centerY)
        }
        self.downProgress.progressTintColor = UIColor.gray;  //已有进度颜色
        self.downProgress.trackTintColor = UIColor.white ;//剩余进度颜色（即进度槽颜色）
        //播放进度
        self.mySlider.snp.makeConstraints { (make) in
            make.width.equalTo(self.downProgress.snp.width)
            make.height.equalTo(5)
            make.center.equalTo(self.downProgress.snp.center)
        }
        self.mySlider.maximumTrackTintColor = UIColor.white;
        self.mySlider.thumbTintColor = UIColor.colorWithHex(hexColor: 0xf2f2f2);
        self.allTimeLabel.snp.makeConstraints { (make) in
            make.width.equalTo(30)
            make.height.equalTo(10)
            make.left.equalTo(self.mySlider.snp.right).offset(2)
            make.bottom.equalTo(self.playBtn.snp.top).offset(9)
        }
        self.allTimeLabel.text = "00:00";
        self.allTimeLabel.textColor = UIColor.white;
        self.allTimeLabel.font = UIFont.boldSystemFont(ofSize: 8);

        self.view.backgroundColor = UIColor.colorWithHex(hexColor: 0x838383);
        self.progressLabel.snp.makeConstraints { (make) in
            make.width.equalTo(50)
            make.height.equalTo(12)
            make.left.equalTo(4)
            make.bottom.equalTo(40)
        }

        //讨论区
        self.utilBtn.setTitleColor(UIColor.white, for: .normal)
        self.utilBtn.setTitle("\u{e70d}", for: .normal)
        self.utilBtn.titleLabel?.font = UIFont.init(name: "iconfont", size: 24)
        self.utilBtn.snp.makeConstraints { (make) in
            make.width.height.equalTo(40)
            make.right.equalTo(-20)
            make.bottom.equalTo(self.progressLabel.snp.top).offset(-10)
        }
        if isKJ{
            self.utilBtn.isEnabled = true
        }else{
            self.utilBtn.isEnabled = false
        }

        self.utilBtn.addTarget(self, action: #selector(self.showBBSVC), for: .touchUpInside)

        //下载区
        self.dowBtn.setTitleColor(UIColor.white, for: .normal)
        self.dowBtn.setTitleColor(UIColor.white, for: .selected)
        self.dowBtn.setTitle("\u{e731}", for: .normal)
        self.dowBtn.setTitle("\u{e730}", for: .selected)
        self.dowBtn.isSelected = self.isAllowDownLoad
        self.dowBtn.titleLabel?.font = UIFont.init(name: "iconfont", size: 26)
        self.dowBtn.snp.makeConstraints { (make) in
            make.width.height.equalTo(40)
            make.right.equalTo( self.utilBtn).offset(-60)
            make.centerY.equalTo(self.utilBtn)
        }
        self.dowBtn.addTarget(self, action: #selector(self.download), for: .touchUpInside)

        self.view.addSubview(foreImageView);
        foreImageView.snp.makeConstraints { (make) in
            make.width.height.equalTo(240)

//            make.center.equalTo(self.view.center)
            make.top.equalTo(100)
            make.centerX.equalTo(self.view.snp.centerX)
        }
        foreImageView.image = #imageLiteral(resourceName: "播放器.png")
//        foreImageView.layer.borderWidth = 3
//        foreImageView.layer.borderColor = UIColor.colorWithHex(hexColor: 0x949494).cgColor
        foreImageView.layer.masksToBounds = true;
        foreImageView.layer.cornerRadius = 120
        self.addForeImageViewAddAnimation();
        //初始化不转
        self.pauseForeImageViewAnimation();

        //设置讨论区
        self.setBBSViewUI()
        
        if self.cellId.isEmpty{
            self.utilBtn.isHidden = true
        }else{
            self.utilBtn.isHidden = false
        }
    }
   
    //  s设置bbs view
    func setBBSViewUI(){
        self.bbsView.cellId = self.cellId
        self.bbsView.openClassId = self.openClassId
        self.bbsView.courseOpenId = self.courseOpenId
        self.bbsView.isStu = self.isStu
        self.view.addSubview(self.bbsView)
        self.bbsView.frame = self.view.frame
        self.bbsView.setSlideMenu()
        //监听活动类型
        self.bbsView.addObserver(self, forKeyPath: "actionType", options: [.old, .new], context: nil)
    }
   
    var isDidSet = false
    var setTime: Float64 = 0



    //切换歌曲
    func nextMusic(url: String){

        let item = AVPlayerItem(url: URL(string: url)!)
        player.replaceCurrentItem(with: item)

    }

    //页面消失时取消歌曲播放结束通知监听
    override func viewWillDisappear(_ animated: Bool) {

        let  dict = ["type":"closeRes"]
        if(!self.isStu){
            ZQSocketManager.share.notificationSocketManager(data: dict)
        }else{
            if self.IsFromMooc{
                self.saveMOOCPlayLog()
            }else{
                self.studyCellTime = common.share.returntime(timeStart: enterTime, timeEnd: common.share.getNowdate())
                if self.token.isEmpty{
                    self.getToke()
                }else{
                    self.savePlayLog()
                }
            }
        }
        if self.isFromZyk{
            self.ZykCourseKjModel?.cellRefresh = "cellRefresh"
        }
        if(!self.isPushed){
            if self.isremoveObserver{
                self.removeObserver();
                NotificationCenter.default.removeObserver(self)
            }
        }
        self.isPushed = false
    }
    
    func getToke(){
        let dict = ["cellId":self.cellId,
                    "stuId":Account.defaultAccount.id!,
                    "openClassId":self.openClassId,
                    "sourceType":3] as [String : Any]
        XLBallLoading.show(in: self.view)
        Alamofire.request(appAPI.AssistTeacher_getCellInfoByCellId, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let json = JSON(value)
                
                if json["code"] == 1{
                    self.token = json["cellInfo"]["token"].description;
                    self.cellLogId = json["cellInfo"]["cellLogId"].description;
                    self.savePlayLog()
                }
            }
        }
    }

    //当音乐播放完成，或者切换下一首歌曲时，请务必记得移除观察者，否则会crash。操作如下：
    //移除观察者
    func removeObserver(){
        
        self.player.currentItem?.removeObserver(self, forKeyPath: "status")
        self.player.currentItem?.removeObserver(self, forKeyPath: "loadedTimeRanges")
        if self.timeObserver != nil {
            self.player.removeTimeObserver(self.timeObserver)
            self.timeObserver = nil
        }
        self.isremoveObserver = false
    }


    func seekToPC(time:Double){

        let  dict =  ["type":"videoEvents",
                      "name":"seek",
                      "cellId":self.cellId,
                      "courseId":self.courseOpenId,
                      "position":"\(time)" ] ;
        if(!self.isStu){
            ZQSocketManager.share.notificationSocketManager(data: dict )
        }
    }
  
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

}

extension audioViewController{

    /* 前置图片添加动画 */
    func addForeImageViewAddAnimation() -> () {
        self.foreImageView.layer.removeAnimation(forKey: "foreImageViewRotationAnimation")
        let anaimation = CABasicAnimation(keyPath: "transform.rotation.z")
        anaimation.fromValue = 0
        anaimation.toValue = Double.pi * 2
        anaimation.duration = 10
        anaimation.repeatCount = MAXFLOAT
        anaimation.isRemovedOnCompletion = false//退出界面要不要停止动画
        self.foreImageView.layer.add(anaimation, forKey: "foreImageViewRotationAnimation");

    }

    /* 暂停旋转动画 */
    @objc func pauseForeImageViewAnimation() -> () {
        self.foreImageView.layer.pauseAnimation()
    }

    @objc func resumeForeImageViewAnimation() -> () {
        self.foreImageView.layer.resumeAnimation()
    }

    @objc func playFinished(send: NotificationCenter){
        print("播放完成")
        self.foreImageView.layer.pauseAnimation()
        //self.removeObserver()
    }

    @objc  func playAct(_ sender: UIButton) {
        self.NetWorkState()
        var  dict = [String : String]()
        if isPlay {
            self.pauseForeImageViewAnimation();
            self.player.pause();
            sender.setImage(#imageLiteral(resourceName: "play"), for: .normal);
            self.isPlay = false
            //               $M.fire(_this.mineList, 'socket.emit', { params: { type: 'videoEvents', name: 'pause', cellId: _this.cellId, courseId: '', position: audioPlay.currentTime } });


            dict =  ["type":"videoEvents",
                     "name":"pause",
                     "cellId":self.cellId,
                     "courseId":self.courseOpenId,
                     "position":"\(self.playedMusicLength)" ] ;
        }else{
            self.resumeForeImageViewAnimation();
            self.player.play();
            sender.setImage(#imageLiteral(resourceName: "pause"), for: .normal);
            self.isPlay = true
            self.addTimeObserver()
         

            dict =  ["type":"videoEvents",
                     "name":"play",
                     "cellId":self.cellId,
                     "courseId":self.courseOpenId,
                     "position":"\(self.playedMusicLength)" ];

        }
        if(!self.isStu){
            ZQSocketManager.share.notificationSocketManager(data: dict)
        }
    }
  
    override func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) {

        if let key = keyPath{

            switch key {
            case "status":

                switch self.player.status {
                case .unknown:
                    print("未知状态")

                case .readyToPlay:
                    print("准备播放")

                    self.playBtn.isEnabled = true

                case .failed:
                    print("加载失败")
                }
            case "loadedTimeRanges":

                if let timeRanges = self.player.currentItem?.loadedTimeRanges{
                    //本次缓冲的时间范围
                    let timeRange: CMTimeRange = timeRanges.first!.timeRangeValue

                    //缓冲总长度
                    let totalLoadTime = CMTimeGetSeconds(timeRange.start) + CMTimeGetSeconds(timeRange.duration)

                    print("缓冲总长度:\(totalLoadTime)")
                    //音乐的总时间

                    let duration = CMTimeGetSeconds(self.player.currentItem!.duration)
                    print("音乐总时长:\(duration)")

                    self.musicDuration = duration

                    //计算缓冲百分比例
                    let scale = totalLoadTime / duration

                    print("缓冲百分比例:\(scale)")

                    //更新进度条 ...
                    self.downProgress.setProgress(Float(scale), animated: true)
                    //设置总时长
                    self.allTimeLabel.text = duration.formatting()
                    
                    if(self.isNeedUpdate){
                        common.share.updateDataByCell(cellId: self.cellId, pageNum: 0, seconds: Int(duration))
                        self.isNeedUpdate = false
                    }
                }
            case "ActionName":
                self.actionBBSType()

            default:
                break
            }
        }

    }


    @objc func sliderDidchange(send: UISlider){

        self.isSliderEdit = true
        if self.timeObserver != nil{
            self.player.removeTimeObserver(self.timeObserver)
            self.timeObserver = nil
        }
        let time = Double(send.value) * self.musicDuration;

        progressLabel.text = time.formatting()


    }
    @objc func sliderTouchOut(send: UISlider){

        self.player.pause()

        let time = Double(send.value) * CMTimeGetSeconds(self.player.currentItem!.duration)
        self.seekToPC(time: time)
        if isPlay {
            self.player.play()
            self.player.seek(to: CMTime(seconds: time, preferredTimescale: 1))

        }else{

            self.player.play()
            self.player.seek(to: CMTime(seconds: time, preferredTimescale: 1))
            isPlay = true

        }
        self.addTimeObserver()
        self.isSliderEdit = false

    }
    @objc  func sliderTouch(send: UISlider){

        self.isDidSet = true


        self.player.pause()

        let time = Double(send.value) * CMTimeGetSeconds(self.player.currentItem!.duration)

        self.setTime = time
        self.seekToPC(time: time)
        if isPlay {
            self.player.play()
            self.player.seek(to: CMTime(seconds: time, preferredTimescale: 1))

        }else{

            self.player.play()
            self.player.seek(to: CMTime(seconds: time, preferredTimescale: 1))
            isPlay = true

        }
        self.addTimeObserver()
        self.isSliderEdit = false
    }

    func addTimeObserver(){
        if self.timeObserver == nil {
            self.timeObserver = self.player.addPeriodicTimeObserver(forInterval: CMTime(value: 1, timescale: CMTimeScale(1)), queue: DispatchQueue.main, using: { (cmTime: CMTime) in


                if self.musicDuration != 0 && self.isSliderEdit == false{

                    let time = CMTimeGetSeconds(cmTime)

                    //更新进度条，以及时间显示 ...

                    self.progressLabel.text = time.formatting()
                    self.playedMusicLength = Int(time) - 1
                    let scale = time / self.musicDuration

                    //                    self.mySlider.setValue(Float(scale), animated: false)

                    self.mySlider.value = Float(scale)

                }

            })
        }
    }


}


extension Double{

    //时间秒转分
    public func formatting()->String{

        if  let currentTime:Int = Int(self) {
            let minutes = currentTime / 60
            let seconds = currentTime - minutes * 60

            return NSString(format: "%02d:%02d", minutes,seconds) as String
        }else{
            return "0:00"
        }



    }

}
