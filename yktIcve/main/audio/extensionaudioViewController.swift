//
//  extensionaudioViewController.swift
//  云课堂职教云
//
//  Created by 尤增强 on 2018/4/14.
//  Copyright © 2018年 jcjy. All rights reserved.
//

import UIKit
import Alamofire
import SwiftyJSON
extension  audioViewController {


    //保存学习日志
    func savePlayLog(){
        let dict = ["openClassId":self.openClassId,
                    "courseOpenId":self.courseOpenId,
                    "cellId":self.cellId,
                    "cellLogId":self.cellLogId,
                    "sourceType":3,
                    "studyCellTime":self.studyCellTime,
                    "picNum": 0,
                    "studyNewlyTime":playedMusicLength,
                    "studyNewlyPicNum":0,
                    "token":self.token] as [String : Any];
        XLBallLoading.show(in: self.view)
        Alamofire.request(appAPI.Student_stuProcessCellLog, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            
            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{
                    //已学习
                    self.StuCourseKJModel?.zjycellRefresh = "zjycellRefresh"
                }
                XLBallLoading.hide(in: self.view)
            }else{
                ZKProgressHUD.showError("网络环境异常请稍后再试！");
                XLBallLoading.hide(in: self.view)
            }
        }
        
        
    }


    //网络状态
    func NetWorkState(){
        //判断是否连接
        if reachability?.connection != .nonenet{
            if reachability?.connection == .cellular {
                print("连接类型：移动网络")
                let alertController = UIAlertController(title: "温馨提示!", message: "当前为移动网络", preferredStyle: .alert)
                //设置 Actions   点击出发的响应事件都写在相应的代码块里
                let noAction = UIAlertAction(title: "返回", style: .default){ (action) -> Void in
                    print("no!")
                    self.navigationController?.popViewController(animated: true)
                }
                let yesAction = UIAlertAction(title: "确定", style: .default){ (action) -> Void in
                    print("ok!")
                }
                //添加 Actions，添加的先后和显示的先后顺序是有关系的

                alertController.addAction(noAction)
                alertController.addAction(yesAction)
                //展示Alert Controller
                self.present(alertController, animated: true, completion: nil)
            }
        }
        else{
            ZKProgressHUD.showError("网络环境异常请稍后再试！");
        }
    }


    //显示讨论区
    @objc func showBBSVC(){
        self.bbsView.isHidden =  !self.bbsView.isHidden

    }

    @objc func download(){
        if(!self.isAllowDownLoad){
            ZKProgressHUD.showMessage("该资源不允许下载！")
            return
        }
        let cx = SQLiteManagerCache()
        let path = cx.readOneData(_userId: Account.defaultAccount.id!, docId: self.cellId)
        if(path.docPath.isEmpty){
            self.startDownload()
        }else{
              ZKProgressHUD.showMessage("该资源已被下载")
        }
    }

    //开始下载
    func startDownload(){
        let vc = cacheViewController();
        vc.docId = self.cellId
        vc.docUrl = self.audiourl
        vc.docType = 2
        vc.docTitle = self.title!
        vc.isStart = true;
        self.navigationController?.pushViewController(vc, animated: true);
    }
    
    //MOOC保存学习日志
    func saveMOOCPlayLog(){
        let dict = ["courseOpenId":self.courseOpenId,
                    "cellId":self.cellId,
                    "auvideoLength":Int (self.musicDuration),
                    "videoTimeTotalLong":self.playedMusicLength,
                    "userId":Account.defaultAccount.id!] as [String : Any]
        Alamofire.request(MOOCAPI.coursestudy_statStuProcessCellLogAndTimeLong, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{
                    if json["isStudy"].boolValue{
                        //已学习
                        self.MOOCCourseKJModel?.cellRefresh = "cellRefresh" 
                    }
                }else{
                    //ZKProgressHUD.showError(json["msg"].stringValue);
                }
            }else{
                ZKProgressHUD.showMessage("网络环境异常请稍后再试！")
            }
        }
    }


   @objc func actionBBSType(notice:NSNotification){
        let dict = notice.object as? Dictionary<String ,Any>
        if(dict!["type"] as! String == "create"){
            let vc = createCourseBBSView()
            vc.courseOpenId = self.courseOpenId
            vc.openClassId = self.openClassId
            vc.cellId = self.cellId
            vc.activeType = "\(dict!["actionType"]!)"
            self.isPushed = true
            self.navigationController?.pushViewController(vc, animated: true)
        }else if(dict!["type"]  as! String  == "details"){
            let vc = CourseBBSDetailsView()
            vc.activeType = dict!["actionType"] as! Int
            vc.cellId = self.cellId
            vc.openClassId = self.openClassId
            vc.courseOpenId = self.courseOpenId
            vc.evaluation = dict!["model"] as! evaluationModel
            vc.isMainTeacher = dict!["isMainTeacher"] as! Int
            self.isPushed = true
            self.navigationController?.pushViewController(vc, animated: true)
        }else if(dict!["type"]  as! String  == "teaching"){

            let vc = faceInfoView();
            vc.faceTimeStatus = dict!["state"] as! Int
            vc.activityId =  "\(dict!["activityId"]!)"
            vc.courseOpenId =  self.courseOpenId
            vc.openClassIds =   "\(dict!["openClassIds"]!)"
            self.isPushed = true
            self.navigationController?.pushViewController(vc, animated: true);
        }
    }
    //指示浮窗
    func maskView(){
        self.makeView.frame = CGRect.init(x: 0, y: 0, width: UIScreen.main.bounds.width, height: UIScreen.main.bounds.height)
        self.makeView.backgroundColor = UIColor(red: 0, green: 0, blue: 0, alpha: 0.3);
        let tapBtn = UIButton.init()
        tapBtn.setBackgroundImage(UIImage.init(named: "handTap.png"), for: .normal)
        self.makeView.addSubview(tapBtn)
        tapBtn.snp.makeConstraints { (make) in
            make.width.height.equalTo(60)
            make.bottom.equalTo(-130)
            make.right.equalTo(-8)
        }
        let Btn_title = UIButton.init()
        if self.isStu{
           Btn_title.setTitle("评论，问答，笔记，纠错，请点击这里 | 下一步", for: .normal)
        }else{
           Btn_title.setTitle("课堂教学，评论，问答，笔记，纠错，学习统计，请点击这里 | 下一步", for: .normal)
        }
        Btn_title.titleLabel?.numberOfLines = 2
        Btn_title.setTitleColor(UIColor.white, for: .normal)
        self.view.addSubview( self.makeView)
        self.makeView.addSubview( Btn_title)
        
        let lw = UIScreen.main.bounds.width - 70  > 300 ? 300 :UIScreen.main.bounds.width - 70
        Btn_title.snp.makeConstraints { (make) in
            make.width.equalTo(lw)
            make.height.equalTo(30)
            make.right.equalTo(tapBtn.snp.left)
            make.centerY.equalTo(tapBtn)
        }
        Btn_title.titleLabel?.adjustsFontSizeToFitWidth = true
        tapBtn.addTarget(self, action: #selector(self.hideview), for: .touchUpInside)
        Btn_title.addTarget(self, action: #selector(self.hideview), for: .touchUpInside)
    }

    @objc func actionBBSType(){

        switch (self.courseBBSRefresh.ActionName) {
        case "create":
            let vc = createCourseBBSView()
            vc.courseOpenId = self.courseOpenId
            vc.openClassId = self.openClassId
            vc.cellId = self.cellId
            vc.courseBBSAction = self.courseBBSRefresh
            vc.activeType = "\(self.courseBBSRefresh.actionType)"
            self.isPushed  = true
            self.navigationController?.pushViewController(vc, animated: true)
        case "details":
            let vc = CourseBBSDetailsView()
            vc.activeType = (self.courseBBSRefresh.actionType)
            vc.cellId = self.cellId
            vc.openClassId = self.openClassId
            vc.courseOpenId = self.courseOpenId
            vc.evaluation = self.courseBBSRefresh._evaluationModel!
            vc.courseBBSAction = self.courseBBSRefresh
            vc.isMainTeacher = self.courseBBSRefresh.isMainTeacher == true ? 1 : 0
            self.isPushed  = true
           self.navigationController?.pushViewController(vc, animated: true)
        case "teaching":
            let vc = faceInfoView();
            vc.faceTimeStatus = self.courseBBSRefresh.faceTimeStatus
            vc.activityId =   self.courseBBSRefresh.activityId
            vc.courseOpenId =  self.courseOpenId
            vc.openClassIds =   self.courseBBSRefresh.openClassIds
            self.isPushed  = true
            self.navigationController?.pushViewController(vc, animated: true)
        case "refresh":
            switch (self.courseBBSRefresh.actionType){
            case 1:
                self.bbsView.vc1._BBSViewModel.getBBSData()
            case 2:
                self.bbsView.vc2._BBSViewModel.getBBSData()
            case 3:
                self.bbsView.vc3._BBSViewModel.getBBSData()
            case 4:
                self.bbsView.vc4._BBSViewModel.getBBSData()
            case 5:
                self.bbsView.vc5.getData()
            default:
                print("")
            }
        case "edit":
            print("编辑")
            let vc = createFaceView()
            vc.title = "编辑课堂教学"
            vc.activityId = self.courseBBSRefresh.activityId
            vc.openClassId = self.openClassId
            vc.courseOpenId = self.courseOpenId
            vc.textTitle.text = self.courseBBSRefresh.textTitle
            vc.textPlace.text = self.courseBBSRefresh.textPlace
            vc.startDtae.text = self.courseBBSRefresh.startDtae
            vc.ClassSection.text = self.courseBBSRefresh.ClassSection
            vc.courseBBSAction = self.courseBBSRefresh
            vc.video = true
            vc.hidesBottomBarWhenPushed = true
            self.navigationController?.pushViewController(vc, animated: true);
        default:
            print("_____")
        }

    }
    
    @objc func hideview(){
        self.makeView.isHidden = true
  
        let cx = SQLiteManagerMask()
        cx.updateData(isType: "isbrowselessonaudioDiscuss")
    }
    
}
