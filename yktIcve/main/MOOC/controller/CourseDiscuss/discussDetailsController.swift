//
//  discussDetailsController.swift
//  云课堂2
//
//  Created by cc on 2018/6/5.
//  Copyright © 2018年 zqyou. All rights reserved.
//

import UIKit
import SwiftyJSON
import Alamofire

extension discussDetailsView{

    func getReply(){
        let dict = ["replyId":self.replyId,
                    "userId":Account.defaultAccount.id!,
                    "page":page] as [String : Any]
        XLBallLoading.show(in: self.view)
        Alamofire.request(MOOCAPI.coursestudy_getChildReply, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{
                    self.setData(json)

                    if  self.tableView.mj_footer != nil{
                        if json["list"].count < json["pagination"]["pageSize"].intValue{
                            self.tableView.mj_footer.endRefreshingWithNoMoreData()
                        }else{
                            self.tableView.mj_footer.endRefreshing()
                        }
                    }
                    
                }else{
                    ZKProgressHUD.showMessage(json["msg"].stringValue)
                }
                XLBallLoading.hide(in: self.view)
            }else{
                XLBallLoading.hide(in: self.view)
                ZKProgressHUD.showMessage("网络异常请稍后再试！")
            }
        }
    }


    //文件跳转
    func getDocByUrl(url:String){
        let dict = ["url":url]

        Alamofire.request(MOOCAPI.workexam_getDocByUrl, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let r = JSON(value)
                if r["code"] == 1{
                    self.previewVC(r: r)
                }else{
                    ZKProgressHUD.showMessage(r["msg"].string)
                }

            }else{
                ZKProgressHUD.showMessage("网络异常请稍后再试！");

            }
        }
    }


    //文件跳转
    fileprivate func previewVC(r:JSON){
        var images = [String]()
        let data = JSON.init(parseJSON: r["docUrl"].stringValue)
        switch data["category"] {
        case "office","ppt":
            if(data["isH5"].boolValue){
                let vc = PPT_Animation_PreviewView()
                vc.isTeaching = false
                vc.isKJ = false
                vc.linkStr = data["h5PreviewUrl"].stringValue
                NavigatorService.navigateToPage(vc, animated: true)
            }else{
                var page_count = data["args"]["page_count"].intValue
                if(page_count == 0){
                    page_count = 1
                }
                var prefix = data["urls"]["preview_oss_gen"].stringValue

                if(prefix.isEmpty){
                    prefix = data["urls"]["preview"].stringValue
                    for i in 1...page_count{
                        let imgUrl =  prefix.replacingOccurrences(of: "?", with: "/\(i).preview.jpg?")
                        images.append(imgUrl)
                    }
                }else{
                    for i in 1...page_count{
                        let imgUrl = "\(prefix)/\(i).png"
                        images.append(imgUrl)
                    }
                }

                let vc = ImagePreviewVC()
                vc.images = images
                self.isPushed = true
                NavigatorService.navigateToPage(vc, animated: true)
            }
        case "audio","mp3":
            print("777")
            let vc = audioViewController()
            if !data["urls"]["preview_oss_gen"].stringValue.isEmpty{
                vc.audiourl = data["urls"]["preview_oss_gen"].stringValue
            }else {
                vc.audiourl = data["urls"]["preview"].stringValue
            }
            vc.isNet = true
            NavigatorService.navigateToPage(vc, animated: true)
        case "img":
            let vc = PicturePreviewView()
            self.isPushed = true
            vc.imgurl = data["urls"]["preview_oss_ori"].stringValue
            NavigatorService.navigateToPage(vc, animated: true)
        case "video":
            var videourls = [String]()
            //拼接URL
            for (key, value) in data["args"]{
                if data["urls"]["preview_oss_gen"].stringValue.isEmpty{
                    if value.boolValue{
                        let videoUrl = "\(data["urls"]["preview"].stringValue)/\(key).mp4"
                        videourls.append(videoUrl)
                    }
                }else{
                    if value.boolValue{
                        let videoUrl = "\(data["urls"]["preview_oss_gen"].stringValue)/\(key).mp4"
                        videourls.append(videoUrl)
                    }
                }

            }
            let vc = videoPlayView()
            vc.isFromZjyErrorQuestion = true
            vc.videourls = videourls
            self.isPushed = true
            NavigatorService.navigateToPage(vc, animated: true)
        default:
             ZKProgressHUD.showMessage("此类型暂不支持请前往网页查看")
        }
    }
    
    fileprivate func setData(_ json:JSON){


        //防止刷新回滚
        self.dataJson = json
        var h = CGFloat.init(80)

        if( json["replyUrlList"].count > 0){
            h += 110
        }

        if(json["reply"]["content"].stringValue.count > 0){
            h += 80
        }
        
        if  self.headview.numberline != 0 {
            self.headview.frame = CGRect.init(x: 0, y: 0, width:width, height: h )
            self.headview.setMOOCJson(json: json)
            self.tableView.tableHeaderView = self.headview
        }

        self.list += json["list"].arrayValue
        for i in json["list"]{
            self.htmls.append(HtmlRecord.init(content: i.1["content"].stringValue))
        }
        self.tableView.reloadData()
        common.share.setTableFootView_noData(self.tableView, list: self.list)
    }


    func BBSHeadView_viewMore(height: CGFloat) {

        self.headview.frame = CGRect.init(x: 0, y: 0, width: width, height: self.headview.frame.size.height + height )
        self.headview.numberline = 0
        self.headview.setMOOCJson(json: self.dataJson)
        self.tableView.tableHeaderView = self.headview

        self.tableView.reloadData()
    }

    func BBSHeadView_backImgUrl(str: String) {
        self.getDocByUrl(url: str)
    }

    //删除讨论
   func DeleteReply(btn: UIButton) {

    let cell = self.superUITableViewCell(of: btn)
    if  let indexPath = tableView.indexPath(for: cell!){
        let alertController = UIAlertController(title: "提示",
                                                message:"是否删除回复?", preferredStyle: .alert)
        let cancelAction = UIAlertAction(title: "取消", style: .cancel, handler: nil)
    
        let okAction = UIAlertAction(title: "确定", style: .destructive, handler: {
            action in
                let tag = btn.tag
                let json = self.list[tag]
                let dict = ["replyId":JSON(json)["id"].stringValue,
                            "userId":Account.defaultAccount.id!]
                XLBallLoading.show(in: self.view)
                Alamofire.request(MOOCAPI.coursestudy_deleteReply, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
                    if let value = response.result.value {
                        let json = JSON(value)
                        if json["code"] == 1{
                            self.list.remove(at: indexPath.row)
                            self.htmls.remove(at: indexPath.row)
                            self.tableView.deleteRows(at: [indexPath], with: UITableViewRowAnimation.none)
                            common.share.setTableFootView_noData(self.tableView, list: self.list)
                            ZKProgressHUD.showMessage(json["msg"].stringValue)

                        }else{
                            ZKProgressHUD.showMessage(json["msg"].stringValue)
                        }
                        XLBallLoading.hide(in: self.view)
                    }else{
                        ZKProgressHUD.showMessage("网络异常请稍后再试！")
                        XLBallLoading.hide(in: self.view)
                    }
                }
        })
        alertController.addAction(cancelAction)
        alertController.addAction(okAction)
        self.present(alertController, animated: true, completion: nil)
    }
  }


    //返回button所在的UITableViewCell
    func superUITableViewCell(of: UIButton) -> MoocDiscussDetailsViewCell? {
        for view in sequence(first: of.superview, next: { $0?.superview }) {
            if let cell = view as? MoocDiscussDetailsViewCell {
                return cell
            }
        }
        return nil
    }


    //添加讨论回复
    @objc func adddiscussDetails(){
        if common.share.isX(){
            ht = 60
        }
        //回复框
        self.sizeHight = 40
        self.view.endEditing(true)
        
        UIView.animate(withDuration: 0.1, animations: {
            var frame = self.footView.frame
            frame.origin.y = UIScreen.main.bounds.height  - 110 - CGFloat(self.ht)
            self.footView.frame = frame
        })
        UITextView.animate(withDuration: 0.1, animations: {
            var frame = self.textView.frame
            frame.size.height = 40
            self.textView.frame = frame
        })
        let dict = ["courseOpenId":self.courseOpenId,
                    "topicId":self.topicId,
                    "content":self.textView.text,
                    "replyId":self.replyId,
                    "userId":Account.defaultAccount.id!] as [String : Any] 
        XLBallLoading.show(in: self.view)
        Alamofire.request(MOOCAPI.coursestudy_addTopicReply, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{
                    self.textView.text = ""
                    ZKProgressHUD.showMessage(json["msg"].stringValue)
                    self.list.removeAll()
                    self.htmls.removeAll()
                    self.page = 1
                    self.getReply()
                }else{
                    ZKProgressHUD.showMessage(json["msg"].stringValue)
                }
                XLBallLoading.hide(in: self.view)
            }else{
                ZKProgressHUD.showMessage("网络异常请稍后再试！")
                XLBallLoading.hide(in: self.view)
            }
        }
        
    }
}

