//
//  MOOCCourseWareViewController.swift
//  云课堂2
//
//  Created by 尤增强 on 2018/5/30.
//  Copyright © 2018年 zqyou. All rights reserved.
//

import UIKit
import Alamofire
import SwiftyJSON
import SCLAlertView
extension MOOCCourseWareView{


    //  模块列表
    func makeData(){

        for i in self.sentionTitles {
            let m = courseModule.init(data: i, _isUnfold: false)
            self.moduleList.append(m)
        }

        self.tableview.reloadData()
    }

    //获取单元列表   第一级目录
    func getTopicList(moduleId:String,section:Int){
        if( self.moduleList[section].topic.count > 0){
            print(self.moduleList[section].topic.count)
            self.tableview.reloadSections(IndexSet.init(integer: section), with: UITableViewRowAnimation.automatic)
        }else {

            let dict = ["courseOpenId":self.courseOpenId,
                        "moduleId":moduleId,
                        "userId":Account.defaultAccount.id!]
            XLBallLoading.show(in: self.view)
            Alamofire.request(MOOCAPI.coursedetail_getTopicList, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
                if let value = response.result.value {
                    let json = JSON(value)
                    if json["code"] == 1{

                        self.setTopicList(section: section, data: json["topicList"])
                    }else{
                        ZKProgressHUD.showError("网络异常请稍后再试！");
                    }
                    XLBallLoading.hide(in: self.view)
                }else{
                    ZKProgressHUD.showError("网络异常请稍后再试！");
                    XLBallLoading.hide(in: self.view)
                }
            }

        }
    }


    //填充数据
    func setTopicList(section:Int,data:JSON){
        var j = 0
        for i in data{
            let t =  courseTopic.init(_title:  i.1["name"].stringValue, _isUnfold: false, _id: i.1["id"].stringValue, _level: 2, _cellType: 0, _topicIndex: j, _isStudyFinish: false, _categoryName: "",_childNodeListId:"",_childNodeListresId:"", _isteacher: self.isteacher)
            j += 1
            self.moduleList[section].topic.append(t)
        }
        self.tableview.reloadSections(IndexSet.init(integer: section), with: UITableViewRowAnimation.automatic)
    }


    //获取获得课程下的单元
    func getCellList(indexPath:IndexPath,topic:courseTopic){
        let dict = ["courseOpenId":self.courseOpenId,
                    "topicId":topic.id,
                    "userId":Account.defaultAccount.id!]
        XLBallLoading.show(in: self.view)
        Alamofire.request(MOOCAPI.coursedetail_getCellList, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{
                    if(json["cellList"].count < 1){
                        //自定义提示框样式
                        let appearance = SCLAlertView.SCLAppearance(
                            showCloseButton: false //不显示关闭按钮
                        )
                        //使用自定义样式的提示框
                        let alert = SCLAlertView(appearance: appearance)
                        //显示提示框（2秒后自定关闭）
                        let timeout = SCLAlertView.SCLTimeoutConfiguration(timeoutValue: 2) {
                            print("提示框自动关闭了")
                        }
                        alert.showError("", subTitle: "sorry!此章节下没有课件", timeout: timeout);
                    }
                    
                    self.setCellInTopicList(indexPath: indexPath, data: json["cellList"], topic: topic)
                }else{
                    ZKProgressHUD.showError("网络异常请稍后再试！");
                }
                XLBallLoading.hide(in: self.view)
            }else{
                ZKProgressHUD.showError("网络异常请稍后再试！");
                XLBallLoading.hide(in: self.view)
            }
        }

    }

    //set cell数据
    func setCellInTopicList(indexPath:IndexPath,data:JSON,topic:courseTopic){
        for i in data{
            let c = courseTopic.init(_title: i.1["cellName"].stringValue, _isUnfold: true, _id:i.1["id"].stringValue , _level: 3, _cellType: i.1["cellType"].intValue, _topicIndex: -99, _isStudyFinish: i.1["isStudyFinish"].boolValue, _categoryName: i.1["categoryName"].stringValue,_childNodeListId: i.1["id"].stringValue,_childNodeListresId:i.1["resId"].stringValue,_isteacher: self.isteacher)
             topic.cell.append(c)
            //子节点
            if( i.1["cellType"].intValue == 4){
                for k in i.1["childNodeList"]{
                    let c1 = courseTopic.init(_title: k.1["cellName"].stringValue, _isUnfold: true, _id:i.1["id"].stringValue , _level: 3, _cellType: k.1["cellType"].intValue, _topicIndex: -99, _isStudyFinish: k.1["isStudyFinish"].boolValue, _categoryName: k.1["categoryName"].stringValue,_childNodeListId: k.1["id"].stringValue,_childNodeListresId:k.1["resId"].stringValue,_isteacher: self.isteacher)
                     topic.cell.append(c1)
                }
            }
        }
        self.tableview.reloadSections(IndexSet.init(integer: indexPath.section), with: .automatic)
       
    }

    //分区下标 与当前分区下所有topic
    func getshowList(model:courseModule,_section: Int) -> courseTopic{
        var courseTopicModelR = courseTopic.init(_title: "", _isUnfold: true, _id: "" , _level: 0, _cellType: 0, _topicIndex: -99, _isStudyFinish: false, _categoryName: "",_childNodeListId: "",_childNodeListresId:"",_isteacher: self.isteacher)
        print(_section)
        if model.isUnfold {
            var index = 0
            for i in 0..<model.topic.count{
                let courseTopicModel = model.topic[i]

                if(_section<index+1){
                    courseTopicModelR = courseTopicModel
                    courseTopicModelR.level = 2;
                    return courseTopicModelR;
                }
                index = index + 1 ;
                if (courseTopicModel.isUnfold){
                    if(_section<index+courseTopicModel.cell.count){
                        courseTopicModelR = courseTopicModel.cell[_section-index]
                        courseTopicModelR.level = 3;
                        return courseTopicModelR;
                    }
                    index = index + courseTopicModel.cell.count;
                }

            }
            return courseTopicModelR;
        }else{
            return courseTopicModelR
        }

    }

    func getCellNum(model:courseModule,_section: Int) -> Int{
        print(_section)
        if model.isUnfold {
            var i = model.topic.count;

            for courseTopicModel in model.topic{
                //                for courseTopicModel in courseTopicModel.topic{
                //
                //                    if (courseTopicModel.isUnfold){
                //                        i = i + courseTopicModel.cell.count
                //                    }
                //                }
                if (courseTopicModel.isUnfold){
                    i = i + courseTopicModel.cell.count
                }
            }
            return i ;
        }else{
            return 0
        }
    }


}

