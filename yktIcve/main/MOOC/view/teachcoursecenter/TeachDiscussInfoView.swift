//
//  TeachDiscussInfoView.swift
//  云课堂2
//
//  Created by cc on 2018/6/13.
//  Copyright © 2018年 zqyou. All rights reserved.
//

import UIKit
import Alamofire
import SwiftyJSON

class TeachDiscussInfoView: UIViewController,UISearchBarDelegate,ZQNavigationMenuViewDelegate {

    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.view.backgroundColor = UIColor.white
        self.title = title
       
        self.setTableView()
        self.setheadView()
        self.getData(sort: self.order, isRefresh: true)
        let item = UIBarButtonItem(title: "返回", style: .plain, target: self, action: nil)
        self.navigationItem.backBarButtonItem = item
        // Do any additional setup after loading the view.
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    func setheadView(){
        //键盘
        toolBar = common.share.AddToolKeyboardDoneBar()
        let doneButton = UIBarButtonItem(title: "确定", style: .plain, target: self, action: #selector(self.DoneClick));
        let spaceButton = UIBarButtonItem(barButtonSystemItem: .flexibleSpace, target: nil, action: nil)
        toolBar.setItems([spaceButton,doneButton], animated: false);

        self.view.addSubview(self.headView)
        self.headView.addSubview(self.searchBar)
        self.headView.snp.makeConstraints { (make) in
            make.width.equalTo(width)
            make.height.equalTo(80)
            make.left.equalTo(0)
            make.top.equalTo(0)
        }
        self.searchBar.snp.makeConstraints { (make) in
            make.width.equalTo(width)
            make.height.equalTo(40)
            make.top.equalTo(0)
            make.left.equalTo(0)
        }
        self.searchBar.delegate = self
        self.headView.addSubview(self.btn_sorting)
        self.btn_sorting.snp.makeConstraints { (make) in
            make.width.equalTo(100)
            make.height.equalTo(30)
            make.top.equalTo(self.searchBar.snp.bottom).offset(5)
            make.right.equalTo(-20)
        }
        self.btn_sorting.layer.masksToBounds = true
        self.btn_sorting.layer.cornerRadius = 4
        self.btn_sorting.layer.borderColor = UIColor.gray.cgColor
        self.btn_sorting.layer.borderWidth = 1
        self.btn_sorting.addTarget(self, action: #selector(self.showMenu), for: .touchUpInside)
        
        let items = ["时间","创建人","回复数量"]
        self.menu = ZQNavigationMenuView.init(frame: CGRect.init(x: UIScreen.main.bounds.width - 136, y: 83, width:130, height: 120), titles: items )
        menu.layer.cornerRadius = 5.0
        menu.layer.borderColor = UIColor.gray.cgColor
        menu.layer.borderWidth = 1.0
        menu.layer.masksToBounds = true
        self.menu.isHidden = true
        self.menu.delegate = self
        self.view.addSubview(menu)
    }
    @objc func showMenu(){
        self.menu.isHidden = !self.menu.isHidden
    }
    //键盘
    func searchBarShouldBeginEditing(_ searchBar: UISearchBar) -> Bool {
        searchBar.inputAccessoryView = toolBar
        return true
    }
    //排序方式
    func getIndex(_index: Int) {
        self.menu.isHidden = !self.menu.isHidden
        self.page = 1
        if ( _index == 0 ){
            self.order = "-dateCreated"
        }else if( _index == 1){
            self.order = "displayName"
        }else{
            self.order = "-replyCount"
        }
        self.discussInfo = []
        self.searchContent = ""
        self.getData(sort: self.order, isRefresh: false)
        switch _index {
        case 0:
             btn_sorting.setTitle("时间 \u{e607}", for: .normal)
        case 1:
             btn_sorting.setTitle("创建人 \u{e607}", for: .normal)
        case 2:
            btn_sorting.setTitle("回复数量 \u{e607}", for: .normal)
            
        default:
            print("default")
        }
    }
    @objc func DoneClick(){
        self.view.endEditing(true)
    }
    //键盘隐藏
    override func touchesBegan(_ touches:Set<UITouch>, with event:UIEvent?) {
    
    searchBar.resignFirstResponder()
    
    }
    //点击搜索
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        self.searchContent = self.searchBar.text!
        self.discussInfo = []
        self.getData(sort: self.order, isRefresh: false)
        searchBar.resignFirstResponder()
        print("搜索")
        
    }

    let width = UIScreen.main.bounds.width
    var MOOCCourseKJModel: MOOCCourseKJModel?
    lazy var headView : UIView = {
        let view = UIView()
        view.backgroundColor = UIColor.colorWithHex(hexColor: 0xf1f1f1)
        return view
    }()
    
    lazy var searchBar : UISearchBar = {
        let search = UISearchBar()
        search.barTintColor = UIColor.colorWithHex(hexColor: 0xf2f2f2)
        search.placeholder = "请输入名字进行搜索"
        return search
    }()
    //排序方式
    lazy var btn_sorting : UIButton = {
        let btn = UIButton()
        btn.setTitle("时间 \u{e607}", for: .normal)
        btn.setTitleColor(UIColor.black, for: .normal)
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 14)
        return btn
    }()
    var tableView : UITableView!
    
    var menu :ZQNavigationMenuView!
    
    lazy var categoryId : String = {return ""}()

    lazy var courseOpenId : String = {return ""}()
    lazy var searchContent : String = {return ""}()
    lazy var list : NSArray = []
    lazy var page :Int = {return 1}()
    var discussInfo = [teachDiscussInfo]()
    lazy var discussListcount:Int = 10
    lazy var order : String = {return "-dateCreated"}()
    var toolBar = UIToolbar();
}

extension TeachDiscussInfoView:UITableViewDelegate,UITableViewDataSource{
    func setTableView(){
        self.tableView = UITableView.init(frame: CGRect(x:0, y:80, width:width, height:UIScreen.main.bounds.height - 145))
        
        self.tableView.register(TeachDiscussInfoTableViewCell.self, forCellReuseIdentifier: "SwiftCell")
        self.tableView.backgroundColor = UIColor.white
        //除去多余的cell
        tableView.tableFooterView = UIView(frame:CGRect.zero)
        tableView.separatorInset = UIEdgeInsets.zero;
        tableView.layoutMargins = UIEdgeInsets.zero;
        
        self.tableView.delegate = self;
        self.tableView.dataSource = self;
        //ipad
        if #available(iOS 9.0, *) {
            tableView.cellLayoutMarginsFollowReadableWidth = false
        } else {
            
        }
        self.view.addSubview(tableView)
        
        //下拉刷新相关设置,使用闭包Block
        self.tableView.mj_header = MJRefreshNormalHeader(refreshingBlock: {
            //重现生成数据
            self.discussInfo = []
            self.page = 1
            self.getData(sort: self.order, isRefresh: false);
            
        })
        
        //上拉加载
        self.tableView.mj_footer = MJRefreshBackNormalFooter(refreshingBlock: {
            self.page += 1
            if self.discussListcount < 10 {
                ZKProgressHUD.showMessage("没有更多数据了！")
                self.tableView.mj_footer.endRefreshing()
            }else{
                self.getData(sort: self.order, isRefresh: false)
            }
        })
        
    }
    func numberOfSections(in tableView: UITableView) -> Int {
        // #warning Incomplete implementation, return the number of sections
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        // #warning Incomplete implementation, return the number of rows
        return self.discussInfo.count
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 80
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell:TeachDiscussInfoTableViewCell = tableView.dequeueReusableCell(withIdentifier: "SwiftCell", for: indexPath) as! TeachDiscussInfoTableViewCell
        
        let json = self.discussInfo[indexPath.row]
        cell.setInfo(Info: json) 
        cell.delegate = self
        if (json.isMine == true){
            cell.btn_delete.isHidden = false
            cell.btn_delete.tag = indexPath.row
         
        }else{
            cell.btn_delete.isHidden = true
        }
        
        return cell
    }
    //点击
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
         let json = self.discussInfo[indexPath.row]
        let vc = courseDiscussView()
        vc.topicId = json.topicId
        vc.courseOpenId = self.courseOpenId
     
        self.navigationController?.pushViewController(vc, animated: true)
    }
}

extension TeachDiscussInfoView:TeachDiscussInfoTableViewCellDelegate {

    //删除主题
    func deleteDiscussTopic(_ btn:UIButton) {
        let json = self.discussInfo[btn.tag]
        let dict = ["topicId":json.topicId,
                    "userId":Account.defaultAccount.id!] as [String : Any]
        XLBallLoading.show(in: self.view)
        Alamofire.request(MOOCAPI.coursestudy_deleteTopic, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{
                    ZKProgressHUD.showMessage(json["msg"].stringValue)
                    self.discussInfo = []
                    self.getData(sort: self.order, isRefresh: false)
                }else{
                    ZKProgressHUD.showMessage(json["msg"].stringValue);
                }
                XLBallLoading.hide(in: self.view)
            }else{
                ZKProgressHUD.showMessage("网络异常请稍后再试！");
                XLBallLoading.hide(in: self.view)
            }
        }
    }
    
    //获取数据
    func getData(sort: String,isRefresh: Bool){
        let dict = ["page":self.page,
                    "categoryId":self.categoryId,
                    "searchContent":self.searchContent,
                    "sort":sort,
                    "userId":Account.defaultAccount.id!] as [String : Any]
        XLBallLoading.show(in: self.view)
        Alamofire.request(MOOCAPI.coursestudy_getDiscussTopic, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{
                    self.alldiscuss(isRefresh: true, json: json["list"])
                    self.discussListcount = json["list"].count
                    if(!isRefresh){
                        //结束刷新
                        self.tableView.mj_header.endRefreshing();
                    }
                }else{
                    ZKProgressHUD.showMessage(json["msg"].stringValue);
                }
                XLBallLoading.hide(in: self.view)
            }else{
                ZKProgressHUD.showMessage("网络异常请稍后再试！");
                XLBallLoading.hide(in: self.view)
            }
        }
    }
    
    func alldiscuss(isRefresh:Bool,json:JSON){
        
        for data in json {
            let alldiscussInfo = teachDiscussInfo.init(_topicId: data.1["topicId"].stringValue,
                                                        _userId: data.1["userId"].stringValue,
                                                        _dateCreated: data.1["dateCreated"].stringValue,
                                                        _displayName: data.1["displayName"].stringValue,
                                                        _title: data.1["title"].stringValue,
                                                        _content: data.1["content"].stringValue,
                                                        _replyCount: data.1["replyCount"].stringValue,
                                                        _isMine: data.1["isMine"].boolValue,
                                                        _thumbnail: data.1["thumbnail"].stringValue)
            self.discussInfo.append(alldiscussInfo)
        }
        self.tableView.mj_footer.endRefreshing()
        self.tableView.reloadData()
        common.share.setTableFootView_noData(self.tableView, list: self.discussInfo as NSArray)
        
    }
   
}

