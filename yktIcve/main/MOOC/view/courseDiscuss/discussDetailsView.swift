//
//  discussDetailsView.swift
//  云课堂2
//
//  Created by cc on 2018/6/5.
//  Copyright © 2018年 zqyou. All rights reserved.
//

import UIKit
import SwiftyJSON

class discussDetailsView: UIViewController,UITextViewDelegate,UIGestureRecognizerDelegate,BBSHeadViewDelegate {

    override func viewDidLoad() {
        super.viewDidLoad()
        self.view.backgroundColor = UIColor.white
        self.title = "讨论回复"
        self.textView.delegate = self
     
        self.getReply()
        self.setTableview()
        self.setFoot()
        
        //监听键盘弹出通知
        NotificationCenter.default
            .addObserver(self,selector: #selector(keyboardWillShow(_:)),
                         name: NSNotification.Name.UIKeyboardWillShow, object: nil)
        //监听键盘隐藏通知
        NotificationCenter.default
            .addObserver(self,selector: #selector(keyboardWillHide(_:)),
                         name: NSNotification.Name.UIKeyboardWillHide, object: nil)
        
        //点击事件
        let tapAction = UITapGestureRecognizer.init(target: self, action: #selector(self.handleTap(sender:)))
        tapAction.delegate = self 
        view.addGestureRecognizer(tapAction)
        self.view.tag = 1
    }
   
    // 键盘显示
    @objc func keyboardWillShow(_ notification: Notification) {
        if common.share.isX(){
            ht = 30
        }
        let userInfo: NSDictionary = notification.userInfo! as NSDictionary
        let value = userInfo.object(forKey: UIKeyboardFrameEndUserInfoKey)
        let keyboardRec = (value as AnyObject).cgRectValue
        
        let height = keyboardRec?.size.height

        UIView.animate(withDuration: 0.1, animations: {
            var frame = self.footView.frame
            frame.origin.y = UIScreen.main.bounds.height - (height! + CGFloat(self.sizeHight) + 70 + CGFloat(self.ht))
            self.footView.frame = frame
            
        })
        
    }

    // 键盘隐藏
    @objc func keyboardWillHide(_ notification: Notification) {
        if common.share.isX(){
            ht = 60
        }
        //还原tableview的contentview大小
        UIView.animate(withDuration: 0.1, animations: {
            var frame = self.footView.frame
            frame.origin.y = UIScreen.main.bounds.height  - CGFloat(self.sizeHight) - 70 - CGFloat(self.ht)
            self.footView.frame = frame
        })
    
      
    }
    //键盘隐藏
    override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {
        self.view.endEditing(true)
    }
    
    //移除监听
    override func viewDidDisappear(_ animated: Bool) {
        if !isPushed{
            NotificationCenter.default.removeObserver(self)
        }
        self.isPushed = false
    }
    //收回键盘
    @objc func handleTap(sender: UITapGestureRecognizer) {
        
            if sender.state == .ended {
                print("收回键盘")
                self.view.endEditing(true)
            }
            sender.cancelsTouchesInView = false
        
    }
    //MARK: - UIGestureRecognizerDelegate
    func gestureRecognizer(_ gestureRecognizer: UIGestureRecognizer, shouldReceive touch: UITouch) -> Bool {
        
        let touchClass = NSStringFromClass((touch.view?.classForCoder)!)
        if touchClass == "UIButton"{
            return false
        }
        return true
    }
    //底部textView
    func setFoot(){
        if common.share.isX(){
            ht = 60
        }
        self.view.addSubview(self.footView)
        self.footView.addSubview(self.textView)
        self.footView.addSubview(self.btn_send)
        self.footView.frame = CGRect.init(x: 0, y: UIScreen.main.bounds.height - 110 - CGFloat(self.ht), width: width, height: 60)
        self.textView.frame = CGRect.init(x: 0, y: 0, width: width - 80, height: 40)
        self.textView.layer.masksToBounds = true
        self.textView.layer.cornerRadius = 10
        
       
        self.btn_send.snp.makeConstraints { (make) in
            make.width.equalTo(50)
            make.height.equalTo(35)
            make.centerY.equalTo(self.textView.snp.centerY)
            make.left.equalTo(self.textView.snp.right).offset(10)
            
        }
        
        self.btn_send.layer.masksToBounds = true
        self.btn_send.layer.cornerRadius = 6
        self.btn_send.addTarget(self, action: #selector(self.adddiscussDetails), for: .touchUpInside)
    }
   
    lazy var footView : UIView = {
        let view = UIView()
        view.backgroundColor = UIColor.colorWithHex(hexColor: 0xf2f2f2)
        return view
    }()
 
    
   //textview高度自适应
    func textViewDidChange(_ textView: UITextView) {
        let f = textView.frame
        let constrainSize = CGSize.init(width: f.size.width, height: CGFloat(MAXFLOAT))
        let size = textView.sizeThatFits(constrainSize)
        UIView.animate(withDuration: 0.1, animations: {
            var frame = self.footView.frame
            frame.size.height = CGFloat(Int(size.height) + 20)
            frame.origin.y =   frame.origin.y - CGFloat(Int(size.height) - self.sizeHight)
            self.footView.frame = frame
        })
        UITextView.animate(withDuration: 0.1, animations: {
            var frame = self.textView.frame
            frame.size.height = CGFloat(Int(size.height))
            self.textView.frame = frame
        })
         self.sizeHight = Int(size.height)
    }
    
   
    
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    let width = UIScreen.main.bounds.width
    
    var tableView : UITableView!
    lazy var list  = [JSON]()
    lazy  var dataJson = JSON()
    lazy var replyId : String = {return ""}()
    lazy var topicId : String = {return ""}()
    lazy var courseOpenId : String = {return ""}()
    lazy var sizeHight : Int = 40
    var htmls = [HtmlRecord]()
    let htmlOperations = HtmlOperations()
    var isPushed = false
    lazy var page : Int = {return 1}()
    var ht = 0
    
    lazy var textView : UITextView = {
        let view = UITextView()
        view.font = UIFont.italicSystemFont(ofSize: 20)
        view.layer.borderColor = UIColor.lightGray.cgColor

        view.layer.borderWidth=0.5
        view.layer.cornerRadius=5
        view.layer.masksToBounds=true
        return view
    }()

    lazy var headview : BBSHeadView = {
        let view = BBSHeadView()
        view.deletegate = self
        return view
    }()

    lazy var toolView : ZQKeyboardTool = {
        let tool = ZQKeyboardTool()
        return tool
    }()
    lazy var btn_send :UIButton = {
        let btn = UIButton()
        btn.titleLabel?.font = UIFont.init(name: "iconfont", size: 16)
        btn.setTitle("发送", for: .normal)
        btn.setTitleColor(UIColor.bg, for: .normal)
        btn.backgroundColor = UIColor.white
        return btn
    }()
   
}

extension discussDetailsView:UITableViewDelegate,UITableViewDataSource,MoocDiscussDetailsViewCellDelegate{

    func ReturnReplyDocUrl(_ url: String) {
        self.getDocByUrl(url: url)
    }
    func setTableview(){
        if common.share.isX(){
            ht = 60
        }
        
        
        self.tableView = UITableView.init(frame: CGRect.init(x: 0, y: 0, width: width, height: UIScreen.main.bounds.height - 110 - CGFloat(self.ht)))
        tableView.tableFooterView = UIView(frame:CGRect.zero)
        tableView.separatorInset = UIEdgeInsets.zero;
        tableView.layoutMargins = UIEdgeInsets.zero;
        tableView.delegate = self
        tableView.dataSource = self
        //去除cell分割线
        //self.tableView.separatorStyle = UITableViewCellSeparatorStyle.none
        //ipad
        if #available(iOS 9.0, *) {
            tableView.cellLayoutMarginsFollowReadableWidth = false
        } else {
            
        }

        self.tableView.estimatedRowHeight = 44.0;

        self.tableView.rowHeight = UITableViewAutomaticDimension;

        //上拉加载
        self.tableView.mj_footer = MJRefreshBackNormalFooter(refreshingBlock: {
            self.page += 1
            self.getReply()
        })

        self.view.addSubview(self.tableView)
    }
  
    
    
    func numberOfSections(in tableView: UITableView) -> Int {
        // #warning Incomplete implementation, return the number of sections
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        // #warning Incomplete implementation, return the number of rows
        return self.list.count
    }
    
    
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {

        let json = JSON(self.list[indexPath.row])
        let identifier = json["id"].stringValue

        self.tableView.register(UINib.init(nibName: "MoocDiscussDetailsViewCell", bundle: Bundle.main), forCellReuseIdentifier: identifier)
        let cell : MoocDiscussDetailsViewCell = tableView.dequeueReusableCell(withIdentifier: identifier, for: indexPath) as! MoocDiscussDetailsViewCell
        cell.delegate = self
        cell.btn_delete.tag = indexPath.row
        //判断删除按钮是否显示
        cell.setReply(reply: json)
        //为了提示用户，将cell的accessory view设置为UIActivityIndicatorView。
        if cell.accessoryView == nil {
            let indicator = UIActivityIndicatorView(activityIndicatorStyle: .gray)
            cell.accessoryView = indicator
        }
        let indicator = cell.accessoryView as! UIActivityIndicatorView

        let html = self.htmls[indexPath.row]


        switch (html.state){
        case .done:
            indicator.stopAnimating()
            cell.lab_content.attributedText = html.htmlAttributedString
        case .new:
            indicator.startAnimating()
            self.startDownloadForRecord(html, indexPath: indexPath)
        }
        
        return cell
    }


    //执行任务
    func startDownloadForRecord(_ htmlRecord: HtmlRecord, indexPath: IndexPath){
        //判断队列中是否已有该任务
        if let _ = htmlOperations.conversionInProgress[indexPath] {
            return
        }

        //创建一个下载任务
        let conversion = StringConversion(htmlRecord: htmlRecord)
        //任务完成后重新加载对应的单元格
        conversion.completionBlock = {
            if conversion.isCancelled {
                return
            }
            DispatchQueue.main.async(execute: {
                self.htmlOperations.conversionInProgress.removeValue(forKey: indexPath)
                self.tableView.reloadRows(at: [indexPath], with: .fade)
            })
        }
        //记录当前下载任务
        htmlOperations.conversionInProgress[indexPath] = conversion
        //将任务添加到队列中
        htmlOperations.conversionQueue.addOperation(conversion)
    }

}



