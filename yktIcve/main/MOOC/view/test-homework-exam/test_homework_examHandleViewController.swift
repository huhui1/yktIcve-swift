//
//  test_homework_examHandleViewController.swift
//  云课堂2
//
//  Created by 尤增强 on 2018/6/11.
//  Copyright © 2018年 zqyou. All rights reserved.
//

import UIKit
import Alamofire
import SwiftyJSON
import SCLAlertView

extension test_homework_examHandleView{



    //返回按钮
   @objc  func backBtnClick() {

            if(self.isEndClass){
                 self.closeVC()
                return
            }

            let alertController = UIAlertController(title: "警告", message: "你当前处于做题状态，退出后将不会保存此次作业草稿，请确认是否保存？", preferredStyle: .alert)
            //设置 Actions   点击出发的响应事件都写在相应的代码块里
            let noAction = UIAlertAction(title: "我不想保存", style: .cancel){ (action) -> Void in
                self.closeVC()
            }
            let yesAction = UIAlertAction(title: "取消", style: .default){ (action) -> Void in

            }
            //添加 Actions，添加的先后和显示的先后顺序是有关系的
            alertController.addAction(noAction)
            alertController.addAction(yesAction)
            //展示Alert Controller
            self.present(alertController, animated: true, completion: nil)
    }


  /// 关闭VC
  fileprivate  func closeVC(){
      self.codeTimer?.cancel()
     theWebView.configuration.userContentController.removeScriptMessageHandler(forName: "interOp")
        self.navigationController?.popViewController(animated: true)
    }

    //获取作业-测验-考试 题目
    func getWorkExamPreview(){

        let dict = ["courseOpenId":self.courseOpenId,
                    "workExamId":self.workExamId,
                    "userId":Account.defaultAccount.id!]
        XLBallLoading.show(in: self.view)
        Alamofire.request(MOOCAPI.workexam_workExamPreview, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{
                    self.isEndClass = json["isEndClass"].boolValue
                    if(self.isEndClass){
                        ZKProgressHUD.showMessage("已经截止现只能查看");
                    }
                    if(self.workExamType == 2){
                         SCLAlertView().showInfo("提示", subTitle: "本次考试总时长为\(json["homework"]["limitTime"].intValue)分钟", closeButtonTitle: "确定")
                    }
                    self.limitTime = json["homework"]["limitTime"].intValue
                    self.uploadUrl = json["param"]["fileSystemUrl"].stringValue
                    self.theWebView.evaluateJavaScript("assignmenthandle.get(\(json),\(self.workExamType),'\(Account.defaultAccount.id!)','\(self.uniqueId)',\(self.isEndClass))",
                        completionHandler: nil)
                }else{
                    ZKProgressHUD.showError("网络异常请稍后再试！");
                }
                XLBallLoading.hide(in: self.view)
            }else{
                ZKProgressHUD.showError("网络异常请稍后再试！");
                XLBallLoading.hide(in: self.view)
            }
        }
    }

    //加载学生作答记录及答案
//    courseOpenId 开课Id
//    stuHomeworkId 作业作答表Id
//    workExamType 类型 0-作业 1-测验 2-考试
//    userId 用户Id
    func  getKeep(){

        let dict = ["courseOpenId":self.courseOpenId,
                    "stuHomeworkId":self.stuHomeworkId,
                    "workExamType":self.workExamType,
                    "userId":Account.defaultAccount.id!] as [String : Any]
        XLBallLoading.show(in: self.view)
        Alamofire.request(MOOCAPI.workexam_keep, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let r = JSON(value)
                if r["code"] == 1{
                    self.uniqueId = r["param"]["uniqueId"].stringValue
                    self.useTime += r["param"]["useTime"].intValue
                    self.theWebView.evaluateJavaScript("assignmenthandle.getDraft(\(r),\(self.workExamType),'\(Account.defaultAccount.id!)','\(self.uniqueId)')",
                        completionHandler: nil)
                }else{
                    ZKProgressHUD.showMessage(r["msg"].string)
                }
                XLBallLoading.hide(in: self.view)
            }else{
                ZKProgressHUD.showMessage("网络异常请稍后再试！");
                XLBallLoading.hide(in: self.view)
            }
        }
    }


    //续做保存草稿
    func saveDraftWorkXZ(){

//        workExamStuId 作业/测验作答记录id
//        useTime 作答时间
//        courseOpenId 开课Id
//        userId 用户Id
        let dict = ["courseOpenId":self.courseOpenId,
                    "workExamStuId":self.stuHomeworkId,
                    "useTime":self.useTime,
                    "userId":Account.defaultAccount.id!] as [String : Any]
        XLBallLoading.show(in: self.view)
        Alamofire.request(MOOCAPI.workexam_saveDraftWorkXZ, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let r = JSON(value)
                if r["code"] == 1{
                    self.relaodParentvc()
                }else{
                    ZKProgressHUD.showMessage(r["msg"].string)
                }
                XLBallLoading.hide(in: self.view)
            }else{
                ZKProgressHUD.showMessage("网络异常请稍后再试！");
                XLBallLoading.hide(in: self.view)
            }
        }
    }

    //作答单选题/多选/判断题/问答/文件做答题

    func  onlineHomeworkAnswer(){

        let dict = ["courseOpenId":self.courseOpenId,
                    "userId":Account.defaultAccount.id!,
                    "docAnswer":"",
                    "docSize":"",
                    "docType":"",
                    "MD5":"",
                    "online":1,
                    "questionId":"",
                    "uniqueId":"",
                    "workExamType":self.workExamType] as [String : Any]
        XLBallLoading.show(in: self.view)
        Alamofire.request(MOOCAPI.workexam_onlineHomeworkAnswer, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{
                    
                }else{
                    ZKProgressHUD.showError("网络异常请稍后再试！");
                }
                XLBallLoading.hide(in: self.view)
            }else{
                ZKProgressHUD.showError("网络异常请稍后再试！");
                XLBallLoading.hide(in: self.view)
            }
        }
    }


    //二次判断题目是否全做完
//    uniqueId 学生作答一次，每次提交的UniqueId是不同的
//    userId 用户Id
    func isDoOver(){

        let dict = ["uniqueId":self.uniqueId,
                    "userId":Account.defaultAccount.id!]
        XLBallLoading.show(in: self.view)
        Alamofire.request(MOOCAPI.workexam_isDoOver, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let r = JSON(value)
                if r["code"] == 1{
                    self.isworkExamSave(msg:  r["msg"].stringValue)
                }else{
                    ZKProgressHUD.showMessage(r["msg"].string)
                }
                XLBallLoading.hide(in: self.view)
            }else{
                ZKProgressHUD.showMessage("网络异常请稍后再试！");
                XLBallLoading.hide(in: self.view)
            }
        }
    }

    func isworkExamSave(msg:String){

        let alertController = UIAlertController(title: "温馨提醒", message:msg, preferredStyle: .alert)
        //设置 Actions   点击出发的响应事件都写在相应的代码块里
        let noAction = UIAlertAction(title: "取消", style: .cancel)
        let yesAction = UIAlertAction(title: "提交", style: .default){ (action) -> Void in
            if(self.workExamType == 2){
                self.onlineExamSave()
            }else{
                self.workExamSave()
            }

        }
        //添加 Actions，添加的先后和显示的先后顺序是有关系的
        alertController.addAction(noAction)
        alertController.addAction(yesAction)
        //展示Alert Controller
        self.present(alertController, animated: true, completion: nil)

    }


    //学生提交作业 测验
    func workExamSave(){

//        courseOpenId 开课Id
//        uniqueId 学生提交记录标识Id
//        workExamId 作业-测验Id
//        workExamType 类型 0-作业，1-测验
//        userId 用户Id
//        useTime 作答时间
        let dict = ["courseOpenId":self.courseOpenId,
                    "uniqueId":self.uniqueId,
                    "workExamId":self.workExamId,
                    "workExamType":self.workExamType,
                    "userId":Account.defaultAccount.id!,
                    "useTime":self.useTime] as [String : Any]
        XLBallLoading.show(in: self.view)
        Alamofire.request(MOOCAPI.workexam_workExamSave, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{
                    self.relaodParentvc()

                    self.MOOCCourseKJModel?.cellRefresh = "cellRefresh"

                }else{
                    ZKProgressHUD.showMessage(json["msg"].stringValue)
                }
                XLBallLoading.hide(in: self.view)
            }else{
                ZKProgressHUD.showError("网络异常请稍后再试！");
                XLBallLoading.hide(in: self.view)
            }
        }
    }

    //学生提交考试
    func onlineExamSave(){
//
//        userId 用户Id
//        courseOpenId 开课Id
//        examId 考试Id
//        uniqueId 学生提交记录标识Id
//        useTime 作答时间
        let dict = ["courseOpenId":self.courseOpenId,
                    "uniqueId":self.uniqueId,
                    "examId":self.workExamId,
                    "userId":Account.defaultAccount.id!,
                    "useTime":self.useTime] as [String : Any]
        XLBallLoading.show(in: self.view)
        Alamofire.request(MOOCAPI.workexam_onlineExamSave, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{
                    self.relaodParentvc()

                }else{
                    ZKProgressHUD.showMessage(json["msg"].stringValue)
                }
                XLBallLoading.hide(in: self.view)
            }else{
                ZKProgressHUD.showError("网络异常请稍后再试！");
                XLBallLoading.hide(in: self.view)
            }
        }
    }

    //提交后刷新父级
    fileprivate  func relaodParentvc(){
    self.theWebView.configuration.userContentController.removeScriptMessageHandler(forName: "interOp")
        let count = self.navigationController?.viewControllers.count
        if let vc:test_homework_recordView = self.navigationController?.viewControllers[count! - 2] as? test_homework_recordView{
                vc.getTest_homeworkRecordList()
        }

        self.navigationController?.popViewController(animated: true)
    }

    //作业测验保存草稿
    //    courseOpenId 开课Id
    //    uniqueId 学生作答唯一标识Id
    //    useTime 作答时间
    //    workExamId 作业测验Id
    //    workExamType 类型(0-作业 1-测验)
    //    userId 用户Id
    func onlineWorkExamSaveDraft(){
        let dict = ["courseOpenId":self.courseOpenId,
                    "uniqueId":self.uniqueId,
                    "workExamId":self.workExamId,
                    "workExamType":self.workExamType,
                    "userId":Account.defaultAccount.id!,
                    "useTime":self.useTime] as [String : Any]
        XLBallLoading.show(in: self.view)
        Alamofire.request(MOOCAPI.workexam_onlineWorkExamSaveDraft, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let r = JSON(value)
                if r["code"] == 1{
                    self.relaodParentvc()
                }else{
                    ZKProgressHUD.showMessage(r["msg"].stringValue)
                }
                XLBallLoading.hide(in: self.view)
            }else{
                ZKProgressHUD.showError("网络异常请稍后再试！");
                XLBallLoading.hide(in: self.view)
            }
        }
    }

    //删除文件
    /**
     *Id 附件id
     *questionId 题目id
     *uniqueId 唯一标示(study)
     *isWD 是否为问答 （true 是问答题 false不是问答题）
     *userId 用户Id
     */
    func delFileAnswer(Id:String,questionId:String,isWD:Bool){

        let dict = ["Id":Id,
                    "questionId":questionId,
                    "uniqueId":self.uniqueId,
                    "isWD":isWD,
                    "userId":Account.defaultAccount.id!] as [String : Any]
        XLBallLoading.show(in: self.view)
        Alamofire.request(MOOCAPI.workexam_delFileAnswer, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let r = JSON(value)
                if r["code"] == 1{

                }else{
                    ZKProgressHUD.showMessage(r["msg"].string)
                }
                XLBallLoading.hide(in: self.view)
            }else{
                ZKProgressHUD.showMessage("网络异常请稍后再试！");
                XLBallLoading.hide(in: self.view)
            }
        }
    }

    //文件上传 入库到题目下
//    answer 答案
//    userId 用户Id
//    docAnswer 题目附件答案url
//    docSize 题目附件大小
//    docTitle 题目附件标题
//    docType 题目附件类型
//    MD5 题目附件MD5
//    online 客观题题目传1 非客观题else
//    questionId 题目Id
//    uniqueId 唯一标识Id
//    workExamType 类型 0-作业 1-测验 2-考试
    func uploadFile(data:JSON,isimg:Bool){

        let dict = ["answer":"",
                    "MD5":data["MD5"].stringValue,
                    "docAnswer":data["docUrl"].stringValue,
                    "docSize":data["docSize"].stringValue,
                    "docTitle":data["docTitle"].stringValue,
                    "docType":data["docType"].stringValue,
                    "online":"0",
                    "workExamId":self.workExamId,
                    "uniqueId":self.uniqueId,
                    "workExamType":self.workExamType,
                    "questionId":self.questionId,
                    "userId":Account.defaultAccount.id!] as [String : Any]
        XLBallLoading.show(in: self.view)
        Alamofire.request(MOOCAPI.workexam_onlineHomeworkAnswer, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let r = JSON(value)
                if r["code"] == 1{
                    if(isimg){
                        self.theWebView.evaluateJavaScript("assignmenthandle.uploadImg(\(r),'\(data["thumbnail"].stringValue)','\(data["docUrl"].stringValue)')",
                            completionHandler: nil)
                    }else{
                        self.theWebView.evaluateJavaScript("assignmenthandle.uploadvideo(\(r),'\(data["thumbnail"].stringValue)','\(data["docUrl"].stringValue)')",
                            completionHandler: nil)
                    }

                }else{
                    ZKProgressHUD.showMessage(r["msg"].string)
                }
                XLBallLoading.hide(in: self.view)
            }else{
                ZKProgressHUD.showMessage("网络异常请稍后再试！");
                XLBallLoading.hide(in: self.view)
            }
        }
    }

    //文件跳转
    func getDocByUrl(url:String){
        let dict = ["url":url]

        Alamofire.request(MOOCAPI.workexam_getDocByUrl, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let r = JSON(value)
                if r["code"] == 1{
                    self.previewVC(r: r)
                }else{
                    ZKProgressHUD.showMessage(r["msg"].string)
                }

            }else{
                ZKProgressHUD.showMessage("网络异常请稍后再试！");

            }
        }
    }


    //文件跳转
    fileprivate func previewVC(r:JSON){
        var images = [String]()
        let data = JSON.init(parseJSON: r["docUrl"].stringValue)
        switch data["category"] {
        case "office","ppt":
            if(data["isH5"].boolValue){
                let vc = PPT_Animation_PreviewView()
                vc.isTeaching = false
                vc.isKJ = false
                vc.linkStr = data["h5PreviewUrl"].stringValue
                NavigatorService.navigateToPage(vc, animated: true)
            }else{
                var page_count = data["args"]["page_count"].intValue
                if(page_count == 0){
                    page_count = 1
                }
                var prefix = data["urls"]["preview_oss_gen"].stringValue
                
                if(prefix.isEmpty){
                    prefix = data["urls"]["preview"].stringValue

                }
                for i in 1...page_count{
                    let imgUrl = "\(prefix)/\(i).png"
                    images.append(imgUrl)
                }
                
                let vc = ImagePreviewVC()
                vc.images = images

                NavigatorService.navigateToPage(vc, animated: true)
            }
        case "img":
            let vc = PicturePreviewView()
            if data["urls"]["preview_oss_ori"].stringValue.isEmpty{
                vc.imgurl = data["urls"]["preview"].stringValue
            }else{
                vc.imgurl = data["urls"]["preview_oss_ori"].stringValue
            }
            NavigatorService.navigateToPage(vc, animated: true)
        case "video":
            var videourls = [String]()
            //拼接URL
            for (key, value) in data["args"]{
                if data["urls"]["preview_oss_gen"].stringValue.isEmpty{


                    if value.boolValue{
                        let videoUrl = "\(data["urls"]["preview"].stringValue)/\(key).mp4"
                        videourls.append(videoUrl)
                    }
                }else{
                    if value.boolValue{
                        let videoUrl = "\(data["urls"]["preview_oss_gen"].stringValue)/\(key).mp4"
                        videourls.append(videoUrl)
                    }
                }
                
            }
            if videourls.count == 0 {
               let videoUrl = data["urls"]["preview"].stringValue
               videourls.append(videoUrl)
            }
            let vc = videoPlayView()
            vc.isFromZjyErrorQuestion = true
            vc.videourls = videourls
        
            NavigatorService.navigateToPage(vc, animated: true)
        case "audio","mp3":
            print("音乐")
            let vc = audioViewController()
            if !data["urls"]["preview_oss_gen"].stringValue.isEmpty{
                vc.audiourl = data["urls"]["preview_oss_gen"].stringValue
            }else {
                vc.audiourl = data["urls"]["preview"].stringValue
            }
            vc.isNet = true
            NavigatorService.navigateToPage(vc, animated: true)
        default:
            ZKProgressHUD.showMessage("此类型暂不支持请前往网页查看")
        }
  
    }
   
}
