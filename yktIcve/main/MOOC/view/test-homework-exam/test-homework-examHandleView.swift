//
//  test-homework-examHandleView.swift
//  云课堂2
// 测验-作业-考试作答页面
//  Created by 尤增强 on 2018/6/11.
//  Copyright © 2018年 zqyou. All rights reserved.
//

import UIKit
import WebKit
class test_homework_examHandleView: UIViewController {


    var MOOCCourseKJModel: MOOCCourseKJModel?
    override func viewDidLoad() {
        super.viewDidLoad()
        self.setWebUI()
        // Do any additional setup after loading the view.
    }

   fileprivate func setWebUI(){

        let item = UIBarButtonItem(title: "\u{e6f7}返回", style: .plain, target: self, action: #selector(self.backBtnClick))
        self.navigationItem.leftBarButtonItem = item
        let item1 = UIBarButtonItem(title: "返回", style: .plain, target: self, action: nil)
        self.navigationItem.backBarButtonItem = item1
        common.share.setBackButtonItem(item:item)
        let path = Bundle.main.path(forResource: "assignment-handle", ofType: ".html",
                                    inDirectory: "HTML5/src/MOOC");
        let url = URL(fileURLWithPath:path!);
        //let request = URLRequest(url:url);

        //创建供js调用的接口
        let theConfiguration = WKWebViewConfiguration()
        theConfiguration.userContentController.add(self, name: "interOp")

        //将浏览器视图全屏(在内容区域全屏,不占用顶端时间条)
        let frame = CGRect(x:0, y:0, width:UIScreen.main.bounds.width,
                           height:UIScreen.main.bounds.height-60 + CGFloat(HX))
        theWebView = WKWebView(frame:frame, configuration: theConfiguration)
        theWebView.scrollView.bounces = false;
        //加载页面
        if #available(iOS 9.0, *) {
            
            theWebView.loadFileURL(url, allowingReadAccessTo: url)
        } else {
            
            do{
                
                let url1 = try common.share.fileURLForBuggyWKWebView8(fileURL:url as NSURL)
                let request = URLRequest(url:url1 as URL);
                theWebView.load(request)
                
            }catch{}
        }
        //theWebView.load(request)
        theWebView.navigationDelegate = self
        self.view.addSubview(theWebView);
    }


   

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }

    func setTime(){


        // 在global线程里创建一个时间源
        codeTimer = DispatchSource.makeTimerSource(queue:  DispatchQueue.global())
        // 设定这个时间源是每秒循环一次，立即开始
        codeTimer?.schedule(deadline: .now(), repeating: .seconds(1))
        // 设定时间源的触发事件
        codeTimer?.setEventHandler(handler: {

            // 每秒计时一次
            self.useTime = self.useTime + 1

            // 返回主线程处理一些事件，更新UI等等
            DispatchQueue.main.async {
                let  seconds = self.useTime % 60;
                let  minutes = Int(self.useTime / 60);
                let title =  "\(minutes):\(seconds)";
                self.title = title
                if(self.workExamType == 2 &&  self.limitTime * 60 - self.useTime == 600 ){
                     ZKProgressHUD.showMessage("距离考试结束还有10分钟，请注意时间安排")
                }else if(self.workExamType == 2 && self.useTime  == self.limitTime * 60){
                    self.onlineExamSave()
                }

            }
        })
        // 启动时间源
        codeTimer?.resume()
    }

    var codeTimer: DispatchSourceTimer?


    lazy var useTime :Int = {

        return 0
    }()
    let HX = common.share.returnSafeAreaLineHeight()
    lazy var  courseOpenId :String = {
        return ""
    }()

    lazy var  workExamId :String = {
        return ""
    }()

    lazy var workExamType:Int = {
        return 0
    }()
   
    //学生提交记录标识Id
    lazy var uniqueId:String = {
        return ""
    }()
    //学生做作业题目表Id
    lazy var paperStuIdString:String = {
        return ""
    }()
    lazy var theWebView :WKWebView = {
        let wk = WKWebView()
        return wk
    }()

    /// 是否结束
    var isEndClass = true

    //是不是草稿 draft
    lazy var isDraft = false

    lazy var stuHomeworkId:String = {
        return ""
    }()
    lazy var uploadUrl : String = {

        return ""
    }()
    var limitTime = 0
    lazy var questionId:String = {
         return ""
    }()

}

extension test_homework_examHandleView:WKScriptMessageHandler,WKNavigationDelegate{
    func userContentController(_ userContentController: WKUserContentController, didReceive message: WKScriptMessage) {
        let sentData = message.body as! Dictionary<String,String>

        if(sentData["method"] == "showMsg"){
            ZKProgressHUD.showMessage(sentData["msg"]!)
        }else if(sentData["method"] == "workExamSave"){

            if(sentData["isAllDo"] == "false"){
                 self.isworkExamSave(msg:"存在题目尚未作答，是否要提交?")
            }else if(sentData["isAllDo"] == "true"){
                self.isDoOver()
            }

        }else if(sentData["method"] == "onlineWorkExamSaveDraft"){
            if(self.stuHomeworkId.isEmpty){
                self.onlineWorkExamSaveDraft()
            }else{
                self.saveDraftWorkXZ()
            }
        }else if(sentData["method"] == "previewImg"){
            self.getDocByUrl(url: sentData["url"]!)
            
        }else if(sentData["method"] == "delFileAnswer"){
            self.delFileAnswer(Id: sentData["Id"]!, questionId: sentData["questionId"]!, isWD:  Bool(sentData["isWD"]!)!)
        }else if(sentData["method"] == "uploadImg"){
          self.questionId = sentData["questionId"]!
       
          self.uploadImg()
        }else if(sentData["method"] == "getDocByUrl"){
           self.getDocByUrl(url: sentData["url"]!)
        }
    }

    func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {
        if(self.stuHomeworkId.isEmpty){
            self.getWorkExamPreview()
        }else{
            self.getKeep()
        }

        self.setTime()
    }

    func webView(_ webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping (WKNavigationActionPolicy) -> Void) {
        let url = navigationAction.request.mainDocumentURL
        if((url?.scheme?.contains("http"))! || (url?.scheme?.contains("https"))!){
            //
            print("拒绝")
            let vc = linkjumpView()
            vc.linkStr = (navigationAction.request.mainDocumentURL?.absoluteString)!
        
            self.navigationController?.pushViewController(vc, animated: true)
            //            UIApplication.shared.openURL(url! as URL)
            decisionHandler(.cancel);
        }else{
            decisionHandler(.allow);
        }

    }
}
