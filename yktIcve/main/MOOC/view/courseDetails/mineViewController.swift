//
//  mineViewController.swift
//  云课堂2
//
//  Created by cc on 2018/5/29.
//  Copyright © 2018年 zqyou. All rights reserved.
//

import UIKit
import SnapKit

class mineViewController: UIViewController,UITextFieldDelegate,UIImagePickerControllerDelegate,UINavigationControllerDelegate ,UITextViewDelegate{
    @IBOutlet weak var mytext: UITextField!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.view.backgroundColor = UIColor.white
        self.setUI()
        self.mytext.delegate = self
        self.mytext.returnKeyType = .send
        self.textView.delegate = self

        // Do any additional setup after loading the view.
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    @objc func courseDetails(){
         
        let vc = test_homework_recordView()
        vc.hidesBottomBarWhenPushed = true
        self.navigationController?.pushViewController(vc, animated: true)

    }
    @objc func discuss(){
//        let vc = courseDiscussView()
//        self.hidesBottomBarWhenPushed = true
//        self.navigationController?.pushViewController(vc, animated: true)
        let vc = MyViewController()
        self.hidesBottomBarWhenPushed = true
//        self.navigationController?.pushViewController(vc, animated: true)
        self.present(vc, animated: true, completion: nil)
    }

    func textFieldShouldBeginEditing(_ textField: UITextField) -> Bool {
        let vg = UIView.init(frame: self.view.frame)
        vg.backgroundColor = UIColor(red: 0, green: 0, blue: 0, alpha: 0.2);

//        self.view.addSubview(vg)

        textField.inputAccessoryView = keyBG
        print("11")
        return true
    }
    @objc func courseKJ(){
        let vc = ImagePreviewVC()
        self.hidesBottomBarWhenPushed = true
        self.navigationController?.pushViewController(vc, animated: true)
    }

    @objc func Picture(){
        let vc = PicturePreviewView()
//        vc.file = "/Users/cc/Library/Developer/CoreSimulator/Devices/55117925-61AC-4542-A835-DAB75F7FCF52/data/Containers/Data/Application/7F32FCB5-009C-47D1-B6E4-202C8774A344/Documents/46EFDF595046880513F7E2F5E728761D.png"
        self.hidesBottomBarWhenPushed = true
        self.navigationController?.pushViewController(vc, animated: true)
    }
    
    @IBAction func jumpDiscuss(_ sender: Any) {
        let vc = TeachCourseCenterView()
        self.hidesBottomBarWhenPushed = true
        self.navigationController?.pushViewController(vc, animated: true)
        
    }
    @objc func PPT(){
        let vc = PPT_Animation_PreviewView()
        self.hidesBottomBarWhenPushed = true
        self.navigationController?.pushViewController(vc, animated: true)
    }

    func textViewDidChange(_ textView: UITextView) {
        
        let maxHeight:CGFloat = 40
        let constrainSize = CGSize.init(width: textView.frame.width, height: CGFloat(MAXFLOAT))
        let size = textView.sizeThatFits(constrainSize)
        if size.height >= maxHeight{
            textView.isScrollEnabled = true
        }else{
            textView.isScrollEnabled = false
        }
        textView.frame.size.height = size.height
    
    }
    func setUI(){
        self.view.addSubview(self.btn_courseDetail)
        self.view.addSubview(self.btn_discuss)
        self.view.addSubview(self.btn_courseKJ)
        self.view.addSubview(self.btn_picture)
        self.view.addSubview(self.textView)
        self.view.addSubview(self.btn_ppt)

        self.btn_courseDetail.snp.makeConstraints { (make) in
            make.height.equalTo(20)
            make.width.equalTo(80)
            make.top.equalTo(200)
            make.left.equalTo(10)
        }
        self.btn_discuss.snp.makeConstraints { (make) in
            make.height.equalTo(20)
            make.width.equalTo(80)
            make.top.equalTo(200)
            make.left.equalTo(100)
        }

        self.btn_courseKJ.snp.makeConstraints { (make) in
            make.height.equalTo(20)
            make.width.equalTo(80)
            make.top.equalTo(200)
            make.left.equalTo(200)
        }
        self.keyBG.btn_photo.addTarget(self, action: #selector(self.funcChooseFromCamera), for: .touchUpInside)
         self.keyBG.btn_video.addTarget(self, action: #selector(self.openvideo), for: .touchUpInside)
        
        self.btn_picture.snp.makeConstraints { (make) in
            make.height.equalTo(20)
            make.width.equalTo(80)
            make.top.equalTo(150)
            make.left.equalTo(10)
        }
        self.btn_ppt.snp.makeConstraints { (make) in
            make.height.equalTo(20)
            make.width.equalTo(80)
            make.top.equalTo(150)
            make.left.equalTo(100)
        }
        
        
        self.textView.snp.makeConstraints { (make) in
            make.width.equalTo(UIScreen.main.bounds.width - 20)
            make.height.equalTo(40)
            make.bottom.equalTo(self.view.snp.bottom).offset(-150)
            make.left.equalTo(10)
        }
        self.textView.layer.masksToBounds = true
        self.textView.layer.cornerRadius = 10
        self.textView.layer.borderColor = UIColor.gray.cgColor
        self.textView.layer.borderWidth = 1
    }

    

    @objc func funcChooseFromCamera() -> Void{
        if UIImagePickerController.isSourceTypeAvailable(UIImagePickerControllerSourceType.camera) {
            let imagePicker = UIImagePickerController()

            //设置代理
            imagePicker.delegate = self
            //允许编辑
            imagePicker.isEditing = false;
            //设置图片源
            imagePicker.sourceType = UIImagePickerControllerSourceType.camera
            //模态弹出IamgePickerView

            self.present(imagePicker, animated: true, completion: nil)

        }else{
            print("模拟器不支持拍照功能")
        }
    }

    @objc func openvideo(){
        let vc = ASmallVideoView()
//        vc.hidesBottomBarWhenPushed = true

//        self.navigationController?.pushViewController(vc, animated: true)
        vc.modalTransitionStyle = .crossDissolve
        self.present(vc, animated: true, completion: nil)
    }

    func imagePickerControllerDidCancel(_ picker: UIImagePickerController){
        picker.dismiss(animated: true, completion: nil)
    }

    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : Any]) {
        //获取照片的原图
        let image = (info as NSDictionary).object(forKey: UIImagePickerControllerOriginalImage)as!UIImage
        //获得编辑后的图片
        //let image = (info as NSDictionary).object(forKey: UIImagePickerControllerEditedImage)as!UIImage


        picker.dismiss(animated: true, completion: nil)
    }

    
    lazy var btn_courseDetail : UIButton = {
        let btn = UIButton()
        btn.setTitle("课程详情", for: .normal)
        btn.titleLabel?.font = UIFont.italicSystemFont(ofSize: 15)
        btn.setTitleColor(UIColor.black, for: .normal)
        btn.backgroundColor = UIColor.colorWithHex(hexColor: 0xf2f2f2)
        btn.addTarget(self, action: #selector(self.courseDetails), for: .touchUpInside)
        return btn
    }()
    lazy var btn_discuss : UIButton = {
        let btn = UIButton()
        btn.setTitle("我的界面", for: .normal)
        btn.titleLabel?.font = UIFont.italicSystemFont(ofSize: 15)
        btn.setTitleColor(UIColor.black, for: .normal)
        btn.backgroundColor = UIColor.colorWithHex(hexColor: 0xf2f2f2)
        btn.addTarget(self, action: #selector(self.discuss), for: .touchUpInside)
        return btn
    }()
    lazy var btn_courseKJ : UIButton = {
        let btn = UIButton()
        btn.setTitle("文档", for: .normal)
        btn.titleLabel?.font = UIFont.italicSystemFont(ofSize: 15)
        btn.setTitleColor(UIColor.black, for: .normal)
        btn.backgroundColor = UIColor.colorWithHex(hexColor: 0xf2f2f2)
        btn.addTarget(self, action: #selector(self.courseKJ), for: .touchUpInside)
        return btn
    }()
    lazy var btn_picture : UIButton = {
        let btn = UIButton()
        btn.setTitle("图片", for: .normal)
        btn.titleLabel?.font = UIFont.italicSystemFont(ofSize: 15)
        btn.setTitleColor(UIColor.black, for: .normal)
        btn.backgroundColor = UIColor.colorWithHex(hexColor: 0xf2f2f2)
        btn.addTarget(self, action: #selector(self.Picture), for: .touchUpInside)
        return btn
    }()
    lazy var btn_ppt : UIButton = {
        let btn = UIButton()
        btn.setTitle("PPT", for: .normal)
        btn.titleLabel?.font = UIFont.italicSystemFont(ofSize: 15)
        btn.setTitleColor(UIColor.black, for: .normal)
        btn.backgroundColor = UIColor.colorWithHex(hexColor: 0xf2f2f2)
        btn.addTarget(self, action: #selector(self.PPT), for: .touchUpInside)
        return btn
    }()
    
    lazy var textView : UITextView = {
        let text = UITextView()
        text.font = UIFont.italicSystemFont(ofSize: 20)
        return text
    }()
    

    
    let keyBG = ZQKeyboardTool.init(frame: CGRect.init(x: 0, y: 0, width: UIScreen.main.bounds.width, height:50))


}
