/**
 * 测验，从课件选择
 * @param {Object} $M => mui
 * @param {Object} $  => zepto
 * @name  hk
 * @date  2016-11-3
 * @return {Object}
 */
(function($M, $) {

    var select = {
 
        /**
         * 扩展 Template 方法
         * @return {this}
        */
        helper: function(){
            var _this = this;
 
            // 获取目录名
            template.helper('getChapterLevel', function(val) {
                if (!_this.config) return;
                var result = _this.levelFormat(val, 'chapter'),
                    text = _this.config.Level1Format.replace('{0}', result);
                 
                return text;
            });
 
            // 获取节目录
            template.helper('getSectionLevel', function(val, chapter) {
                if (!_this.config) return;
                 
                var type = _this.config.Level2Format === '{1}.{0}',
                    result = _this.levelFormat(val, 'section'),
                    text = _this.config.Level2Format.replace('{0}', result);
                 
                if (type) {
                    text = text.replace('{1}', chapter + 1);
                }
                 
                return text;
            });
 
            // 获取章目录
            template.helper('getKnowledgeLevel', function(val, obj) {
                if (!_this.config) return;
                 
                var type = _this.config && _this.config.Level3Format === '{2}.{1}.{0}',
                    temp = _this.config && (_this.levelFormat(val, 'knowledge')),
                    text = _this.config ? (_this.config.Level3Format.replace('{0}', temp)) : '';
                 
                if (type && _this.config) {
                    text = text.replace('{1}', obj[0] + 1).replace('{2}', obj[1] + 1);
                }
                 
                return text;
                 
            });
 
            // 转换类型 Class
            template.helper('typeClass', function(data) {
                var str = '';
                switch (data) {
                    case 1:
                    case 2:
                    case 3:
                    case 4:
                    case 5:
                    case 6:
                    case 7:
                    case 9:
                        str = 'active';
                    break;
                    default:
                    str = '';
                }
                return str;
            });
 
            return this;
        },
 
        /**
         * 从课件选取
         * @return {this}
        */
        get: function() {
 
            var _this = this;
 
            $http.post(app.teacherAPI.halltest.searchQuestion, {courseId: this.courseId}, function(data) {
                if (data.code > 0) {
                    _this.config = data.config;
            
                    $('#exam-select-list').append(template('course-list-tpl', data));
                } else {
                    plus.nativeUI.toast('获取数据失败');
                }
                $('#mask').addClass('mui-hidden');
            },function(){
                plus.nativeUI.toast('获取数据测验课件失败，请检查您的网络设置');
            });
 
            return this;
        },
 
        /**
         * 格式化数据
         * @return {this}
        */
        format: {
            zh: ['十', '一', '二', '三', '四', '五', '六', '七', '八', '九'],
            number: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
        },
 
        /**
         * 目录名转换
         * @return this;
        */
        levelFormat: function(val, type) {
            if (!this.config) {
                return;
            }
 
            var arr = val.toString().split(''),
                format = this.config[(type === 'chapter') ? 'Level1Num' : (type === 'section' ? 'Level2Num' : 'Level3Num')],
                hasZh = format === '一',
                temp = this.format[hasZh ? 'zh' : 'number'],
                result = '';
 
            if (arr.length > 1 && hasZh) {
                result = (Number(arr[0]) === 1 ? '' : temp[Number(arr[0])]) + (Number(arr[1]) > 0 ? (temp[0] + temp[Number(arr[1])]) : temp[Number(arr[1])]);
            } else {
                $.each(arr, function(index, item) {
                    result += temp[Number(item)];
                });
            }
 
            return result;
        },
 
        /**
         * 事件绑定
         * @return {this}
        */
        events: function() {
            var _this = this,
                isExec = false;
 
            $M('.mui-scroll-wrapper').scroll();
 
            //目录树的收缩
            $('.exam-select-list').on('singleTap', 'a', function(e){
                e.preventDefault();
                                      
                var $target = $(e.target);
                                    
                if($target.hasClass('first-child')){
                    if(isExec) return;
                                      
                    var $elem = $(this).parent(),
                        has = $elem.hasClass('active');
                                      
                    isExec = true;
                                      
                    if (has) {
                        $elem[has ? 'removeClass' : 'addClass']('active');
                    } else {
                        $elem.addClass('active');
                    }
                                    
                    setTimeout(function() {
                        isExec = false;
                    }, 200);
                }else if($target.hasClass('resource') || $target.parent().hasClass('resource')){
                    var $elem = $target.hasClass('resource')? $target: $target.parent('a'),
                        id = $elem.attr('data-id'),
                        title = $elem.find('.title').text(),
                        cellQuestionIds = $elem.attr('data-questionIds'),
                        questionIds = [];

                    $.each(cellQuestionIds.split(','), function(i, v){
                        if(v != '') questionIds.push(v);
                    });
                                      
                    $M.openWindow({
                        url: '/view/teacher/exam/create.html',
                        id: 'teacher-exam-create',
                        extras: {
                            courseId: _this.courseId,
                            title: title,
                            cellId: id,
                            cellQuestionIds: questionIds
                        }
                    });
                }
                                      
            });
 
            return this;
        },

        /**
         * 载入
         * @return {this}
        */
        init: function() {
            this.view = plus.webview.currentWebview();
            this.courseId = this.view.courseId;
            this.isTap = false;
            this.fromRes = false;
            this.classId = this.view.classId || '';
 
            this.config = null;

            if (this.view.fromRes) {
                this.fromRes = this.view.fromRes;
            }
 
            this.helper().get().events();
            return this;
        }

    };

    $M.plusReady(function() {
        select.init();
    });


}(mui, Zepto));
