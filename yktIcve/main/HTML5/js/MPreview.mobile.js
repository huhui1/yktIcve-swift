/**
 * @name     MPreview.mobile.js
 * @desc     移动端图片预览插件，支持手势缩放，双击放大，缩小
 * @depend   QuoJS
 * @author   M.J
 * @date     2015-09-25
 * @URL      http://webjyh.com
 * @reutn    {MPreview}
 * @version  1.0.0
 * @license  MIT
 *
 * @PS If you have any questions, please don't look for me, I don't know anything. thank you.
 */
(function(win, $) {

    "use strict";

    var transition,
        scaleReg = /scale(?:3d)?\(([^\)]+)\)/,
        translateReg = /translate(?:3d)?\(([^\)]+)\)/,
        config = {
            url: null,
            data: null,
            title: '【浏览】',
            openClassId: null,
            courseOpenId: null,
            msHtmltempl: null,
            params: {},
            wrap: 'body',
            direction: 'top',
            placeholder: 'images/placeholder.gif',
            init: null,
            close: null,
            penInfo: null,
            page: function() {},
            scale: function() {},
            rotate: function() {},
            move: function() {},
            markBefore: function() {},
            markMove: function() {},
            markAfter: function() {},
            markCancel: function() {},
            markEmpty: function() {},
            whiteboard: function() {},
            selectPhoto: function() {},
            selectWare: function() {},
            camera: function() {},
            from: '' // 标示是否是从课件中选取的图片
        },
        innerHTML = ['<div class="ui-MPreview-wrap">',
            '   <div class="ui-MPreview-row">',
            '       <div class="ui-MPreview-toolbar">',
            '            <div class="ui-MPreview-back"><a href="javascript:;"><i class="iconfont icon-arrow-left"></i></a></div>',
            '            <div class="rollback">',
            '                <ul class="mui-clearfix">',
            '                <li><a href="javascript: void(0);" class="iconfont icon-xiazai21" id="down"></a></li>',
            '                <li><a href="javascript: void(0);" class="iconfont icon-taolun1" id="BBS"></a></li>',
            '                   <li>',
            '                       <a href="javascript: void(0);" class="iconfont icon-mianshou" id="class-add"></a>',
            '						<div class="mask_layer" id="mask_layer"></div>',
            '                       <div class="class-add-list" id="class-add-list">',
            '							<span class="iconfont icon-close"></span>',
            '                           <div class="mui-content courseware-info mui-scroll-wrapper" id="mine-wrap"></div>',
            '                       </div>',
            '                    </li>',
            '                <li><a href="javascript: void(0);" class="iconfont icon-rotate" id="rotate"></a></li>',
            '                    <li><a href="javascript: void(0);" class="iconfont icon-cancel disabled" id="cancel"></a></li>',
            '                    <li><a href="javascript: void(0);" class="iconfont icon-eraser" id="eraser"></a></li>',
            '                    <li>',
            '                        <a href="javascript: void(0);" id="pen" class="iconfont icon-bi current">',
            '                            <span class="pen-line-text" id="pen-line-text">01</span>',
            '                        </a>',
            '                        <div class="panel-wrap" id="panel-wrap">',
            '                            <div class="pen-line mui-clearfix" id="pen-line">',
            '                                <a href="javascript: void(0);" class="line-1 current"><span></span></a>',
            '                                <a href="javascript: void(0);" class="line-2"><span></span></a>',
            '                                <a href="javascript: void(0);" class="line-3"><span></span></a>',
            '                                <a href="javascript: void(0);" class="line-5"><span></span></a>',
            '                                <a href="javascript: void(0);" class="line-9"><span></span></a>',
            '                            </div>',
            '                            <div class="pen-text mui-clearfix">',
            '                                <span>01</span>',
            '                                <span>02</span>',
            '                                <span>03</span>',
            '                                <span>05</span>',
            '                                <span>09</span>',
            '                            </div>',
            '                            <div class="color-list mui-clearfix" id="color-list">',
            '                                <a href="javascript:;" class="color-1 current"><span></span></a>',
            '                                <a href="javascript:;" class="color-2"><span></span></a>',
            '                                <a href="javascript:;" class="color-3"><span></span></a>',
            '                                <a href="javascript:;" class="color-4"><span></span></a>',
            '                                <a href="javascript:;" class="color-5"><span></span></a>',
            '                                <a href="javascript:;" class="color-6"><span></span></a>',
            '                                <a href="javascript:;" class="color-7"><span></span></a>',
            '                                <a href="javascript:;" class="color-8"><span></span></a>',
            '                                <a href="javascript:;" class="color-9"><span></span></a>',
            '                                <a href="javascript:;" class="color-10"><span></span></a>',
            '                            </div>',
            '                        </div>',
            '                    </li>',
            '                </ul>',
            '            </div>',
            '            <div class="ui-MPreview-pages"><select class="ui-MPreview-currentPage"><option value="00">00</option></select>/&nbsp;&nbsp;<span class="ui-MPreview-countPage">00</span></div>',
            '        </div>',
            '        <div class="ui-MPreview-view">',
            '            <div class="ui-MPreview-imgbox">',
            '                <ul class="ui-MPreview-imglist"></ul>',
            '            </div>',
            '            <div class="ui-MPreview-loading"></div>',
            '            <div class="ui-MPreview-arrowLeft"><i class="iconfont icon-arrow-left"></i></div>',
            '            <div class="ui-MPreview-arrowRight"><i class="iconfont icon-arrow-right"></i></div>',
            '        </div>',
            '   </div>',
            '</div>'
        ].join("");

    /**
     * @name      将默认配置和选项合并
     * @param     options     {Object}     默认用户的参数
     * @return    {Object}
     */
    var cover = function(options, defaults) {
        var i, options = options || {};
        for (i in defaults) {
            if (options[i] === undefined) options[i] = defaults[i];
        }
        return options;
    };

    /**
     * 判断设备支持 transitionend 的前缀
     */
    var whichTransitionEvent = function() {
        var t,
            el = document.createElement('div'),
            transitions = {
                'WebkitTransition': 'webkitTransitionEnd',
                'OTransition': 'oTransitionEnd',
                'MozTransition': 'transitionend',
                'transition': 'transitionend'
            };
        for (t in transitions) {
            if (el.style[t] !== undefined) {
                return transitions[t];
            }
        }
    };

    /**
     * @name      格式化当前页的数字
     * @param     val     {Number}     默认用户的参数
     * @return    {String}
     */
    var formatPage = function(val) {
        return val.toString().length < 2 ? '0' + val : val;
    };

    // 构造函数
    var MPreview = function(options) {
        return new MPreview.fn.init(options);
    };

    MPreview.fn = MPreview.prototype = {
        constructor: MPreview,
        init: function(options) {
            //用户配置项
            transition = whichTransitionEvent();
            this.config = cover(options, config); // 默认配置项
            this.topics = {}; // 存放订阅内容
            this.historyMark = {}; // 存放画笔历史记录
            this.penInfo = this.config.penInfo ? JSON.parse(this.config.penInfo) : {};

            //init 载入之前执行的回调
            if (typeof this.config.init == 'function') this.config.init();

            // 载入订阅内容
            this._action();

            // init 组件默认配置
            this.publish('init')
                .publish('ajax')
                .publish('touch');
            //                .publish('resize');

            this.publish('zoom');

            return this;
        },
        /**
         * @name    订阅发布
         * @type    {Function}
         * @parmas  {key}   订阅的名称
         * @params  {val}   订阅的内容
         * @return  this
         */
        subscribe: function(key, val) {
            if (!this.topics[key]) {
                this.topics[key] = [];
            }
            this.topics[key].push(val);
            return this;
        },

        /**
         * @name    退订发布
         * @type    {Function}
         * @params  {key}    要退订的名称
         * @return  this
         */
        unsubscribe: function(key) {
            if (this.topics[key]) {
                delete this.topics[key];
            }
            return this;
        },

        /**
         * @name    发布订阅的
         * @type    {Function}
         * @return  this
         */
        publish: function(key) {
            if (!this.topics[key]) {
                return false;
            }

            var subscribers = this.topics[key],
                len = subscribers ? subscribers.length : 0,
                args = [].slice.call(arguments);

            args.shift();
            for (var i = 0; i < len; i++) {
                subscribers[i].apply(this, args);
            }

            return this;
        },

        /**
         * 获取当前元素 CSS3 属性值
         * @param {Object} elem
         * @param {Object} name
         */
        getTransform: function(e, name) {
            e = $(e);

            var val = e.css("transform") || e.css("-webkit-transform"),
                has = val === 'none',
                arr, x, y, reg;

            if (name === 'translate') {
                reg = translateReg;
                if (has || val.indexOf(name) == -1) {
                    has = true;
                    x = y = 0;
                }
            } else if (name === "scale") {
                reg = scaleReg;
                if (has || val.indexOf(name) == -1) {
                    has = true;
                    x = y = 1;
                }
            }

            if (!has) {
                arr = val.match(reg);
                arr = arr[1].split(',');
                x = parseFloat(arr[0]);
                y = parseFloat(arr[1]);
            }

            return {
                x: x,
                y: y
            };
        },

        /**
         * @name    图片等比缩放
         * @param   size
         */
        scale: function(size) {
            if (!size.width || !size.height) {
                return { width: '100%', height: '100%' };
            }

            var r, w = size.width,
                h = size.height,
                screenW = parseInt(this.offset.width),
                screenH = parseInt(this.offset.height),
                scrrenScale = screenH / screenW,
                imgScale = h / w;

            //当屏幕的宽高比例 小于 图片的宽高比例时设置图片的宽高
            if (scrrenScale < imgScale) {
                w = parseInt(w * screenH / h);
                h = screenH;
            }

            //当屏幕的宽高比例 大于 图片的宽高比例时设置图片的宽高
            if (scrrenScale > imgScale) {
                h = parseInt(h * screenW / w);
                w = screenW;
            }

            return {
                width: w,
                height: h
            };
        },

        /**
         * 设置当前元素 CSS3 属性值
         * @param  {Elements} elem
         * @param  {Object} val
         * @return this;
         */
        setTransform: function(elem, val) {
            if (!elem) return;

            var css = '',
                style = elem.style,
                key,
                value;

            for (key in val) {
                value = val[key];
                if (key === 'translate') {
                    css += " translate3d(" + value.x + "px, " + value.y + "px, 0)";
                } else if (key === 'scale') {
                    css += " scale3d(" + value.x + ", " + value.y + ", 1)";
                } else {
                    css += value;
                }
            }

            style.transform = style.webkitTransform = css.trim();
        },

        /**
         * 设置当前元素 CSS3 属性值
         * @param  {Elements} elem
         * @param  {Object} val
         * @return this;
         */
        setTransition: function(elem, val) {
            if (!elem) return;
            var style = elem.style,
                key,
                value;
            for (key in val) {
                value = val[key];
                value.easing = value.easing || "ease";
                if (key === 'transform') {
                    style.transition = style.webkitTransition = '-webkit-' + key + ' ' + value.duration + ' ' + value.easing;
                }
                style.transition = style.webkitTransition = key + ' ' + value.duration + ' ' + value.easing;
            }
        },

        /**
         * @name    关闭销毁程序
         * @return  null;
         */
        destroy: function() {
            var has;
            if (typeof this.config.close == 'function') has = this.config.close();
            if (has === false) return;

            // 清空HTML
            $(this.config.wrap).empty();
            $(this.config.wrap).removeAttr('style');
            $(document).off('touchmove');
            $(window).off(this.resizeType);

        },

        /**
         * 创建画笔工具
         * @return Mark;
         */
        createMark: function(elem) {
            if (!elem) return this;

            var _this = this;

            if (elem.mark) {
                return elem.mark;
            } else {
                var color = _this.penInfo.color ? _this.penInfo.color : 'rgb(237, 69, 59)',
                    line = _this.penInfo.line ? _this.penInfo.line : 1,
                    $color;

                // 设置笔迹的颜色与粗细的显示
                var $line = $(".line-" + line);

                $('#pen-line > a').removeClass('current');
                $line.addClass('current');

                $('#panel-wrap').removeClass('current');
                $('#class-add-list').removeClass('current');
                $('#class-list-type').removeClass('show');

                $('#pen-line-text').text('0' + line);

                $.each($("#color-list a"), function(i, v) {
                    if ($(v).find('span').css('background-color') == color) {
                        $color = $(v);
                        return;
                    }
                })

                if ($color) {
                    $('#color-list > a').removeClass('current');
                    $color.addClass('current');

                    $('#panel-wrap').removeClass('current');
                    $('#class-add-list').removeClass('current');
                    $('#class-list-type').removeClass('show');

                    $('#pen').css('color', color);
                    $('#pen-line span').css('background-color', color);
                }

                var obj = Mark({
                    canvas: elem,
                    color: _this.penInfo.color ? _this.penInfo.color : 'rgb(237, 69, 59)',
                    line: {
                        Width: _this.penInfo.line ? _this.penInfo.line : 1
                    },
                    before: function(diff) {
                        var x = this.lastX + diff.diffX,
                            y = this.lastY + diff.diffY;

                        _this.config.markBefore && _this.config.markBefore.apply(this);
                    },
                    move: function(diff) {
                        var x = this.lastX + diff.diffX,
                            y = this.lastY + diff.diffY;

                        _this.config.markMove && _this.config.markMove.apply(this);
                    },
                    after: function(diff) {
                        $('#cancel').removeClass('disabled');
                        _this.config.markAfter && _this.config.markAfter.apply(this);
                    }
                });
                elem.mark = obj;
                return obj;
            }
        },

        /**
         * 跳转到第几页
         * @return null
         */
        go: function(index) {
            var _this = this,
                DOM = this.DOM;

            //隐藏上一张图片 显示加载框
            DOM.imgbox.removeClass('ui-MPreview-show')
            DOM.loading.removeClass('ui-MPreview-hide');

            // 存放画笔历史记录
            var $mark = $('[data-index="' + (_this.index - 1) + '"]'),
                MARK = $mark.find('canvas')[0].mark;

            if (MARK) {
                _this.historyMark[_this.index] = MARK.historyStroker;
            }


            _this.isScale = false;

            _this.index = index;

            if (_this.index > _this.data.length) _this.index = _this.data.length;
            if (_this.index < 1) _this.index = 1;

            _this.publish('load', [_this.data[index - 1]], index - 1, function(size, key) {
                _this.publish('append', size, key).publish('setPage');
            });

            // 上一页，下一页按钮隐藏
            DOM.arrowLeft.css('display', _this.index === 1 ? 'none' : 'block');
            DOM.arrowRight.css('display', _this.index === _this.data.length ? 'none' : 'block');

            // 上一页下一页操作
            _this.config.page && _this.config.page.apply(_this, [_this.index]);

            // 处理已放大图片恢复默认
            var $elem = DOM.imglist.find('img');
            $elem.css('transform-origin', '50% 50% 0px');
            $elem.css('transition', '-webkit-transform 0ms ease-out 0s');
            $elem.css('transform', 'scale3d(1, 1, 1)');

            return this;
        },

        /**
         * @name    配置订阅内容
         * @params  null
         * @return  this
         */
        _action: function() {

            // 设置配置项
            this.subscribe('init', function() {
                var _this = this,
                    css = 'width: 100%; height: 100%; overflow: hidden; background: #000';

                this.data = null; //请求所获取的数据
                this.DOM = null; //当前组件的DOM元素
                this.index = 1; //当前所在第几页
                this.size = {}; //对应的图片大小
                this.penStyle = { type: 'pen' }; //记录画笔样式
                this.isExec = false; //当前动画是否执行完成
                this.touch = null; //存储最近一次Touch的属性
                this.isScroll = false; //标识是否为当前滚动状态
                this.isScale = false; //当前图片是否放大中
                this.isZoom = false; //标识是否是双指滚动中的事件
                this.imgMoveData = null; //图片放大移动时缩放的值
                this.zoomInertia = null; // 双指缩放值以及点阵位置
                this.zoomRecord = 1; // 记录每次缩放后的缩放值，默认为1，
                this.zoomRecordTemp = 1; //临时记录图片的某次的缩放比例
                this.isScaling = false; //表示当前的图片是否在缩放操作中
                this.scalingTop = 0; //当前缩放的图片的top属性的规范值
                this.scalingLeft = 0; //当前缩放的图片的left属性的规范值 
                this.startPoints = {};
                this.middlePoint = {}; //缩放起始的中点位置
                this.rotateAngle = 0; //旋转的角度

                this.screen = {
                    width: window.innerWidth,
                    height: window.innerHeight
                };
                this.resizeType = typeof window.orientation == 'number' ? 'orientationchange' : 'resize'; //支持旋转的事件名
                this.config.direction = this.config.direction == 'left' ? true : false; //滚动方向，true 横屏幕滚动，false 竖屏滚动

                $(_this.config.wrap)[0].style.cssText = css;
                $(document).on('touchmove', function(e) { e.preventDefault(); });
            });

            // 创建DOM
            this.subscribe('init', function() {
                var elems, DOM = {},
                    html = innerHTML.replace('{{title}}', this.config.title),
                    elem = $(this.config.wrap),
                    screen = this.screen;

                elem.html(html);

                if (this.config.from == 'select') elem.find('#select-ware').addClass('mui-hidden');

                //非课件打开资源隐藏白板  互动等功能
                if (this.config.from == 'nofromware' || this.config.from == 'select') {
                    $(elem.find('li')[1]).addClass('mui-hidden');
                    $(elem.find('li')[2]).addClass('mui-hidden');
                    elem.find('.rollback').css('width', '280px');
                }


                elems = elem.find('*');
                elems.each(function(i, v) {
                    if (v.className.indexOf('ui-MPreview-') > -1) {
                        var key = v.className.replace('ui-MPreview-', '');
                        DOM[key] = $(v);
                    }
                });

                var h = parseInt(DOM.toolbar.css('height'), 10);
                DOM.wrap.css('width', screen.width + 'px');
                DOM.wrap.css('height', screen.height + 'px');
                DOM.view.css('height', (screen.height - h) + 'px');
                DOM.view.css('top', h + 'px');

                // 当前容器宽高
                this.offset = {
                    width: DOM.view.css('width'),
                    height: DOM.view.css('height')
                };
                this.DOM = DOM;
            });

            // 绑定返回事件
            this.subscribe('init', function() {
                var _this = this;
                this.DOM.back.on('touch', function(e) {
                    e.preventDefault();
                    _this.destroy();
                });
            });


            // 设置画笔事件
            this.subscribe('init', function() {
                var DOM = this.DOM,
                    _this = this;

                // 画笔事件
                $('#pen').on('touchend', function(e) {
                    e.preventDefault();
                    var $mark = $('[data-index="' + (_this.index - 1) + '"]'),
                        $elem = $(this),
                        $panel = $('#panel-wrap'),
                        $list = $('.rollback > ul > li > a'),
                        has = $elem.hasClass('current'),
                        isOpen = $panel.hasClass('current'),
                        mark = $mark.find('canvas')[0].mark;

                    $('#class-list-type').removeClass('show');
                    $('#class-add-list').removeClass('current');

                    if (has) {
                        // 已是选中状态 面板打开
                        $panel[isOpen ? 'removeClass' : 'addClass']('current');
                    } else {
                        // 设置画笔状态
                        $list.removeClass('current');
                        $elem.addClass('current');
                        if (mark) mark.setMethod('brush');
                    }

                    _this.penStyle.type = 'pen';
                    return this;
                });
            });

            // 设置橡皮擦
            this.subscribe('init', function() {
                var DOM = this.DOM,
                    _this = this;

                var method = {
                    clearAll: function(mark) {
                        plus.nativeUI.actionSheet({
                            cancel: "取消",
                            buttons: [{ title: '清除所有' }]
                        }, function(e) {
                            if (e.index === 1) {
                                mark.empty();
                                $('#eraser').removeClass('current');
                                $('#cancel').addClass('disabled');
                                $('#pen').addClass('current');
                                mark.setMethod('brush');
                                _this.penStyle.type = 'pen';

                                _this.config.markEmpty && _this.config.markEmpty.apply(this);
                            }
                        });
                    },
                    setEraser: function(mark) {
                        if (!mark) return;
                        mark.setMethod('eraser');
                        _this.penStyle.type = 'eraser';
                    }
                };

                $('#eraser').on('touchend', function(e) {
                    e.preventDefault();
                    var $mark = $('[data-index="' + (_this.index - 1) + '"]'),
                        $elem = $(this),
                        has = $elem.hasClass('current'),
                        $list = $('.rollback > ul > li > a'),
                        mark = $mark.find('canvas')[0].mark;

                    $('#class-list-type').removeClass('show');
                    $('#class-add-list').removeClass('current');
                    $list.removeClass('current');
                    $('#panel-wrap').removeClass('current');
                    $elem.addClass('current');

                    method[has ? 'clearAll' : 'setEraser'](mark);
                });

            });

            // 历史记录撤销
            this.subscribe('init', function() {
                var DOM = this.DOM,
                    _this = this;

                $('#cancel').on('touchstart', function(e) {
                    var has = $(this).hasClass('disabled');

                    $('#class-list-type').removeClass('show');
                    if (has) return;
                    $(this).addClass('current');
                });

                // 撤销事件
                $('#cancel').on('touchend', function(e) {
                    e.preventDefault();

                    var $elem = $(this),
                        $list = $('.rollback > ul > li > a'),
                        has = $(this).hasClass('disabled'),
                        $E = $('[data-index="' + (_this.index - 1) + '"]'),
                        mark = $E.find('canvas')[0].mark;

                    $list.removeClass('current');
                    $elem.removeClass('current');
                    $('#class-add-list').removeClass('current');
                    $('#class-list-type').removeClass('show');

                    $('#panel-wrap').removeClass('current');
                    $('#pen').addClass('current');

                    if (!has && mark) {
                        _this.config.markCancel && _this.config.markCancel.apply(this);
                        var len = mark.undo();
                        if (len === 0) $('#cancel').addClass('disabled');
                        mark.setMethod('brush');
                        mark.setLineWidth(_this.penStyle.line);
                        mark.setColor(_this.penStyle.color);
                    }

                    _this.penStyle.type = 'pen';

                });
            });

            // 设置画笔粗细
            this.subscribe('init', function() {
                var DOM = this.DOM,
                    _this = this;

                $('#pen-line').on('touchend', 'a', function(e) {
                    e.preventDefault();
                    var $elem = $(this),
                        $mark = $('[data-index="' + (_this.index - 1) + '"]'),
                        line = Number($elem.attr('class').replace('line-', '').replace('current', '')),
                        mark = $mark.find('canvas')[0].mark;

                    $('#class-add-list').removeClass('current');
                    $('#class-list-type').removeClass('show');

                    $('#pen-line > a').removeClass('current');
                    $elem.addClass('current');
                    $('#panel-wrap').removeClass('current');
                    $('#pen-line-text').text('0' + line);

                    if (mark) {
                        mark.setMethod('brush');
                        mark.setLineWidth(line);
                    }
                    _this.penStyle.line = line;
                    _this.penInfo.line = line;
                    window.localStorage["penInfo"] = JSON.stringify(_this.penInfo);
                });
            });

            // 设置画笔颜色
            this.subscribe('init', function() {
                var DOM = this.DOM,
                    _this = this;

                $('#color-list').on('touchend', 'a', function(e) {
                    e.preventDefault();

                    var $elem = $(this),
                        $mark = $('[data-index="' + (_this.index - 1) + '"]'),
                        color = $elem.find('span').css('background-color'),
                        mark = $mark.find('canvas')[0].mark;

                    $('#color-list > a').removeClass('current');
                    $('#panel-wrap').removeClass('current');
                    $('#class-add-list').removeClass('current');
                    $('#class-list-type').removeClass('show');

                    $elem.addClass('current');

                    $('#pen').css('color', color);
                    $('#pen-line span').css('background-color', color);

                    if (mark) {
                        mark.setMethod('brush');
                        mark.setColor(color);
                    }
                    _this.penStyle.color = color;
                    _this.penInfo.color = color;
                    window.localStorage["penInfo"] = JSON.stringify(_this.penInfo);
                });
            });

            // 旋转
            this.subscribe('init', function() {
                var DOM = this.DOM,
                    _this = this;

                $('#rotate').on('touchend', function(e) {
                    e.preventDefault();

                    _this.rotateAngle += 90;
                    _this.rotateAngle = _this.rotateAngle % 360;

                    var cx = _this.screen.width / 2,
                        cy = (_this.screen.height - 40) / 2;

                    var dx = cx - cx * Math.cos(_this.rotateAngle / 180 * Math.PI) + cy * Math.sin(_this.rotateAngle / 180 * Math.PI);
                    var dy = cy - cy * Math.cos(_this.rotateAngle / 180 * Math.PI) - cx * Math.sin(_this.rotateAngle / 180 * Math.PI);

                    $('.rotate-box').css('left', dx + 'px').css('top', dy + 'px').css('-webkit-transform-origin', '0% 0%').css('-webkit-transform', 'rotate(' + _this.rotateAngle + 'deg)');

                    if (_this.rotateAngle == 0 || _this.rotateAngle == 180) {
                        $('.canvas-box').css('left', '0px').css('top', '0px').css('-webkit-transform-origin', '0% 0%').css('-webkit-transform', 'scale(1)');
                    } else {
                        $('.canvas-box').css('left', _this.size[_this.index - 1].landscapeLeft + 'px').css('top', _this.size[_this.index - 1].landscapeTop + 'px').css('-webkit-transform-origin', '0% 0%').css('-webkit-transform', 'scale(' + _this.size[_this.index - 1].landscapeScale + ')');
                    }

                    _this.zoomRecord = 1;

                    var canvas = $('[data-index="' + (_this.index - 1) + '"]').find('canvas')[0];
                    var mark = canvas.mark;

                    //存储笔画的历史记录
                    _this.historyMark[_this.index] = mark.historyStroker;

                    mark.empty();

                    _this.createMark(canvas);

                    var cx = _this.screen.width　 * 　1 / 2,
                        cy = (_this.screen.height - 40) * 　1 / 2;

                    var dx = cx - cx * Math.cos(_this.rotateAngle / 180 * Math.PI) + cy * Math.sin(_this.rotateAngle / 180 * Math.PI);
                    var dy = cy - cy * Math.cos(_this.rotateAngle / 180 * Math.PI) - cx * Math.sin(_this.rotateAngle / 180 * Math.PI);

                    if (_this.rotateAngle == 0 || _this.rotateAngle == 180) {
                        mark.scaleAfterSet(1, 0, 0, 1, dx, dy, _this.rotateAngle);
                    } else {
                        mark.scaleAfterSet(1, _this.size[_this.index - 1].landscapeLeft, _this.size[_this.index - 1].landscapeTop, _this.size[_this.index - 1].landscapeScale, dx, dy, _this.rotateAngle);
                    }

                    // 获取画板历史记录重绘路径
                    if (_this.historyMark[_this.index] && _this.historyMark[_this.index] && canvas.mark) {
                        canvas.mark.historyStroker = _this.historyMark[_this.index];
                        canvas.mark.redraw();
                    }

                    if (_this.rotateAngle == 0 || _this.rotateAngle == 180) {
                        _this.config.rotate && _this.config.rotate.apply(_this, [_this.size[_this.index - 1].landscapeScale, _this.rotateAngle, 0, 0]);
                    } else {
                        _this.config.rotate && _this.config.rotate.apply(_this, [_this.size[_this.index - 1].landscapeScale, _this.rotateAngle, _this.size[_this.index - 1].landscapeLeft, _this.size[_this.index - 1].landscapeTop]);
                    }
                });
            });

            // 设置课堂互动
            this.subscribe('init', function() {
                var DOM = this.DOM,
                    _this = this;

                $('#classRoom').on('touchend', function() {
                    var $elem = $(this),
                        $list = $('.rollback > ul > li > a'),
                        has = $elem.hasClass('current');

                    $('#panel-wrap').removeClass('current');
                    $('#class-add-list').removeClass('current');

                    $list.removeClass('current');

                    //遮罩层的显示
                    $('.mask_layer').show();

                    $elem[has ? 'removeClass' : 'addClass']('current');
                    $('#class-list-type')[has ? 'removeClass' : 'addClass']('show');
                    if (has) $(_this.penStyle.type == 'pen' ? '#pen' : '#eraser').addClass('current');
                });

            });

            // 设置工具栏事件
            this.subscribe('init', function() {
                var DOM = this.DOM,
                    _this = this;
                $('#BBS').on('touchend', function(e) {

                    preview.pageindex = $('.ui-MPreview-currentPage').val();
                    var message = { "method": "showBBS" };
                    window.webkit.messageHandlers.interOp.postMessage(message);
                });
                $('#down').on('touchend', function(e) {
                    preview.pageindex = $('.ui-MPreview-currentPage').val();
                    var message = { "method": "down" };
                    window.webkit.messageHandlers.interOp.postMessage(message);
                });
                $('#class-add').on('touchend', function(e) {
                    // var $elem = $(this),
                    //     $list = $('.rollback > ul > li > a'),
                    //     $mark = $('[data-index="' + (_this.index - 1) + '"]'),
                    //     mark = $mark.find('canvas')[0].mark,
                    //     has = $('#class-add-list').hasClass('current');
                    // var callback = function() {
                    //     $http.post(app.teacherAPI.FaceActivity.getFaceActivityList, {
                    //         courseOpenId: _this.config.courseOpenId,
                    //         openClassId: _this.config.openClassId
                    //     }, function(data) {
                    //         if (data.code == 1) {
                    //             var html = template('ms-html-tpl', { list: data.dataList });
                    //             _this.config.msHtmltempl = html;
                    //             $('#mine-wrap').html(html);
                    //             mui('.mui-scroll-wrapper').scroll();
                    //         } else {
                    //             plus.nativeUI.toast(data.msg);
                    //         }

                    //     });
                    // }
                    // $('#mask_layer').show();
                    // $('#panel-wrap').removeClass('current');
                    // $('#class-list-type').removeClass('show');
                    // $list.removeClass('current');
                    // $('#class-add-list')[has ? 'removeClass' : 'addClass']('current');
                    // if (!_this.config.msHtmltempl) {
                    //     callback();
                    // }
                    // if (has) {
                    //     mark.setMethod('brush')
                    //     $('#pen').addClass('current');
                    //     $('#mask_layer').hide();
                    // }
                    preview.pageindex = $('.ui-MPreview-currentPage').val();
                    var message = { "method": "loadFaceTeache" };
                    window.webkit.messageHandlers.interOp.postMessage(message);
                });

                $('#class-add-list').on('touchend', '.icon-close', function() {
                    $('#pen').addClass('current');
                    $('#class-add-list').removeClass('current');
                    $('#mask_layer').hide();
                });

                // 空白板
                $('#create-whiteboard').on('touchend', function() {
                    $('#class-add-list').removeClass('current');
                    $('#mask_layer').hide();
                    _this.config.whiteboard && _this.config.whiteboard.apply(_this);
                });

                // 选取照片
                $('#create-select-photo').on('touchend', function() {
                    $('#class-add-list').removeClass('current');
                    $('#mask_layer').hide();
                    _this.config.selectPhoto && _this.config.selectPhoto.apply(_this);
                });

                // 拍摄照片
                $('#create-camera').on('touchend', function() {
                    $('#class-add-list').removeClass('current');
                    $('#mask_layer').hide();
                    _this.config.camera && _this.config.camera.apply(_this);
                });

                // 从课件选取
                $('#select-ware').on('touchend', function() {
                    $('#class-add-list').removeClass('current');
                    $('#mask_layer').hide();
                    _this.config.selectWare && _this.config.selectWare.apply(_this);
                });
            });

            // 加载图片，并对应设置Key
            this.subscribe('load', function(val, key, callback) {
                var _this = this,
                    load = function(size) {
                        if (!_this.size[key]) _this.size[key] = size;
                        callback && callback.call(_this, size, key);
                        setTimeout(function() {
                            _this.DOM.loading.addClass('ui-MPreview-hide');
                        }, 100);
                    };
                $.each(val, function(i, v) {
                    _this.DOM.loading.removeClass('ui-MPreview-hide');
                    var img = new Image();
                    img.src = v;
                    if (img.complete) {
                        load({ width: img.width, height: img.height });
                    } else {
                        img.onload = function() {
                            load({ width: img.width, height: img.height });
                            img.onload = null;
                        };
                    }
                });
            });

            // Ajax 请求
            this.subscribe('ajax', function() {
                if (!this.config.data && !this.config.url) return;

                var _this = this,
                    callback = function(data) {
                        this.data = data.imgs;
                        this.publish('load', [data.imgs[0]], 0, function(size, key) {
                            this.publish('append', size, key)
                                .publish('setPage');
                        });
                    };

                // 判断是否为自己添加数据
                if (this.config.data && this.config.data.length) {
                    callback.call(this, { imgs: this.config.data });
                    return;
                }

                // 无自己数据则发送Ajax请求
                $.ajax({
                    url: this.config.url,
                    data: this.config.params,
                    dataType: 'json',
                    success: function(data) {
                        if (data.code > 0 && data.imgs && data.imgs.length) {
                            callback.call(_this, data);
                        }
                    },
                    error: function() {
                        alert('获取数据失败');
                    }
                });
            });

            // 创建分页值
            this.subscribe('append', function() {

                // 设置页数
                var options = '',
                    temp = '<option value="{{val}}">{{val}}</option>';
                for (var i = 0; i < this.data.length; i++) {
                    options += temp.replace(/{{val}}/g, formatPage(i + 1));
                }

                this.DOM.currentPage.html(options);
            });

            // 创建数据DOM
            this.subscribe('append', function(size, key) {
                var temp = '',
                    DOM = this.DOM,
                    tpl = '<li data-index="{{index}}" style="width: ' + this.offset.width + '; height: ' + this.offset.height + ';"><div class="rotate-box" style="overflow: visible;"><div class="canvas-box" style="position: absolute;"><img src="{{src}}" style="width: {{width}}; height: {{height}}; position: absolute; left: {{left}}; top: {{top}}" /></div></div><canvas width="{{width1}}" height="{{height1}}"></canvas></li>',
                    len = this.data.length > 2 ? 3 : this.data.length,
                    landscapeScale;

                size = this.scale(size);

                var src = this.data[key] ? this.data[key] : this.config.placeholder,
                    w = size.width + 'px',
                    h = size.height + 'px',
                    w1 = size.width,
                    h1 = size.height,
                    top = 0,
                    left = 0;

                if (this.screen.width > size.width) {
                    left = Math.floor((this.screen.width - size.width) / 2);
                }

                if (this.screen.height - 40 > size.height) {
                    top = Math.floor((this.screen.height - 40 - size.height) / 2);
                }

                if (size.height / size.width > this.screen.width / (this.screen.height - 40)) {
                    landscapeScale = this.screen.width / size.height;
                } else {
                    landscapeScale = (this.screen.height - 40) / size.width;
                }

                var landscapeLeft = this.screen.width * (1 - landscapeScale) / 2;
                var landscapeTop = (this.screen.height - 40) * (1 - landscapeScale) / 2;

                size.landscapeScale = landscapeScale;
                size.landscapeLeft = landscapeLeft;
                size.landscapeTop = landscapeTop;

                //替换图片的初始大小（即在当前页面显示的大小）
                this.size[key] = size;

                temp += tpl.replace('{{index}}', key)
                    .replace('{{src}}', src)
                    .replace('{{width}}', w)
                    .replace('{{height}}', h)
                    .replace('{{width1}}', parseInt(this.offset.width, 10))
                    .replace('{{height1}}', parseInt(this.offset.height, 10))
                    .replace('{{top}}', top + 'px')
                    .replace('{{left}}', left + 'px');

                DOM.imglist.html(temp);
                DOM.imglist.css(this.config.direction ? 'width' : 'height', parseInt(this.offset[this.config.direction ? 'width' : 'height'], 10) * len + 'px');
                DOM.imglist.css('transform-origin', '50% 50% 0px');
                DOM.imgbox.addClass('ui-MPreview-show');
                DOM.loading.addClass('ui-MPreview-hide');

                //创建画板
                var canvas = DOM.imglist.find('canvas')[0];
                this.createMark(canvas);

                //mark = canvas.mark;
                // 获取画板历史记录重绘路径
                if (this.historyMark[this.index] && this.historyMark[this.index] && canvas.mark) {
                    canvas.mark.historyStroker = this.historyMark[this.index];
                    canvas.mark.redraw();
                }
            });

            //设置总分页值
            this.subscribe('append', function() {
                this.DOM.countPage.text(formatPage(this.data.length));
            });

            // 显示上一页，下一页按钮
            this.subscribe('append', function() {
                var DOM = this.DOM;
                DOM.arrowLeft.css('display', this.index === 1 ? 'none' : 'block');
                DOM.arrowRight.css('display', this.index === this.data.length ? 'none' : 'block');
            });

            // 设置分页值
            this.subscribe('setPage', function() {
                this.DOM.currentPage[0].value = formatPage(this.index);
            });

            // 预加载
            this.subscribe('preloading', function(val, callback) {
                var li = document.createElement('li'),
                    _this = this,
                    DOM = this.DOM,
                    index = val == 'next' ? (this.index + 1) : (this.index - 1),
                    append = function(elem, src, key) {
                        _this.publish('load', [src], key, function(size) {
                            size = _this.scale(size);
                            elem.html('<div><img src="' + src + '" style="width: ' + size.width + 'px; height: ' + size.height + 'px;position:absolute;" /></div><canvas width="' + parseInt(this.offset.width, 10) + '" height="' + parseInt(this.offset.width, 10) + '"></canvas>');

                            // 创建画板
                            var canvas = elem.find('canvas')[0];
                            _this.createMark(canvas);

                            // 获取画板历史记录重绘路径
                            if (_this.historyMark[key + 1] && canvas.mark) {
                                canvas.mark.historyStroker = _this.historyMark[key + 1];
                                canvas.mark.redraw();
                            }

                            // 执行回调
                            callback && callback();
                        });
                    };

                // 检测是否预加载到达最小值或最大值
                index--;
                li.style.width = _this.offset.width;
                li.style.height = _this.offset.height;

                if (index < 0 || index > (this.data.length - 1)) return;
                if (val == 'prev' && this.index == (this.data.length - 1)) return;

                // 为第一页所预加载只重构 img;
                if (val == 'next' && _this.index < 3) {
                    append($(DOM.imglist.find('li').get(_this.index)), this.data[index], index);
                    return;
                }

                // 图片预加载处理
                li.setAttribute('data-index', index);
                DOM.imglist.find('li')[val == 'next' ? 'first' : 'last']().remove();
                DOM.imglist[val == 'next' ? 'append' : 'prepend'](li);
                append($(li), this.data[index], index);
            });

            // 设置滑动操作
            this.subscribe('touchStyle', function(duration, x, y, timing) {
                var DOM = this.DOM.imglist;
                duration = duration || 0;
                x = x || 0;
                y = y || 0;
                DOM.css('transition', '-webkit-transform ' + duration + 'ms ' + timing + ' 0s');
                DOM.css('transform', 'translate3d(' + x + 'px, ' + y + 'px, 0px)');
            });

            // 屏幕滚动
            this.subscribe('touch', function() {
                var direction, has,
                    _this = this,
                    w = parseInt(_this.offset.width, 10),
                    h = parseInt(_this.offset.height, 10),
                    DOM = this.DOM,
                    callback = function() {
                        _this.isScroll = false;
                        _this.isExec = false;

                        if (has) {
                            _this.publish('preloading', direction ? 'next' : 'prev');
                            var diff = ((_this.index - 1) * (_this.config.direction ? w : h)) - (_this.config.direction ? w : h),
                                $mark = $('[data-index="' + (_this.index - 1) + '"]'),
                                MARK;

                            if ($mark.length) {
                                if ($mark.find('canvas').length) {
                                    MARK = $mark.find('canvas')[0].mark;
                                }
                            }

                            if (_this.index == 1) diff = 0;
                            if (_this.index == _this.data.length) diff = diff - (_this.config.direction ? w : h);
                            DOM.imglist.css(_this.config.direction ? 'left' : 'top', diff < 0 ? '0px' : diff + 'px');

                            if (MARK) {
                                MARK.setMethod('brush');
                                MARK.setLineWidth(_this.penStyle.line);
                                MARK.setColor(_this.penStyle.color);

                                var $elem = $('#pen'),
                                    $panel = $('#panel-wrap'),
                                    $list = $('.rollback > ul > li > a');

                                $list.removeClass('current');
                                $elem.addClass('current');
                                $('#class-list-type').removeClass('show');
                                $('#class-add-list').removeClass('current');

                                _this.penStyle.type = 'pen';
                                $('#cancel')[MARK.historyStroker.length ? 'removeClass' : 'addClass']('disabled');
                            }
                        }
                    };

                var action = function(e, val) {
                    e.preventDefault();

                    //隐藏上一张图片 显示加载框
                    DOM.imgbox.removeClass('ui-MPreview-show')
                    DOM.loading.removeClass('ui-MPreview-hide');

                    if (val) {
                        if (_this.index === _this.data.length) return;
                    } else {
                        if ((_this.index - 1) === 0) return;
                    }

                    // 存放画笔历史记录
                    var $mark = $('[data-index="' + (_this.index - 1) + '"]'),
                        MARK = $mark.find('canvas')[0].mark;

                    if (MARK) {
                        _this.historyMark[_this.index] = MARK.historyStroker;
                    }

                    _this.isScale = false;
                    has = true;

                    if (val) {
                        direction = true;
                        _this.index++
                    } else {
                        direction = false;
                        _this.index--;
                    }

                    if (_this.index > _this.data.length) _this.index = _this.data.length;
                    if (_this.index < 1) _this.index = 1;

                    _this.publish('load', [_this.data[_this.index - 1]], _this.index - 1, function(size, key) {
                        _this.publish('append', size, key).publish('setPage');
                    });

                    // 下一页，下一页按钮隐藏
                    DOM.arrowLeft.css('display', _this.index === 1 ? 'none' : 'block');
                    DOM.arrowRight.css('display', _this.index === _this.data.length ? 'none' : 'block');

                    // 上一页下一页操作
                    _this.config.page && _this.config.page.apply(_this, [_this.index]);

                    // 处理已放大图片恢复默认
                    var $elem = DOM.imglist.find('img');
                    $elem.css('transform-origin', '50% 50% 0px');
                    $elem.css('transition', '-webkit-transform 0ms ease-out 0s');
                    $elem.css('transform', 'scale3d(1, 1, 1)');
                };

                // 上一页按钮，
                DOM.arrowLeft.off('touchend').on('touchend', function(e) {
                    var $ele = $(this);
                    $ele.css('background-color', '#4D5757');

                    setTimeout(function() {
                        action(e, false);
                        $ele.css('background-color', '#808886');
                    }, 100);
                });

                //下一页按钮
                DOM.arrowRight.off('touchend').on('touchend', function(e) {
                    var $ele = $(this);
                    $ele.css('background-color', '#4D5757');

                    setTimeout(function() {
                        action(e, true);
                        $ele.css('background-color', '#808886');
                    }, 100);
                });

            });

            // 卸载图片滚动
            this.subscribe('untouch', function() {
                var DOM = this.DOM;
                DOM.imgbox.off('touchstart');
                DOM.imgbox.off(transition);
            });

            // 图片放大事件
            this.subscribe('zoom', function() {
                var DOM = this.DOM,
                    _this = this;

                // 缩放 缩小结束
                DOM.imglist.on('pinchIn', 'li', function(e) {
                    var $li = $('[data-index="' + (_this.index - 1) + '"]'),
                        $img = $li.find('img'),
                        $div = $li.find('.canvas-box');

                    e.preventDefault();

                    if (_this.isScroll) return;

                    _this.zoomRecord = _this.zoomRecordTemp;
                    _this.isScaling = false;

                    //图片缩小后 发送放大指令
                    _this.config.scale && _this.config.scale.apply(_this, [_this.zoomRecord, parseInt($div.css('left'), 10), parseInt($div.css('top'), 10)]);

                    var canvas = $('[data-index="' + (_this.index - 1) + '"]').find('canvas')[0],
                        mark = canvas.mark;

                    var scapeScale = 1;
                    if (_this.rotateAngle == 90 || _this.rotateAngle == 270) {
                        scapeScale = _this.size[_this.index - 1].landscapeScale;
                    }

                    var cx = _this.screen.width　 * 　_this.zoomRecord / 2,
                        cy = (_this.screen.height - 40) * 　_this.zoomRecord / 2;

                    var dx = cx - cx * Math.cos(_this.rotateAngle / 180 * Math.PI) + cy * Math.sin(_this.rotateAngle / 180 * Math.PI);
                    var dy = cy - cy * Math.cos(_this.rotateAngle / 180 * Math.PI) - cx * Math.sin(_this.rotateAngle / 180 * Math.PI);

                    mark.scaleAfterSet(_this.zoomRecord, parseInt($div.css('left'), 10), parseInt($div.css('top'), 10), scapeScale, dx, dy, _this.rotateAngle);
                });

                // 缩放中
                DOM.imglist.on('pinching', 'li', function(e) {
                    e.preventDefault();
                    if (_this.isScroll) return;
                    _this.publish('zoomInertia', e);
                });

                //缩放放大结束
                DOM.imglist.on('pinchOut', 'li', function(e) {
                    var $li = $('[data-index="' + (_this.index - 1) + '"]'),
                        $img = $li.find('img'),
                        $div = $li.find('.canvas-box');

                    e.preventDefault();

                    if (_this.isScroll) return;

                    _this.zoomRecord = _this.zoomRecordTemp;
                    _this.isScaling = false;

                    //图片放大后 发送放大指令
                    _this.config.scale && _this.config.scale.apply(_this, [_this.zoomRecord, parseInt($div.css('left'), 10), parseInt($div.css('top'), 10)]);

                    var canvas = $('[data-index="' + (_this.index - 1) + '"]').find('canvas')[0],
                        mark = canvas.mark;

                    var scapeScale = 1;
                    if (_this.rotateAngle == 90 || _this.rotateAngle == 270) {
                        scapeScale = _this.size[_this.index - 1].landscapeScale;
                    }

                    var cx = _this.screen.width　 * 　_this.zoomRecord / 2,
                        cy = (_this.screen.height - 40) * 　_this.zoomRecord / 2;

                    var dx = cx - cx * Math.cos(_this.rotateAngle / 180 * Math.PI) + cy * Math.sin(_this.rotateAngle / 180 * Math.PI);
                    var dy = cy - cy * Math.cos(_this.rotateAngle / 180 * Math.PI) - cx * Math.sin(_this.rotateAngle / 180 * Math.PI);

                    mark.scaleAfterSet(_this.zoomRecord, parseInt($div.css('left'), 10), parseInt($div.css('top'), 10), scapeScale, dx, dy, _this.rotateAngle);
                });

                //判断是否完成缩放结束，即两手指离开屏幕
                DOM.imglist.on('touchend', 'li', function(e) {
                    if (!e.touches.length && !_this.isScale && _this.isZoom) {
                        _this.isZoom = false;
                        _this.isExec = false;
                        // 修正因直接绑定而导致重复触发 touchend 事件
                        setTimeout(function() {
                            _this.publish('touch');
                        }, 10);
                    }
                });

            });

            // 图片缩放中
            this.subscribe('zoomInertia', function(e) {
                e.preventDefault();

                var scale, nScale,
                    $elem = $(e.target), //img对象
                    left = 0, //图片的距离顶部的位置
                    top = 0,
                    scaleTopY = 0,
                    scaleLeftX = 0, //图片距离左边缘的位置
                    pointX, pointY, nPointX, nPointY, nMiddlePoint, middlePoint,
                    isMove = false, //是否为平移图片
                    $li = $('[data-index="' + (this.index - 1) + '"]'),
                    $div = $li.find('.canvas-box'),
                    canvas = $li.find('canvas')[0],
                    mark = canvas.mark;

                if (!this.isScaling) {
                    this.isScaling = true;

                    //缩放之前的图片的left 与 top 值
                    this.scalingLeft = parseInt($div.css('left'), 10) || 0;
                    this.scalingTop = parseInt($div.css('top'), 10) || 0;

                    //图片缩放的起始位置
                    this.startPoints = e.touch.touches;

                    //存储笔画的历史记录
                    this.historyMark[this.index] = mark.historyStroker;
                }

                //获取两点之间的位置
                var getPointsDistance = function(point1, point2) {
                    var x = point1.x - point2.x;
                    var y = point1.y - point2.y;

                    return Math.sqrt(x * x + y * y);
                };

                //缩放的起始位置的以及中点
                pointX = (this.startPoints[0].x + this.startPoints[1].x) / 2;
                pointY = (this.startPoints[0].y + this.startPoints[1].y) / 2;
                middlePoint = { x: pointX, y: pointY };

                //缩放后的位置以及中点
                nPointX = (e.touch.touches[0].x + e.touch.touches[1].x) / 2;
                nPointY = (e.touch.touches[0].y + e.touch.touches[1].y) / 2;
                nMiddlePoint = { x: nPointX, y: nPointY };

                var d1 = getPointsDistance(this.startPoints[0], this.startPoints[1]);
                var d2 = getPointsDistance(e.touch.touches[0], e.touch.touches[1]);

                if (d1 + 3 > d2 && d1 - 3 < d2) {
                    scale = 1;
                    isMove = true
                } else {
                    scale = d2 / d1;
                }

                //放大后的倍数
                nScale = this.zoomRecord * scale;

                if (nScale > 1) {
                    var cx = nPointX - pointX * scale;
                    var cy = nPointY - pointY * scale;

                    var dx = cx * Math.cos(this.rotateAngle * Math.PI / 180) + cy * Math.sin(this.rotateAngle * Math.PI / 180);
                    var dy = cy * Math.cos(this.rotateAngle * Math.PI / 180) - cx * Math.sin(this.rotateAngle * Math.PI / 180);

                    scaleLeftX = this.scalingLeft * scale + dx;
                    scaleTopY = this.scalingTop * scale + dy;
                } else {
                    nScale = 1;
                    this.zoomRecord = 1;

                    if (this.rotateAngle == 0 || this.rotateAngle == 180) {
                        scaleLeftX = 0;
                        scaleTopY = 0;
                    } else {
                        scaleLeftX = this.size[this.index - 1].landscapeLeft;
                        scaleTopY = this.size[this.index - 1].landscapeTop;
                    }
                }

                //记录放大后的总的倍数
                this.zoomRecordTemp = nScale;

                //清空之前的笔画
                mark.empty();

                $div.css('transition', '-webkit-transform 0ms ease 0s');
                $div.css('transform-origin', 'left top');

                var scapeScale = 1;
                if (this.rotateAngle == 0 || this.rotateAngle == 180) {
                    $div.css('transform', 'scale(' + nScale + ')');
                } else {
                    scapeScale = this.size[this.index - 1].landscapeScale;
                    $div.css('transform', 'scale(' + nScale * scapeScale + ')');
                }

                var cx = this.screen.width　 * 　nScale / 2,
                    cy = (this.screen.height - 40) * 　nScale / 2;

                var dx = cx - cx * Math.cos(this.rotateAngle / 180 * Math.PI) + cy * Math.sin(this.rotateAngle / 180 * Math.PI);
                var dy = cy - cy * Math.cos(this.rotateAngle / 180 * Math.PI) - cx * Math.sin(this.rotateAngle / 180 * Math.PI);

                $('.rotate-box').css('left', dx + 'px').css('top', dy + 'px');

                this.createMark(canvas);

                $div.css('left', scaleLeftX + 'px');
                $div.css('top', scaleTopY + 'px');

                mark.scaleAfterSet(nScale, scaleLeftX, scaleTopY, scapeScale, dx, dy, this.rotateAngle);

                // 获取画板历史记录重绘路径
                if (this.historyMark[this.index] && this.historyMark[this.index] && canvas.mark) {
                    canvas.mark.historyStroker = this.historyMark[this.index];
                    canvas.mark.redraw();
                }

                //如果为平移图片的话 单独发送同屏的指令
                if (isMove) {
                    this.config.scale && this.config.scale.apply(this, [nScale, parseInt($div.css('left'), 10), parseInt($div.css('top'), 10)]);
                }
            });

            //            // Resize
            //            this.subscribe('resize', function() {
            //                var c, DOM = this.DOM,
            //                    _this = this;
            //
            //                var resize = function() {
            //                    _this.screen = {
            //                        width: window.innerWidth,
            //                        height: window.innerHeight
            //                    };
            //                    _this.isExec = false;
            //                    _this.isZoom = false;
            //                    _this.isScroll = false;
            //                    _this.isScale = false;
            //
            //                    var h = parseInt(DOM.toolbar.css('height'), 10),
            //                        width = _this.screen.width,
            //                        height = _this.screen.height,
            //                        he = height - h,
            //                        diff = ((_this.index - 1) * (_this.config.direction ? width : he)) - (_this.config.direction ? width : he),
            //                        scroll = -(_this.index - 1) * (_this.config.direction ? width : he);
            //
            //                    if (_this.index == 1) diff = 0;
            //                    if (_this.index == _this.data.length) diff = diff - (_this.config.direction ? width : he);
            //
            //                    _this.offset = {
            //                        width: width + 'px',
            //                        height: he + 'px'
            //                    };
            //
            //                    DOM.wrap[0].style.cssText = 'width: ' + width + 'px; height: ' + height + 'px;';
            //                    DOM.view[0].style.cssText = 'top: ' + h + 'px; height: ' + he + 'px;';
            //                    DOM.imglist.find('li').each(function(i, elem) {
            //                        var $img = $(elem).find('img'),
            //                            index = parseInt($(elem).attr('data-index'), 10),
            //                            size = _this.size[index] && _this.scale(_this.size[index]);
            //
            //                        elem.style.cssText = 'width:' + _this.offset.width + '; height: ' + _this.offset.height +';';
            //                        size && ($img[0].style.cssText = 'width: ' + size.width + 'px; height: ' + size.height + 'px;');
            //                        $img.css('transform-origin', '50% 50% 0px');
            //                        $img.css('transition', '-webkit-transform 0ms ease 0s');
            //                        $img.css('transform', 'scale3d(1, 1, 1) translate3d(0px, 0px, 0px);');
            //                        $img.off('touchstart');
            //                        $img.off('touchmove');
            //                    });
            //                    DOM.imglist.css(_this.config.direction ? 'left' : 'top', diff < 0 ? '0px' : diff + 'px');
            //                    DOM.imglist.css(_this.config.direction ? 'width' : 'height', (_this.config.direction ? width : he) * (_this.data.length > 2 ? 3 : _this.data.length) + 'px');
            //
            //                    // 重新绑定滚动翻页事件
            //                    if (_this.config.direction) {
            //                        _this.publish('touchStyle', 0, scroll, 0, 'ease');
            //                    } else {
            //                        _this.publish('touchStyle', 0, 0, scroll, 'ease');
            //                    }
            //                    _this.publish('untouch').publish('touch');
            //                };
            //
            //                //横屏，竖屏切换
            ////                $(window).on(_this.resizeType, function() {
            ////                    clearTimeout(c);
            ////                    c = setTimeout(resize, 300);
            ////                });
            //
            //            });

            return this;
        }
    };

    MPreview.fn.init.prototype = MPreview.fn;

    // 扩展至全局
    win.MPreview = MPreview;

}(window, Zepto));