/**
 * app Core/Users/zqy/Desktop/66IOs/student/66ykt.student/src/Pandora/apps
 * @param {Object} $M => mui
 * @name  M.J
 * @date  2015-09-22
 * @return app {Object}
 */
(function($M, $) {
    // var host = 'http://www.66ykt.com/mobileAPI/',
    //     API = 'http://www.66ykt.com/mobileAPI/',
    var host = 'http://zjy2.icve.com.cn/newMobileAPI/',
        API = 'http://zjy2.icve.com.cn/newMobileAPI/',
        // var host = 'http://zjy2.icve.com.cn/newMobileAPI/',
        //     API = 'http://zjy2.icve.com.cn/newMobileAPI/',
        mooc = "http://mooc.icve.com.cn/mobile/",
        getpass = 'https://www.iclassx.com/users/getpwd-',
        win = window,

        app = {};
    //studentAPI, teacherAPI;
    app.mooc = {
            workexam: {
                onlineHomeworkCheckSpace: mooc + 'workexam/onlineHomeworkCheckSpace',
                onlineHomeworkSubAnswer: mooc + 'workexam/onlineHomeworkSubAnswer',
                onlineHomeworkAnswer: mooc + 'workexam/onlineHomeworkAnswer',
                onlineHomeworkMatch: mooc + 'workexam/onlineHomeworkMatch'
            }
        },
        app.studentAPI = {
            userInfo: {
                update: host + 'login/isLogin',
                viewM: {},
            },
            Student: {
                getCourseList: host + 'Student/getCourseList',
                getAnnouncementList: host + 'Student/getAnnouncementList',
                savePlayLog: host + 'Student/savePlayLog',
                stuJoinOpenClassByScan: host + 'Student/stuJoinOpenClassByScan'
            },
            Homework: {
                getHomeworkList: host + 'Homework/getHomeworkList',
                getHomeworkPreview: host + 'Homework/getHomeworkPreview',
                getStuHomeworkPreview: host + 'Homework/getStuHomeworkPreview',
                stuSaveHomeworkQuestion: host + 'Homework/stuSaveHomeworkQuestion',
                stuSubmitHomework: host + 'Homework/stuSubmitHomework',
                getHomeworkStuRecord: host + 'Homework/getHomeworkStuRecord',
                getFileHomeworkUrlById: host + 'Homework/getFileHomeworkUrlById',
                stuSubmitFileHomework: host + 'Homework/stuSubmitFileHomework',
                getStuFileHomeworkPreview: host + 'Homework/getStuFileHomeworkPreview',
                getUnDoQuestionCount: host + 'Homework/getUnDoQuestionCount'
            },
            OnlineExam: {
                getExamList: API + 'OnlineExam/getExamList',
                getReadStuList: API + 'OnlineExam/getReadStuList',
                getUnSubmitStuList: API + 'OnlineExam/getUnSubmitStuList',
                getExamPreview: API + 'OnlineExam/getExamPreview',
                getStuExamPreview: API + 'OnlineExam/getStuExamPreview',
                stuSaveExamQuestion: API + 'OnlineExam/stuSaveExamQuestion',
                stuSubmitExam: API + 'OnlineExam/stuSubmitExam',
                getUnDoQuestionCount: API + 'OnlineExam/getUnDoQuestionCount'
            },
            AssistTeacher: {
                getModuleListByClassId: API + 'AssistTeacher/getModuleListByClassId',
                getTopicListByModuleId: API + 'AssistTeacher/getTopicListByModuleId',
                canOpenCell: API + 'AssistTeacher/canOpenCell',
                getImgTextUrl: API + 'AssistTeacher/getImgTextUrl',
                getCourseNavigation: API + 'AssistTeacher/getCourseNavigation',
                getStuScore: API + 'AssistTeacher/getStuScore',
                getCellListByTopicId: API + 'AssistTeacher/getCellListByTopicId',
                getCellInfoByCellId: API + 'AssistTeacher/getCellInfoByCellId',
                getStuScoreDetail: API + 'AssistTeacher/getStuScoreDetail'
            },
            login: {
                persionInfo: host + 'login/persionInfo'
            },
            MobileLogin: {
                inviteRegister: host + 'MobileLogin/inviteRegister',
                editPassword: host + 'MobileLogin/editPassword',
                editUserInfo: host + 'MobileLogin/editUserInfo',
                getUserInfo: host + 'MobileLogin/getUserInfo',
                validateUserInfo: API + 'MobileLogin/validateUserInfo',
                resetPassword: API + 'MobileLogin/resetPassword',
                saveUserLog: API + 'MobileLogin/saveUserLog'
            },
            GroupTask: {
                getStuGroupTaskList: host + 'GroupTask/getStuGroupTaskList',
                getGroupTaskRecord: host + 'GroupTask/getGroupTaskRecord',
                getGroupTaskPreview: host + 'GroupTask/getGroupTaskPreview',
                getGroupTaskUrlById: host + 'GroupTask/getGroupTaskUrlById',
                saveGroupTask: host + 'GroupTask/saveGroupTask',
                getStuGroupTaskPreview: host + 'GroupTask/getStuGroupTaskPreview'
            },
            WrongQuestion: {
                getWrongQuestionList: host + 'WrongQuestion/getWrongQuestionList',
                getKnowledgeList: host + 'WrongQuestion/getKnowledgeList',
                getQuestionInfo: host + 'WrongQuestion/getQuestionInfo',
                getStuWrongQuestionList: host + 'WrongQuestion/getStuWrongQuestionList'
            },
        };

    app.teacherAPI = {
        //  socket: 'http://106.15.46.28:10032',
        socket: 'http://socket.icve.com.cn:6001',
        //socket: 'http://114.55.178.50:10032',
        //socket: 'http://10.4.30.240:10032',
        login: {
            feedback: API + 'login/saveFeedBack'
        },
        AssistTeacher: {
            myAssistClassList: API + 'AssistTeacher/myAssistClassList',
            getCourseList: API + 'AssistTeacher/getCourseList',
            getClassMemberList: API + 'AssistTeacher/getClassMemberList',
            getCourseData: API + 'AssistTeacher/getCourseData',
            getUnStudyStuList: API + 'AssistTeacher/getUnStudyStuList',
            getPrivew: API + 'AssistTeacher/getPrivew',
            getModuleListByClassId: API + 'AssistTeacher/getModuleListByClassId',
            getTopicListByModuleId: API + 'AssistTeacher/getTopicListByModuleId',
            getCellListByTopicId: API + 'AssistTeacher/getCellListByTopicId',
            getStuOrTeaColleagueList: API + 'AssistTeacher/getStuOrTeaColleagueList',
            approvalStuOrColleague: API + 'AssistTeacher/approvalStuOrColleague',
            getImgTextUrl: API + 'AssistTeacher/getImgTextUrl',
            getCourseNavigation: API + 'AssistTeacher/getCourseNavigation',
            getClassStuScoreList: API + 'AssistTeacher/getClassStuScoreList',
            getStuScore: API + 'AssistTeacher/getStuScore',
            getStuScoreDetail: API + 'AssistTeacher/getStuScoreDetail',
            getCellInfoByCellId: API + 'AssistTeacher/getCellInfoByCellId'
        },
        DesignTeacher: {
            getCourseList: API + 'DesignTeacher/getCourseList',
            getOpenClassList: API + 'DesignTeacher/getOpenClassList',
            getTermList: API + 'DesignTeacher/getTermList',
            saveOpenClassInfo: API + 'DesignTeacher/saveOpenClassInfo',
            getSchoolTeacherList: API + 'DesignTeacher/getSchoolTeacherList',
            getOpenClassInfo: API + 'DesignTeacher/getOpenClassInfo',
            deleteOpenClass: API + 'DesignTeacher/deleteOpenClass',
            getSchoolList: API + 'DesignTeacher/getSchoolList'
        },
        FaceTeach: {
            getFaceActivityList: API + 'FaceTeach/getFaceActivityList',
            getFaceCourseList: API + 'FaceTeach/getFaceCourseList',
            getFaceCourseClassList: API + 'FaceTeach/getFaceCourseClassList',
            addFaceTeach: API + 'FaceTeach/addFaceTeach',
            getFaceActivityInfo: API + 'FaceTeach/getFaceActivityInfo',
            getFaceListByOpenClassId: API + 'FaceTeach/getFaceListByOpenClassId',
            getDiscussList: API + 'FaceTeach/getDiscussList',
            getDiscussReply: API + 'FaceTeach/getDiscussReply',
            getDiscussReplyList: API + 'FaceTeach/getDiscussReplyList',
            getBrainStormList: API + 'FaceTeach/getBrainStormList',
            getAskList: API + 'FaceTeach/getAskList',
            getCheckList: API + 'FaceTeach/getCheckList',
            getCheckStuInfo: API + 'FaceTeach/getCheckStuInfo',
            getClassTestList: API + 'FaceTeach/getClassTestList',
            getAllAskStuList: API + 'FaceTeach/getAllAskStuList',
            getAskStuList: API + 'FaceTeach/getAskStuList',
            getUnJoinStuList: API + 'FaceTeach/getUnJoinStuList',
            getBrainStromStuInfo: API + 'FaceTeach/getBrainStromStuInfo',
            getStuAskedList: API + 'FaceTeach/getStuAskedList',
            getDiscussInfo: API + 'FaceTeach/getDiscussInfo',
            addSign: API + 'FaceTeach/addSign',
            signStatis: API + 'FaceTeach/signStatis',
            addDiscuss: API + 'FaceTeach/addDiscuss',
            addDiscussReply: API + 'FaceTeach/addDiscussReply',
            addBrainStorm: API + 'FaceTeach/addBrainStorm',
            addAsk: API + 'FaceTeach/addAsk',
            addQuiz: API + 'FaceTeach/addQuiz',
            saveQuizStu: API + 'FaceTeach/saveQuizStu',
            addAnswerAsk: API + 'FaceTeach/addAnswerAsk',
            addFaceTeach: API + 'FaceTeach/addFaceTeach',
            delBrainStorm: API + 'FaceTeach/delBrainStorm',
            delDiscuss: API + 'FaceTeach/delDiscuss',
            delDiscussReply: API + 'FaceTeach/delDiscussReply',
            saveStuDiscussScore: API + 'FaceTeach/saveStuDiscussScore',
            delQuiz: API + 'FaceTeach/delQuiz',
            delSign: API + 'FaceTeach/delSign',
            delBrainStorm: API + 'FaceTeach/delBrainStorm',
            saveStuStormScore: API + 'FaceTeach/saveStuStormScore',
            closeBrainStorm: API + 'FaceTeach/closeBrainStorm',
            closeSign: API + 'FaceTeach/closeSign',
            overDiscuss: API + 'FaceTeach/overDiscuss',
            overAsk: API + 'FaceTeach/overAsk',
            saveStuAskScore: API + 'FaceTeach/saveStuAskScore',
            saveStormStuScore: API + 'FaceTeach/saveStormStuScore',
            savePerformanceScore: API + 'FaceTeach/savePerformanceScore',
            changeSignType: API + 'FaceTeach/changeSignType',
            getClassTestList: API + 'FaceTeach/getClassTestList',
            getCourseFixedQuestionList: API + 'FaceTeach/getCourseFixedQuestionList',
            addClassTest: API + 'FaceTeach/addClassTest',
            getClassTestStuList: API + 'FaceTeach/getClassTestStuList',
            getClassTestData: API + 'FaceTeach/getClassTestData',
            saveClassTestStuQuestionAnswer: API + 'FaceTeach/saveClassTestStuQuestionAnswer',
            updateTestStuQues: API + 'FaceTeach/updateTestStuQues',
            saveStuClassTest: API + 'FaceTeach/saveStuClassTest',
            getStuAnswerList: API + 'FaceTeach/getStuAnswerList',
            getFaceTeachVoteList: API + 'FaceTeach/getFaceTeachVoteList',
            addFaceTeachVote: API + 'FaceTeach/addFaceTeachVote',
            getFaceTeachVoteResult: API + 'FaceTeach/getFaceTeachVoteResult',
            getVoteData: API + 'FaceTeach/getVoteData',
            saveStudentVoteData: API + 'FaceTeach/saveStudentVoteData',
            deleteVote: API + 'FaceTeach/deleteVote',
            changeFaceTeachState: API + 'FaceTeach/changeFaceTeachState',
            closeClassTest: API + 'FaceTeach/closeClassTest',
            closeVote: API + 'FaceTeach/closeVote',
            classTestStatis: API + 'FaceTeach/classTestStatis',
            classTestQuestionStatis: API + 'FaceTeach/classTestQuestionStatis',
            getFaceTeachSelfEvaluation: API + 'FaceTeach/getFaceTeachSelfEvaluation',
            startSign: API + 'FaceTeach/startSign',
            startAsk: API + 'FaceTeach/startAsk',
            delClassTest: API + 'FaceTeach/delClassTest',
            startClassTest: API + 'FaceTeach/startClassTest',
            getFeedbackBaseData: API + 'FaceTeach/getFeedbackBaseData',
            saveFeedbackData: API + 'FaceTeach/saveFeedbackData',
            getCoursKnowledgeList: API + 'FaceTeach/getCoursKnowledgeList',
            getTeachingProcess: API + 'FaceTeach/getTeachingProcess',
            getStuPerformance: API + 'FaceTeach/getStuPerformance',
            addFaceTeachRequire: API + 'FaceTeach/addFaceTeachRequire',
            getFaceTeachRequire: API + 'FaceTeach/getFaceTeachRequire',
            getRequireStuInfo: API + 'FaceTeach/getRequireStuInfo',
            updateFaceEvaluation: API + 'FaceTeach/updateFaceEvaluation',
            getEvaluationStatistics: API + 'FaceTeach/getEvaluationStatistics',
            getFeedbackData: API + 'FaceTeach/getFeedbackData',
            getStuSelfEvaluationList: API + 'FaceTeach/getStuSelfEvaluationList',
            getRequireReplyList: API + 'FaceTeach/getRequireReplyList',
            addRequireReply: API + 'FaceTeach/addRequireReply',
            delFaceTeach: API + 'FaceTeach/delFaceTeach',
            addGroupPKAndGroup: API + 'FaceTeach/addGroupPKAndGroup',
            getPKListByActivityId: API + 'FaceTeach/getPKListByActivityId',
            getFaceGroupList: API + 'FaceTeach/getFaceGroupList',
            getFaceGroupStuList: API + 'FaceTeach/getFaceGroupStuList',
            delFaceGroupStu: API + 'FaceTeach/delFaceGroupStu',
            delFaceGroup: API + 'FaceTeach/delFaceGroup',
            addFaceGroup: API + 'FaceTeach/addFaceGroup',
            saveGroupScore: API + 'FaceTeach/saveGroupScore',
            delGroupPK: API + 'FaceTeach/delGroupPK',
            addFaceGroupStu: API + 'FaceTeach/addFaceGroupStu',
            resetGroupScore: API + 'FaceTeach/resetGroupScore',
            randomAddGroupStu: API + 'FaceTeach/randomAddGroupStu',
            changePKState: API + 'FaceTeach/changePKState',
            saveEvaluationStuScore: API + 'FaceTeach/saveEvaluationStuScore',
            saveRequireStuScore: API + 'FaceTeach/saveRequireStuScore',
            saveSignStuScore: API + 'FaceTeach/saveSignStuScore',
            getTermList: API + 'FaceTeach/getTermList',
            getQuestionnaireList: API + 'FaceTeach/getQuestionnaireList',
            addQuestionnaireQuestion: API + 'FaceTeach/addQuestionnaireQuestion',
            delQuestionnaireQuestion: API + 'FaceTeach/delQuestionnaireQuestion',
            getQuestionnaireData: API + 'FaceTeach/getQuestionnaireData',
            delQuestionnaire: API + 'FaceTeach/delQuestionnaire',
            addQuestionnaire: API + 'FaceTeach/addQuestionnaire',
            questionnaireStatis: API + 'FaceTeach/questionnaireStatis',
            getQuestionnaireStuList: API + 'FaceTeach/getQuestionnaireStuList',
            questionnaireQuestionStatis: API + 'FaceTeach/questionnaireQuestionStatis',
            changeQuestionnaireState: API + 'FaceTeach/changeQuestionnaireState',
            saveFaceTeachStuScore: API + 'FaceTeach/saveFaceTeachStuScore',
            isResponsed: host + 'FaceTeach/isResponsed',
            getStuAskedList: API + 'FaceTeach/getStuAskedList',
            getBrainStormStuInfo: host + 'FaceTeach/getBrainStormStuInfo',
            getStuClassId: host + 'FaceTeach/getStuClassId',
            getStuFaceActivityList: API + 'FaceTeach/getStuFaceActivityList',
            stuResponsed: host + 'FaceTeach/stuResponsed',
            isStuSign: host + 'FaceTeach/isStuSign',
            saveStuSign: host + 'FaceTeach/saveStuSign',
            getFaceListByOpenClassId: API + 'FaceTeach/getFaceListByOpenClassId',
            saveStuBrainStorm: API + 'FaceTeach/saveStuBrainStorm',
            getstuEvaluationInfo: host + 'FaceTeach/getstuEvaluationInfo',
            addFaceTeachEvaluationStu: host + 'FaceTeach/addFaceTeachEvaluationStu',
            saveFaceTeachSelfEvaluation: API + 'FaceTeach/saveFaceTeachSelfEvaluation',
            getStuSummary: API + 'FaceTeach/getStuSummary',
            saveFeedBackData: API + 'FaceTeach/saveFeedBackData',
            saveStuQuestionAnswer: API + 'FaceTeach/saveStuQuestionAnswer',
            saveStuQuestionnaire: API + 'FaceTeach/saveStuQuestionnaire'
        },
        WrongQuestion: {
            getKnowledgeList: API + 'WrongQuestion/getKnowledgeList',
            getWrongQuestionList: API + 'WrongQuestion/getWrongQuestionList',
            getQuestionInfo: API + 'WrongQuestion/getQuestionInfo',
            getWrongStuList: API + 'WrongQuestion/getWrongStuList',
            getStuWrongQuestionList: API + 'WrongQuestion/getStuWrongQuestionList'
        },
        GroupTask: {
            getGroupTaskList: API + 'GroupTask/getGroupTaskList',
            getReadGroupList: API + 'GroupTask/getReadGroupList',
            getUnSubmitGroupList: API + 'GroupTask/getUnSubmitGroupList',
            getStuGroupTaskPreview: API + 'GroupTask/getStuGroupTaskPreview',
            markingStuGroupTask: API + 'GroupTask/markingStuGroupTask',
            getGroupTaskUrlById: API + 'GroupTask/getGroupTaskUrlById'
        },
        BBS: {
            getBBSList: API + 'BBS/getBBSList',
            getBBSReplyList: API + 'BBS/getBBSReplyList',
            addBBSReply: API + 'BBS/addBBSReply',
            addBBS: API + 'BBS/addBBS',
            deleteBBsReply: API + 'BBS/deleteBBsReply',
            getCellBBSList: API + 'BBS/getCellBBSList',
            addCellAskAnswer: API + 'BBS/addCellAskAnswer',
            addCellNote: API + 'BBS/addCellNote',
            addCellError: API + 'BBS/addCellError',
            getCellBBSReplyList: API + 'BBS/getCellBBSReplyList',
            addCellReply: API + 'BBS/addCellReply',
            deleteComment: API + 'BBS/deleteComment',
            addCellComment: API + 'BBS/addCellComment',
            acceptError: API + 'BBS/acceptError'
        },
        GT: {
            sendGTMsg: API + 'GT/sendGTMsg',
            sendGTMsgToUser: API + 'GT/sendGTMsgToUser'
        },
        Announcement: {
            getCourseAnnouncementList: API + 'Announcement/getCourseAnnouncementList',
            getClassAnnouncementList: API + 'Announcement/getClassAnnouncementList',
            addClassAnnouncement: API + 'Announcement/addClassAnnouncement',
            delClassAnnouncement: API + 'Announcement/delClassAnnouncement'
        },
        FaceTeachSummary: {
            getTeachingProcess: API + 'FaceTeachSummary/getTeachingProcess',
            getStuPerformance: API + 'FaceTeachSummary/getStuPerformance',
            getFeedbackBaseData: API + 'FaceTeachSummary/getFeedbackBaseData',
            getStuSummary: API + 'FaceTeachSummary/getStuSummary',
            saveFeedBackData: API + 'FaceTeachSummary/saveFeedBackData'
        },
        Homework: {
            getHomeworkList: API + 'Homework/getHomeworkList',
            getReadStuList: API + 'Homework/getReadStuList',
            getUnSubmitStuList: API + 'Homework/getUnSubmitStuList',
            getHomeworkStuRecord: API + 'Homework/getHomeworkStuRecord',
            getStuHomeworkPreview: API + 'Homework/getStuHomeworkPreview',
            saveStuHomeworkQuestionScore: API + 'Homework/saveStuHomeworkQuestionScore',
            markingStuHomework: API + 'Homework/markingStuHomework',
            getStuFileHomeworkPreview: API + 'Homework/getStuFileHomeworkPreview',
            getFileHomeworkUrlById: API + 'Homework/getFileHomeworkUrlById',
            readFileHomework: API + 'Homework/readFileHomework',
            rejectHomework: API + 'Homework/rejectHomework',
            saveHomeworkTimeInfo: API + 'Homework/saveHomeworkTimeInfo',
            getHomeworkTimeInfo: API + 'Homework/getHomeworkTimeInfo',
            readStusFileHomework: API + 'Homework/readStusFileHomework',
            previewHomework: API + 'Homework/previewHomework'
        },
        OnlineExam: {
            getExamList: API + 'OnlineExam/getExamList',
            getReadStuList: API + 'OnlineExam/getReadStuList',
            getUnSubmitStuList: API + 'OnlineExam/getUnSubmitStuList',
            getExamPreview: API + 'OnlineExam/getExamPreview',
            getStuExamPreview: API + 'OnlineExam/getStuExamPreview',
            stuSaveExamQuestion: API + 'OnlineExam/stuSaveExamQuestion',
            stuSubmitExam: API + 'OnlineExam/stuSubmitExam',
            saveStuExamQuestionScore: API + 'OnlineExam/saveStuExamQuestionScore',
            markingStuExam: API + 'OnlineExam/markingStuExam',
            saveExamTimeInfo: API + 'OnlineExam/saveExamTimeInfo',
            getExamTimeInfo: API + 'OnlineExam/getExamTimeInfo',
            previewOnlineExam: API + 'OnlineExam/previewOnlineExam'
        },
        MobileLogin: {
            inviteRegister: API + 'MobileLogin/inviteRegister',
            editPassword: API + 'MobileLogin/editPassword',
            editUserInfo: API + 'MobileLogin/editUserInfo',
            getUserInfo: API + 'MobileLogin/getUserInfo',
            validateUserInfo: API + 'MobileLogin/validateUserInfo',
            resetPassword: API + 'MobileLogin/resetPassword',
            saveUserLog: API + 'MobileLogin/saveUserLog',
            getFileInfoByUrl: API + 'MobileLogin/getFileInfoByUrl'
        },
        Teacher: {
            teaJoinOpenClassByScan: API + 'Teacher/teaJoinOpenClassByScan',
            getStuOrTeaColleagueList: API + 'Teacher/getStuOrTeaColleagueList',
            approvalStuOrColleague: API + 'Teacher/approvalStuOrColleague',
            saveMyDoc: API + 'Teacher/saveMyDoc'
        },
        common: {
            getActivityInfo: API + 'common/getActivityInfo'
        }
    };

    /**
     * app 数据库信息
     * @return null
     */
    app.database = {
        id: 'cloudclass',
        name: 'cloudClass database',
        size: 5 * 1024 * 1024
    };

    /**
     * app 存放目录
     * @return null
     */
    app.dir = {
        update: '_doc/update/',
        cache: '_doc/cache/',
        video: '_doc/video/',
        audios: '_doc/audio/',
        imgCache: '_doc/imgCache/',
        resCache: '_doc/resCache/',
        question: '_doc/question/',
        avatorCache: '_doc/avatorCache/',
        download: '_downloads/'
    };

    /**
     * app TPL
     * @return {null}
     */
    app.tpl = {
        alert: ['<div class="app-alert">',
            '       <div class="app-alert-shade"></div>',
            '       <div class="app-alert-main">',
            '           <div class="app-alert-section">',
            '               <div class="app-alert-content">',
            '                   <div class="app-alert-header">',
            '                       <h3>{{title}}</h3>',
            '                   </div>',
            '                   <div class="app-alert-body">{{message}}</div>',
            '                   <div class="app-alert-footer">',
            '                       <span type="0">{{btn0}}</span>',
            '                       <span type="1">{{btn1}}</span>',
            '                   </div>',
            '               </div>',
            '           </div>',
            '       </div>',
            '    </div>'
        ].join(""),
        notNetwork: '<div class="not-networkinfo"><div class="not-network-icon"><i class="iconfont icon-not-network"></i><p>您的网络好像不给力哦</p></div></div>',
        noNetArtcle: '<div class="not-networkinfo-artcle"><div class="not-network-icon"><i class="iconfont icon-not-network"></i><p>您的网络好像不给力哦</p></div></div>'
    };

    /**
     * 本地储存操作
     * @return  null
     */
    app.data = {
        /**
         * 设置数据
         * @param {key}     设置储存的本地名
         * @param {value}   对应的本地值
         * @type  {key: String, value: Object}
         */
        set: function(key, value) {
            return win.localStorage.setItem(key, value);
        },

        /**
         * 读取数据
         * @param {key}     储存的本地名
         * @type  {key: String}
         */
        get: function(key) {
            return win.localStorage.getItem(key);
        },

        /**
         * 删除数据
         * @param {key}     储存的本地名
         * @type  {key: String}
         */
        remove: function(key) {
            return win.localStorage.removeItem(key);
        }
    };

    /**
     * app 接口地址
     * @return null
     */
    app.url = app[Number(app.data.get('$cloudClassUserType')) === 0 ? 'teacherAPI' : 'studentAPI'];
    app.url.login = host + 'MobileLogin/login';
    app.url.insertLogin = host + 'MobileLogin/insertLogin';
    app.url.loginOut = host + 'MobileLogin/loginOut';
    app.url.getSchoolList = host + 'MobileLogin/getSchoolList';
    app.url.update = API + 'setting/updateUrl';
    app.url.uploadUrl = API + 'AssistTeacher/uploadUrl';
    app.url.getPriviewUrl = API + 'AssistTeacher/getPriviewUrl';
    app.url.updateAvator = API + 'MobileLogin/updateAvator';
    app.url.isLogin = API + 'MobileLogin/isLogin';


    /**
     * 封装请求，基础库 所有返回格式为 json
     * @param {String} url
     * @param {String} type
     * @param {Object} data
     * @param {Function} success
     * @param {Function} error
     */
    var $http = function(url, type, data, success, error) {
        var val = {},
            async = true,
            token = app.data.get('$cloudClassToken');

        if (typeof data === 'function') {
            success = data;
            error = success;
            val.token = token;
        } else {
            async = data._async === true ? true : false;
            delete data._async;

            data.token = token;
            val = data;
        }

        if (!error) {
            error = function() {
                plus.nativeUI.closeWaiting();
                plus.nativeUI.toast('获取数据失败，请检查您的网络设置', { duration: 'long' });
            };
        }
        return $M.ajax(url, {
            data: val,
            type: type,
            async: async,
            dataType: 'json',
            timeout: 5000,
            success: function() {
                success.apply(this, arguments);
            },
            error: error
        });
    };

    /**
     * 简化版 Get 请求
     * @param {String} url         请求URL
     * @param {Object} data        发送的参数 可以为空
     * @param {Function} success   请求成功回调
     * @param {Function} error     请求失败回调
     */
    $http.get = function(url, data, success, error) {
        return $http(url, 'get', data, success, error);
    };

    /**
     * 简化版 post 请求
     * @param {String} url          请求URL
     * @param {Object} data         发送的参数 可以为空
     * @param {Function} success    请求成功回调
     * @param {Function} error      请求失败回调
     */
    $http.post = function(url, data, success, error) {
        return $http(url, 'post', data, success, error);
    };

    /**
     * app 登录状态
     * @return null
     */
    app.login = {
        is: function() {
            var token = app.data.get('$cloudClassToken'),
                userInfo = JSON.parse(app.data.get('$cloudClassUser'));

            if (userInfo && userInfo.displayName && token) {
                return true;
            } else {
                return false;
            }
        }
    };

    /**
     * 退出应用程序
     */
    app.quit = function() {
        var count = 0;
        $M.back = function() {
            count++;
            if (count > 1) {
                plus.runtime.quit();
            } else {
                plus.nativeUI.toast('再按一次退出应用');
            }
            setTimeout(function() {
                count = 0;
            }, 1000);
            return false;
        };
    };

    /**
     * 增加缓存功能
     * 采用本地存储来关联缓存
     * 后期缓存数据量大，建议采用数据库
     * 只适用于 DFS 的图片缓存
     */
    app.cache = {
        /**
         * 获取缓存的地址 根据 Key 来获取
         * @param {Object} name
         */
        getCache: function(name) {
            var cache = JSON.parse(app.data.get('$cloudClassCache'));
            if (cache && cache[name]) {
                return plus.io.convertLocalFileSystemURL(cache[name]);
            }
        },
        /**
         * 创建缓存，如果缓存已存在， 将覆盖已有资源
         * @param {Object} name      指定的缓存 key名     根据Key来查找
         * @param {Object} url       要缓存的图片地址
         * @param {Object} callback  执行完缓存后的回调，可以不写
         */
        createCache: function(name, url, callback) {
            var cache = JSON.parse(app.data.get('$cloudClassCache')) || {};
            //下载并缓存
            var download = function() {
                var query = url.lastIndexOf('?'),
                    index = url.lastIndexOf('/'),
                    filename = query > -1 ? url.substring(index + 1, query) : url.substring(index + 1);

                if (name == 'avatar') {
                    url = app.getAvatarDfs(url, { width: 200, src: '../../../img/defult_avatar.png' });
                }

                var task = plus.downloader.createDownload(url, { filename: app.dir.avatorCache + name + '_' + filename }, function(d, status) {
                    if (status == 200) {
                        cache[name] = d.filename;
                        app.data.remove('$cloudClassCache');
                        app.data.set('$cloudClassCache', JSON.stringify(cache));
                        callback && callback.call({}, d);
                    } else {
                        callback && callback.call({}, d);
                        console.log('download error');
                    }
                });

                task.start();
            };

            //检测资源是否存在，存在则删除并重新创建
            if (cache[name]) {
                var dir = plus.io.convertAbsoluteFileSystem(this.getCache(name));

                plus.io.resolveLocalFileSystemURL(dir, function(fileEntry) {
                    fileEntry.remove(download);
                }, function(e) {
                    console.log(e.message);
                });
            } else {
                download();
            }
        },
        /**
         * 移除当前的缓存，
         * @param {Object} name      要移除的缓存名 key
         * @param {Object} callback  移除完缓存的回调
         */
        removeCache: function(name, callback) {
            if (!callback) callback = function() {};
            var cache = JSON.parse(app.data.get('$cloudClassCache'));

            if (cache && cache[name]) {
                var dir = plus.io.convertAbsoluteFileSystem(cache[name]);

                delete cache[name];
                app.data.remove('$cloudClassCache');
                app.data.set('$cloudClassCache', JSON.stringify(cache));

                plus.io.resolveLocalFileSystemURL(dir, function(fileEntry) {
                    fileEntry.remove(callback);
                }, function(e) {
                    console.log(e.message);
                });
            }
        }
    };

    /**
     * app 资源升级包检测
     * @return null
     */
    app.update = function() {
        return new app.update.init();
    };

    /**
     * 构造函数
     */
    app.update.init = function() {
        var $user, isLogin = app.login.is();
        this.url = null; // 线上下载地址
        this.file = null; // 本地存储的地址
        this.version = null; // 当前版本号

        // 判断当前是否有网路进行升级判断
        if (plus.networkinfo.getCurrentType() < 2) {
            return;
        }

        // 判断是否是苹果账号
        if (isLogin) {
            $user = JSON.parse(app.data.get('$cloudClassUser'));
            if ($user.id === 'gmolam-kuivarbemr4nddw') {
                return;
            }
        }

        //获取 app 版本号
        this.getLocalVersion();
    };
    app.update.init.prototype = {
        /**
         * 获取app 版本号
         * @return this;
         */
        getLocalVersion: function(call) {
            var _this = this;
            plus.runtime.getProperty(plus.runtime.appid, function(info) {
                _this.version = info.version;
                _this.check();
            });
            return this;
        },

        /**
         * 本地资源升级包进行安装
         * @return null
         */
        install: function() {
            plus.nativeUI.closeWaiting();
            plus.nativeUI.toast('文件下载完成，正在为您安装新版本...');

            var wait = plus.nativeUI.showWaiting("正在安装新版本...");
            plus.runtime.install(this.file, {}, function() {
                wait.close();
                plus.nativeUI.toast('新版本安装成功，正在为您重启应用~');
                setTimeout(function() {
                    plus.runtime.restart();
                }, 3000);
            }, function(e) {
                wait.close();
                console.log("安装wgt文件失败[" + e.code + "]：" + e.message);
                plus.nativeUI.toast('安装新版本失败，请关闭应用，稍后再试~');
            });
        },

        /**
         * 下载资源升级包
         * @return this;
         */
        download: function() {
            if (!this.url) return;

            var _this = this,
                network = plus.networkinfo.getCurrentType(),
                wait,
                download;

            // 下载更新包
            var downloadFile = function() {
                wait = plus.nativeUI.showWaiting("正在下载文件...");

                var query = _this.url.lastIndexOf('?'),
                    index = _this.url.lastIndexOf('/'),
                    filename = query > -1 ? _this.url.substring(index + 1, query) : _this.url.substring(index + 1);

                app.data.set('$cloudClassWgtName', filename);
                download = plus.downloader.createDownload(_this.url, { filename: app.dir.update + filename }, function(d, status) {
                    if (d.state === 4 && status === 200) {
                        _this.file = d.filename;
                        _this.install();
                    } else {
                        wait.close();
                        plus.nativeUI.toast('更新失败，请检查您的网络设置');
                    }
                });
                download.start();
            };

            // 清理上次的更新包
            var remove = function(callback) {
                var fileName = app.data.get('$cloudClassWgtName');
                plus.io.resolveLocalFileSystemURL(app.dir.update + fileName, function(entry) {
                    entry.remove(function() {
                        callback();
                    }, function() {
                        callback();
                    });
                }, function() {
                    callback();
                });
            };

            // WIFI，移动网络进行判断
            if (network === 0 || network === 1) {
                return false;
            } else if (network === 4 || network === 5 || network === 6) {
                plus.nativeUI.confirm('您当前正在使用蜂窝移动数据上网，升级时会产生较大的流量，确定是否升级？', function(e) {
                    if (e.index === 0) {
                        remove(downloadFile);
                    }
                });
            } else {
                remove(downloadFile);
            }
        },

        /**
         * 本地资源升级包进行升级判断
         * @return this
         */
        check: function() {
            var _this = this;
            $http.post(app.url.update, { version: this.version }, function(data) {
                if (_this.version && _this.version !== data.version) {
                    var message = data.isNeed ? '您当前的版本较低，请升级为最新版本！' : '有新的版本可以升级，是否进行升级',
                        buttons = data.isNeed ? '升级新版本' : ['确定', '取消'];
                    _this.url = data.url;
                    plus.nativeUI[data.isNeed ? 'alert' : 'confirm'](message, function(e) {
                        if (data.isNeed) {
                            _this.download();
                        } else {
                            if (e.index === 0) {
                                _this.download();
                            }
                        }
                    }, null, buttons);
                }
            });
            return this;
        }
    };

    /**
     * 获取 DFS URL 转换为头像地址
     * @return {this}
     */
    app.getAvatarDfs = function(data, val) {
        var action = function(data, obj) {
            var urls, arr;
            if (!data) return obj.src;
            if (data.indexOf('?') > -1) {
                arr = data.split('?');
                urls = arr[0] + '/' + obj.width + '_' + obj.width + '.jpg?' + arr[1];
            } else {
                urls = data + '/' + obj.width + '_' + obj.width + '.jpg';
            }
            return urls;
        };

        if (data && val) {
            return action(data, val);
        } else {
            template.helper('GetDfsUrl', action);
        }
    };

    /**
     * 常用时间操作
     * @return null
     */
    app.date = {
        /**
         * 获取当时前时间，格式为 2015-05-05
         * @return null
         */
        now: function(value) {
            var date = new Date();
            if (value) {
                switch (value) {
                    case 'd':
                        return date.getDate();
                        //break;
                    case 'm':
                        return date.getMonth() + 1;
                        //break;
                    case 'y':
                        return date.getFullYear();
                        //break;
                }
            } else {
                return date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate();
            }
        },

        /**
         * 格式化 Unix 时间戳
         * @param {Number} time    Unix 时间戳
         * @param {String} filter  要格式出来的格式
         */
        format: function(time, filter) {
            var date = new Date(time * 1000),
                o = {
                    "M+": date.getMonth() + 1,
                    "d+": date.getDate(),
                    "h+": date.getHours(),
                    "m+": date.getMinutes(),
                    "s+": date.getSeconds(),
                    "q+": Math.floor((date.getMonth() + 3) / 3),
                    "S": date.getMilliseconds()
                };

            if (/(y+)/.test(filter)) {
                filter = filter.replace(RegExp.$1, (date.getFullYear() + "").substr(4 - RegExp.$1.length));
            }

            for (var k in o) {
                if (new RegExp("(" + k + ")").test(filter)) {
                    filter = filter.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
                }
            }

            return filter;
        }
    };

    /**
     * 获取当前显示在最前的窗口
     * @return view;
     */
    app.getShowView = function() {
        var view;
        $.each(plus.webview.all(), function(i, v) {
            if (v.isVisible()) view = v;
        });
        return view;
    };

    /**
     * 将函数变成字符串
     * @return string
     */
    app.fnToString = function(fn) {
        if (fn) {
            return fn.toString().replace(/^function\s*\(\)\s*{/, '').replace(/.*}$/, '').trim();
        }
    };

    /**
     * 弹出对话框，模拟原生
     * 模拟 plus.nativeUI.confirm 方法
     * @param {Object} message
     * @param {Object} fn
     * @param {Object} title
     * @param {Object} button
     */
    app.confirm = function(message, fn, title, button) {
        title = title || '提示';
        fn = fn || function() {};
        message = message || '';
        button = button || ['取消', '确定'];

        if ($('#app-alert').length) {
            $('#app-alert').remove();
        }

        var tpl = app.tpl.alert.replace('{{title}}', title)
            .replace('{{message}}', message)
            .replace('{{btn0}}', button[0])
            .replace('{{btn1}}', button[1]);

        var $fragment = $(tpl).appendTo($('body')),
            $span = $fragment.find('span');

        $span.off('touchend').on('touchend', function(e) {
            e.index = Number($(this).attr('type'));
            fn.apply($fragment[0], [e]);
            $fragment.remove();
        });
    };

    //扩展通知
    window.addEventListener('CLASS_NOTICE', function(e) {
        var data = e.detail.data,
            callback = e.detail.callback,
            fn = new Function(callback);

        fn.apply(data);
    }, false);

    //判断是否支持沉浸栏
    $M.plusReady(function() {
        var StatusbarOffset = '0px';
        if (plus.navigator.isImmersedStatusbar()) {
            // 重新计算了子窗口的偏移位置
            StatusbarOffset = (Math.round(plus.navigator.getStatusbarHeight())) + 'px';
            var header = document.getElementById('header');
            header && (header.style.paddingTop = StatusbarOffset) && header.classList.add('mui-immersed');
        }
    });

    // 扩展至全局
    win.app = app;
    win.$http = $http;

}(mui, Zepto));
