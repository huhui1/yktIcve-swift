/**
 * 签到中页面
 * @param {Object} $M => mui
 * @param {Object} $  => zepto
 * @name  zqyou
 * @date  2017-03-09
 * @return {Object}
 */
(function($M, $) {

    var signing = {
        /**
         * 绘制手势
         * 
         */
        createGesture: function(numbers) {
            var _this = this;

            if (numbers.length < 2) {
                return false;
            }
            for (var i = 0; i < numbers.length - 1; i++) {
                var line = $('<div class="patt-lines" style="top: 82px; left: 82px; width: 138px; transform: rotate(45deg);"><div class="lines-arrow"></div></div>');
                var y1 = Math.floor(numbers[i] / 3),
                    x1 = numbers[i] % 3,
                    y2 = Math.floor(numbers[i + 1] / 3),
                    x2 = numbers[i + 1] % 3,
                    y = y2 - y1,
                    x = x2 - x1;

                var top = 68 + y1 * 100,
                    left = 68 + x1 * 100,
                    tanAngle = Math.atan2(y, x) / Math.PI, //角比例
                    angle = 180 * (2 + tanAngle), //角
                    width = 0;

                if (y == 0) {
                    width = Math.abs(x * 100 / Math.cos(Math.PI * Math.abs(tanAngle)));
                } else {
                    width = Math.abs(y * 100 / Math.sin(Math.PI * Math.abs(tanAngle)));
                }

                line.css({
                    'top': top + 'px',
                    'left': left + 'px',
                    'width': width + "px",
                    '-webkit-transform': 'rotate(' + angle + 'deg)',
                    'transform': 'rotate(' + angle + 'deg)'
                });

                line.find(".lines-arrow").css({
                    "left": width - 15 + "px"
                })

                $(".patt-holder").append(line);
            }
        },
        /**
         * 设置总人数
         * @return {this}
         */
        charts: function(value, number) {
            var _this = this;
            var option = {
                backgroundColor: '#04ae84',
                tooltip: {
                    formatter: "{a} <br/>{b} : {c}%"
                },
                series: [{
                    name: '参与人数',
                    type: 'gauge',
                    detail: {
                        formatter: function(value) {
                            value = Math.round(value * number / 100);
                            return value + '/' + number;
                        },
                        textStyle: {
                            color: '#fff'
                        }
                    },
                    radius: '90%',
                    center: ['50%', '50%'],
                    data: [{
                        value: value,
                        rate: number,
                        name: ''
                    }],
                    title: {
                        textStyle: {
                            color: '#04ae84',
                            fontSize: 30
                        }
                    },
                    axisLine: { // 坐标轴线
                        lineStyle: { // 属性lineStyle控制线条样式
                            color: [
                                [0.2, '#0E8C6D'],
                                [0.8, '#82DBC5'],
                                [1, '#00FFC0']
                            ],
                            width: 8
                        }
                    },
                    axisTick: { // 坐标轴小标记
                        show: false
                    },
                    pointer: {
                        width: 5
                    }
                }]
            };

            var chart = echarts.init(document.getElementById('sign-list'));
            chart.setOption(option);

            //计算总行数
            var lines = $('.sign-list').height() / 40;
            _this.tempLines = [];
            for (var i = 0; i < lines; i++) {
                _this.tempLines.push(i);
            }
            _this.lines = _this.tempLines.concat();
            return this;
        },
        /**
         * 弹幕
         * @return {this}
         */
        bulletScreen: function(name) {
            var _this = this;
            if (this.tempLines.length == 0) {
                return;
            }
            if (this.lines.length == 0) {
                this.lines = this.tempLines.concat();
            }

            var time = 4,
                timePlus = Math.random() * 8,
                lines = this.lines,
                n = Math.floor(Math.random() * lines.length),
                line = lines[n],
                lastTime = this.speeds[line] || 0,
                student = $('<div class="activity-student"></div>'),
                content = $('#show-info');

            student.html(name);

            //当这一行和上一次速度相差大于2时 结束
            while (Math.abs(timePlus - lastTime) < 5) {
                timePlus = Math.random() * 8;
            }

            time += timePlus;

            this.speeds[line] = timePlus;

            //删除这一行
            this.lines.splice(n, 1);
            content.append(student);

            student.css('top', line * 40);

            setTimeout(function() {
                student.css('transition', 'all ' + time + 's ' + 'cubic-bezier(0, 0, 1, 1)').css('transform', 'translateX(-' + (window.screen.width + student.width()) + 'px)');
            }, 0);

            setTimeout(function() {
                student.remove();
            }, time * 1000);

            return this;
        },

        ListenerstuSigned: function(r) {
            var _this = this;
            _this.signCount++;
            _this.stuNames.push(r.displayName)
            _this.charts(1.0 * _this.signCount / _this.studycount * 100, _this.studycount).bulletScreen(r.displayName);
            return this;
        },
        ListenerstuSigneds: function(id, signCount, studycount, r) {
            var _this = this;
            _this.charts(1.0 * signCount / studycount * 100, studycount);
            $.each(r, function(i, v) {
                var index = $.inArray(v.StuName, _this.stuNames);
                if (index < 0) {
                    var params = {
                        type: 'signed',
                        userId: v.StuId,
                        avator: v.Avator,
                        actId: id,
                        displayName: v.StuName
                    }
                    var message = { "method": "params", "params": JSON.stringify(params) };
                    window.webkit.messageHandlers.interOp.postMessage(message);
                    _this.stuNames.push(v.StuName)
                    setTimeout(function() {
                        _this.bulletScreen(v.StuName);
                    }, i * 700)
                }
            });
            return this;
        },
        /**
         * 删除签到内容回调
         * @return this;
         */
        endCallBack: function() {
            var _this = this;

            //结束时更新暂时跳转到列表页
            setTimeout(function() {
                $M.openWindow({
                    url: '/view/teacher/sign/result.html',
                    id: 'teacher-sign-result',
                    extras: {
                        signId: _this.signId,
                        courseOpenId: _this.courseOpenId,
                        openClassId: _this.openClassId,
                        activityId: _this.activityId,
                        fromRes: _this.fromRes,
                        isEnd: true
                    }
                });
            }, 100);

            //重新加载签到列表      
            var signView = plus.webview.getWebviewById('teacher-signlist');
            $M.fire(signView, 'signReload');

            var view = plus.webview.getWebviewById('mine-list');
            //   $M.fire(view, 'socket.emit', { params: { type: 'signEnd', signId: _this.signId, courseId: _this.courseId } });

            setTimeout(function() {
                _this.isEndCallBack = true;
                var view = plus.webview.currentWebview();
                view.close();
            }, 500);

            return this;
        },

        setCharts: function(signCount, studycount, points) {
            var _this = this;
            _this.points = points
            _this.studycount = studycount
            _this.signCount = signCount
            _this.createGesture(_this.points.split(""));
            if (_this.studycount == 0) {
                _this.charts(0, _this.studycount);
            } else {
                _this.charts(1.0 * _this.signCount / _this.studycount * 100, _this.studycount);
            }
            return this;
        },
        load: function() {
            var message = { "method": "load" };
            window.webkit.messageHandlers.interOp.postMessage(message);
            // 结束签到
            $('#end').on('singleTap', function() {
                var message = { "method": "endsign" };
                window.webkit.messageHandlers.interOp.postMessage(message);
            });

            return this;
        },
        /**
         * 载入
         * @return {this}
         */
        init: function() {
            this.signCount = 0;
            this.studycount = 0
            var _this = this;
            this.lines = [];
            this.tempLines = [];
            this.stuNames = [];
            this.speeds = [];
            this.load();
            return this;
        },
    };


    signing.init();
    window.signing = signing
}(mui, Zepto));