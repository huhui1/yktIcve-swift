/**
 * @name     Mcache 
 * @desc     数据库图片缓存插件
 * @depend   html5sql.js
 * @author   M.J
 * @date     2015-11-23
 * @URL      http://webjyh.com
 * @reutn    {null}
 * @version  1.0.0
 * @license  MIT
 *
 * @PS If you have any questions, please don't look for me, I don't know anything. thank you.
 */
(function(SQL) {
	
	var Mcache = {
		/**
		 * 用于存放已缓存的数据
		 * @return {this}
		 */
		data: {},
		
		/**
		 * 存放要缓存的信息
		 * @return {null}
		 */
		queue: [],
		
		/**
		 * 配置方法
		 * @param {Object} 数据库信息
		 * @return {this}
		 */
		config: function(options) {
			this.isReady = false;
			this.dir = options.dir;
			this.database = options.database;
			this.database.tableName = options.tableName;
			this.callback = options.callback;
			this.open().create();
			return this;
		},
		
		/**
		 * 打开数据库
		 * @return {this}
		 */
		open: function() {
			SQL.openDatabase(this.database.id, this.database.name, this.database.size);
			return this;
		},
		
		/**
		 * 创建表名称
		 * @return {this}
		 */
		create: function() {
			var _this = this;
			
			html5sql.process(
				"SELECT * FROM sqlite_master WHERE type='table' AND name = '"+ this.database.tableName +"'",
				function(transaction, results) {
					if (!results.rows.length) {
						html5sql.process(
							"CREATE TABLE "+ _this.database.tableName +" (id TEXT, url TEXT, localUrl TEXT)",
							function() {
								_this.getAll();
							},
							function(error, failingQuery) {
								_this.getAll();
								_this.error(error, failingQuery);
							}
						);
					} else {
						_this.getAll();
					}
				},
				function(error, failingQuery) {
					_this.getAll();
					_this.error(error, failingQuery);
				}
			);
			
			return this;
		},
		
		/**
		 * 获取已缓存的图片地址
		 * @return {this}
		 */
		get: function(id) {
			if (!id || !this.isReady) {
				return this;
			}
			return this.data[id];
		},
		
		/**
		 * 创建下载
		 * @return {this}
		 */
		download: function() {
			var _this = this,
				item = this.queue[0],
				temp = item.url.split('?'),
                result = temp[0].match(/[^\.]+$/),
                ext = result[0] || null;
			
			// 无效任务 去除队列
			if (!ext) {
				this.queue.shift();
				this.start();
			}
			
            var task = plus.downloader.createDownload(item.url, {filename: this.dir + item.id + '.' + ext}, function(d, status) {
                if (status == 200) {
                	// 插入缓存记录
                	html5sql.process(
						"INSERT INTO "+ _this.database.tableName +"(id, url, localUrl) VALUES ('"+ item.id +"', '"+ item.url +"', '"+ d.filename +"')",
						function(transaction, results) {
						    _this.data[item.id] = d.filename;
							_this.queue.shift();
							_this.start();
						},
						function(error, failingQuery) {
							_this.error(error, failingQuery);
						}
					);
                } else {
                    _this.queue.shift();
                    _this.start();
                }
            });
            
            
            task.start();

			return this;
		},
		
		/**
		 * 任务开始
		 * @return {this}
		 */
		start: function() {
			if (this.queue.length) {
				this.download();
			}
			return this;
		},
		
		/**
		 * 检测任务是否已存在
		 * @return {Boolean}
		 */
		has: function(id) {
		    var has = false;
		    
		    for (var i = 0; i < this.queue.length; i++) {
		        if (id === this.queue[i].id) {
		            has = true; 
		            break;
		        }
		    }
		    
		    if (this.data[id]) {
		        has = true;
		    }
		    
		    return has;
		},
		
		/**
		 * 添加队列方法
		 * @params id  图片的ID
		 * @params url 图片的地址
		 * @return {this}
		 */
		add: function(id, url) {
			if (!id || !url || !this.isReady) {
				return this;
			}
			
			// 检测任务是否存在
			if (this.has(id)) {
			    return this;
			}
			
			var temp = {id: id, url: url},
				length = this.queue.length;
				
			this.queue.push(temp);
			if (!length) {
				this.start();
			}

			return this;
		},
		
		/**
		 * 获取所有已缓存信息
		 * @return {this}
		 */
		getAll: function() {
			var _this = this;
			
			html5sql.process(
				"SELECT id, localUrl FROM "+ this.database.tableName,
				function(transaction, results) {
					if (results.rows.length) {
						for (var i = 0; i < results.rows.length; i++) {
							var item = results.rows.item(i);
							_this.data[item.id] = item.localUrl;
						}
					}
					_this.isReady = true;
                    _this.init();
				},
				function(error, failingQuery) {
				    _this.init();
					_this.error(error, failingQuery);
				}
			);
			
			return this;
		},
		
		/**
		 * SQL 出错处理
		 * @return this;
		 */
		error: function(error, sql) {
			console.error('Error:' + error.message + ' SQL: ' + sql);
			return this;
		},
		
		/**
		 * 载入成功之后进行回调
		 * @return {this}
		 */
		init: function() {
	        this.callback && this.callback();
		    return this;
		}
	};
	
	window.Mcache = Mcache;
	
}(html5sql));
