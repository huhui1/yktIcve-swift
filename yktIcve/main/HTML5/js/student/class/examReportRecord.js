/**
 *测验结果预览
 * @param {Object} $M => mui
 * @param {Object} $  => zepto
 * @name  zqyou
 * @date  2017-07-1
 * @return {Object}
 */
(function($M, $) {

    $M.init({
        beforeback: function() {

        }
    });

    var examhandle = {

        /**
         * 获取题目
         * @return {this}
         */
        get: function() {
            var _this = this,
                $mask = $('#mask');
            var numtostr = ["一", "二", "三", "四", "五", "六", "七", "八", "九", "十"];
            $("#nowindex").text(_this.index);
            $("#total").text(_this.questionlist.length);
            $('#questioninfo').html(template('question-danx-duox-pand', { question: _this.questionlist[_this.start], index: _this.index }));
            $('#mask').addClass('hide');
            return this;
        },
        prev: function() {
            if (examhandle.start == 0) {
                var message = { "method": "showMsg", "msg": "已经是第一题" };
                window.webkit.messageHandlers.interOp.postMessage(message);
                // plus.nativeUI.toast("已经是第一题");
                return;
            }
            examhandle.start -= 1.0;
            examhandle.index -= 1.0;
            $("#nowindex").text(examhandle.index);
            $('#questioninfo').html(template('question-danx-duox-pand', {
                question: examhandle.questionlist[examhandle.start],
                index: (examhandle.index)
            }));

            $('#down-question').removeClass('save').text('下一题');
            examhandle.$scroll.scrollTo(0, 0);

        },
        /**
         * return this
         * 下一题
         */
        next: function() {

            examhandle.start += 1.0;
            examhandle.index += 1.0;
            if (examhandle.index > examhandle.questionlist.length) {
                // plus.nativeUI.toast("已是最后一题");
                var message = { "method": "showMsg", "msg": "已是最后一题" };
                window.webkit.messageHandlers.interOp.postMessage(message);
                examhandle.start = examhandle.questionlist.length - 1;
                examhandle.index = examhandle.questionlist.length;
                return;
            }

            $("#nowindex").text(examhandle.index);
            $('#questioninfo').html(template('question-danx-duox-pand', {
                question: examhandle.questionlist[examhandle.start],
                index: (examhandle.index)
            }));
            examhandle.$scroll.scrollTo(0, 0);

        },
        /**
         * 事件绑定
         * @return {this}
         */
        events: function() {
            var _this = this,
                DOM = $('#questioninfo');

            _this.$scroll = $M('.mui-scroll-wrapper').scroll();
            $("body").swipeRight(_this.prev);
            $("body").swipeLeft(_this.next);
            DOM.on('singleTap', 'img', function() {
                var url = $(this).attr('src');
                if (url) {
                    var message = { "method": "previewIMG", "url": url };
                    window.webkit.messageHandlers.interOp.postMessage(message);
                }
            });

            DOM.on('singleTap', 'a', function(e) {
                var $elem = $(this);
                if ($elem.data('url')) {
                    var message = { "method": "previewfile", "url": $elem.data('url') };
                    window.webkit.messageHandlers.interOp.postMessage(message);
                }
            });

            $('#down-question').on('singleTap', function(e) {
                if ($(e.target).hasClass('save')) {
                    _this.submit(_this.momentList[_this.start]);
                } else {
                    _this.next();
                }
            });

            $('#up-question').on('singleTap', function(e) {
                _this.prev();

            });
            return this;
        },
        helper: function() {

            var _this = this,
                letter = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];
            //对字符串进行编码
            template.config('escape', false);
            //替换img标签
            template.helper('questionType', function(i) {
                var type = ['', '单选题', '多选题', '判断题', '填空题', '填空题', '问答题', '匹配题', '阅读理解', '完形填空', '文件作答题', '视听题'];
                return type[Number(i)];
            });
            template.helper('itoCharAB', function(i) {
                var letter = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];
                return letter[Number(i)];
            });

            template.helper('iscorrect', function(i, answer, userAnswer) {
                if (!userAnswer) {
                    return "";
                }
                var array_userAnswer = userAnswer.split(','),
                    array_answer = answer.split(',');
                if ($.inArray(String(i), array_userAnswer) > -1) {
                    if ($.inArray(String(i), array_answer) > -1) {
                        return 'right';
                    } else {
                        return 'error';
                    }
                }
                return "";
            });

            template.helper('answertoCharAB', function(val, type) {
                if (!val) {
                    val = "";
                }
                if (type == 3) {
                    return val == 1 ? "正确" : "错误";
                }
                var arr = [];
                $.each(val.split(","), function(i, v) {
                    var moometstr = letter[v];
                    arr[i] = moometstr == undefined ? v : moometstr;
                });
                return arr.join();
            });
            return this;
        },
        load: function() {
            var message = { "method": "load" };
            window.webkit.messageHandlers.interOp.postMessage(message);
            return this;
        },
        getparameter: function(data, start) {
            var _this = this;
            _this.questionlist = data;
            _this.start = Number(start);
            _this.index = Number(start) + 1;
            this.get();
        },
        /**
         * 载入 
         * @return {null}
         */
        init: function() {
            this.questionlist = [];
            this.start = 0; //数组下标
            this.index = 1; //题目下标
            this.$scroll = '';
            this.helper().load().events();
            return this;
        }
    };


    examhandle.init();
    window.examhandle = examhandle

}(mui, Zepto));