/**
 * 白板功能
 * @param {Object} $M => mui
 * @param {Object} $  => zepto
 * @name  zqyou
 * @date  2017-03-02修正
 * @return {Object}
 */
(function($M, $) {

    // 白板功能    
    var whiteboard = {
        /**
         * 设置当前画笔状态
         * @return {this}
         */
        setPen: function() {
            if (!this.MARK) return this;
            this.MARK.setMethod('brush');
            return this;
        },
        /**
         * 设置当前画笔粗细
         * @return {this}
         */
        setPenLine: function(size) {
            if (!this.MARK || !size) return this;

            // 设置为画笔状态
            this.MARK.setMethod('brush');

            // 设置粗细
            this.MARK.setLineWidth(size);

            return this;
        },

        /**
         * 设置当前画笔颜色
         */
        setPenStyle: function(color) {
            if (!this.MARK || !color) return this;
            this.MARK.setMethod('brush');
            this.MARK.setColor(color);
            return this;
        },

        /**
         * 设置橡皮擦
         * @return {this}
         */
        setEraser: function() {
            if (!this.MARK) return this;
            this.MARK.setMethod('eraser');
            return this;
        },

        /**
         * 画笔记录撤销
         * @return {this}
         */
        markCancel: function() {
            if (!this.MARK) return this;
            var len = this.MARK.undo();
            if (len === 0) $('#cancel').addClass('disabled');
            this.setPenLine(this.penStyle.line).setPenStyle(this.penStyle.color);

            // 发送指令
            var send = {
                type: 'imageOperate',
                operate: 'cancel',
                classId: this.classId
            };
            // $M.fire(this.MineView, 'socket.emit', { params: send });
            var params = send;
            var message = {
                "method": "emit",
                "params": JSON.stringify(params)
            };
            if (window.webkit && window.webkit.messageHandlers) {
                window.webkit.messageHandlers.interOp.postMessage(message);
            } else if (WebViewJavascriptBridge) {
                WebViewJavascriptBridge.postMessage(message)
            }

            return this;
        },

        /**
         * 清楚所有
         * @return {this}
         */
        clearAll: function() {
            var _this = this;

            plus.nativeUI.actionSheet({
                cancel: "取消",
                buttons: [{ title: '清除所有' }]
            }, function(e) {
                if (e.index === 1) {
                    _this.empty();
                }
            });

            return this;
        },
        showimg: function(src) {
            var _this = this;
            whiteboard.empty();
            var params = { type: 'imageOperate', operate: 'reload', noInternet: false, img: src };
            var message = {
                "method": "emit",
                "params": JSON.stringify(params)
            };
            if (window.webkit && window.webkit.messageHandlers) {
                window.webkit.messageHandlers.interOp.postMessage(message);
            } else if (WebViewJavascriptBridge) {
                WebViewJavascriptBridge.postMessage(message)
            }


            whiteboard.imgSrc = src;
            whiteboard.createImg(true);

            return this;
        },
        /**
         * 清空画板
         * @return {this}
         */
        empty: function(params) {

            this.MARK.empty();
            $('#eraser').removeClass('current');
            $('#cancel').addClass('disabled');
            $('#pen').addClass('current');
            this.setPen();

            // 发送指令
            var send = {
                type: 'imageOperate',
                operate: params ? params.operateType : 'empty'
            };

            if (params) {
                if (params.isLocal) {
                    send.img = params.isLocal + params.filename;
                } else {
                    send.img = params.url;
                }
            }

            send.classId = this.classId;

            var params = send;
            var message = {
                "method": "emit",
                "params": JSON.stringify(params)
            };
            if (window.webkit && window.webkit.messageHandlers) {
                window.webkit.messageHandlers.interOp.postMessage(message);
            } else if (WebViewJavascriptBridge) {
                WebViewJavascriptBridge.postMessage(message)
            }

            // $M.fire(this.MineView, 'socket.emit', { params: send });

            return this;
        },

        /**
         * 工具条
         * @return {this}
         */
        toolbar: function(elem) {
            var $elem = $(elem),
                $panel = $('#panel-wrap'),
                $list = $('.rollback > ul > li > a'),
                has = $elem.hasClass('current'),
                isOpen = $panel.hasClass('current');

            if (has) {
                // 已是选中状态 面板打开
                $panel[isOpen ? 'removeClass' : 'addClass']('current');
            } else {
                // 设置画笔状态
                $list.removeClass('current');
                $elem.addClass('current');
                this.setPen();
            }

            return this;
        },

        /**
         * 工具条事件
         * @return {this}
         */
        events: function() {
            var _this = this;

            $('.icon-fanhui').on('touchend', function() {
                var message = { "method": "tapback" };
                if (window.webkit && window.webkit.messageHandlers) {
                    window.webkit.messageHandlers.interOp.postMessage(message);
                } else if (WebViewJavascriptBridge) {
                    WebViewJavascriptBridge.back()
                }

            });
            // 画笔事件
            $('#pen').on('touchend', function(e) {
                e.preventDefault();
                _this.toolbar(this);
            });


            // 橡皮擦事件
            $('#eraser').on('longTap', function(e) {
                var message = { "method": "longTap" };
                if (window.webkit && window.webkit.messageHandlers) {
                    window.webkit.messageHandlers.interOp.postMessage(message);
                } else if (WebViewJavascriptBridge) {
                    WebViewJavascriptBridge.postMessage(message)
                }

            });
            // 橡皮擦事件
            $('#eraser').on('touchend', function(e) {
                e.preventDefault();
                var $elem = $(this),
                    has = $elem.hasClass('current'),
                    $list = $('.rollback > ul > li > a, #panel-wrap');

                $list.removeClass('current');
                $elem.addClass('current');

                _this[has ? 'clearAll' : 'setEraser']();
            });

            $('#cancel').on('touchstart', function(e) {
                $(this).addClass('current');
            });

            // 撤销事件
            $('#cancel').on('touchend', function(e) {
                e.preventDefault();

                var $elem = $(this),
                    $list = $('.rollback > ul > li > a, #panel-wrap');

                $list.removeClass('current');
                $elem.removeClass('current');
                $('#pen').addClass('current');
                $('#eraser-box').css({ 'visibility': 'hidden' });

                _this.markCancel();
            });

            // 设置画笔粗细
            $('#pen-line > a').on('touchend', function(e) {
                e.preventDefault();
                var $elem = $(this),
                    line = Number($elem.attr('class').replace('line-', '').replace('current', ''));

                $elem.addClass('current').siblings().removeClass('current');
                $('#panel-wrap').removeClass('current');

                $('#pen-line-text').text('0' + line);
                _this.setPenLine(line);
                _this.penStyle.line = line;

                window.localStorage["penInfo"] = JSON.stringify(_this.penStyle);
            });

            // 设置画笔颜色
            $('#color-list > a').on('touchend', function(e) {
                e.preventDefault();

                var $elem = $(this),
                    color = $elem.children('span').css('background-color');

                $elem.addClass('current').siblings().removeClass('current');
                $('#panel-wrap').removeClass('current');
                $('#pen').css('color', color);
                $('#pen-line span').css('background-color', color);

                _this.setPenStyle(color);
                _this.penStyle.color = color;

                window.localStorage["penInfo"] = JSON.stringify(_this.penStyle);
            });

            // 设置课堂互动
            $('#classRoom').on('touchend', function() {
                var $elem = $(this),
                    $list = $('.rollback > ul > li > a'),
                    has = $elem.hasClass('current');

                $('#panel-wrap').removeClass('current');
                $('#class-add-list').removeClass('current');

                $list.removeClass('current');
                $elem[has ? 'removeClass' : 'addClass']('current');

                //遮罩层的显示
                $('.mask_layer').show();

                $('#class-list-type')[has ? 'removeClass' : 'addClass']('show');
                if (has) {
                    _this.setPen();
                    $('#pen').addClass('current');
                }
            });

            //旋转
            $('#rotate').on('touchend', function() {
                _this.rotateAngle += 90;
                _this.rotateAngle = _this.rotateAngle % 360;

                var cx = window.innerWidth / 2,
                    cy = (window.innerHeight - 40) / 2;

                var dx = cx - cx * Math.cos(_this.rotateAngle / 180 * Math.PI) + cy * Math.sin(_this.rotateAngle / 180 * Math.PI);
                var dy = cy - cy * Math.cos(_this.rotateAngle / 180 * Math.PI) - cx * Math.sin(_this.rotateAngle / 180 * Math.PI);

                $('.rotate-box').css('left', dx + 'px').css('top', dy + 'px').css('-webkit-transform-origin', '0% 0%').css('-webkit-transform', 'rotate(' + _this.rotateAngle + 'deg)');

                if (_this.rotateAngle == 0 || _this.rotateAngle == 180) {
                    $('.whiteborad-img').css('left', '0px').css('top', '0px').css('-webkit-transform-origin', '0% 0%').css('-webkit-transform', 'scale(1)');
                } else {
                    $('.whiteborad-img').css('left', _this.size.landscapeLeft + 'px').css('top', _this.size.landscapeTop + 'px').css('-webkit-transform-origin', '0% 0%').css('-webkit-transform', 'scale(' + _this.size.landscapeScale + ')');
                }

                _this.zoomRecord = 1;

                //存储笔画的历史记录
                _this.historyMark[_this.index] = _this.MARK.historyStroker;

                _this.MARK.empty();

                var cx = window.innerWidth * 1 / 2,
                    cy = (window.innerHeight - 40) * 1 / 2;

                var dx = cx - cx * Math.cos(_this.rotateAngle / 180 * Math.PI) + cy * Math.sin(_this.rotateAngle / 180 * Math.PI);
                var dy = cy - cy * Math.cos(_this.rotateAngle / 180 * Math.PI) - cx * Math.sin(_this.rotateAngle / 180 * Math.PI);

                if (_this.rotateAngle == 0 || _this.rotateAngle == 180) {
                    _this.MARK.scaleAfterSet(1, 0, 0, 1, dx, dy, _this.rotateAngle);
                } else {
                    _this.MARK.scaleAfterSet(1, _this.size.landscapeLeft, _this.size.landscapeTop, _this.size.landscapeScale, dx, dy, _this.rotateAngle);
                }

                // 获取画板历史记录重绘路径
                if (_this.historyMark[_this.index] && _this.historyMark[_this.index] && _this.MARK) {
                    _this.MARK.historyStroker = _this.historyMark[_this.index];
                    _this.MARK.redraw();
                }

                if (_this.rotateAngle == 0 || _this.rotateAngle == 180) {
                    var params = {
                        type: 'imageOperate',
                        operate: 'rotate',
                        scale: _this.size.landscapeScale,
                        angle: _this.rotateAngle,
                        left: 0,
                        top: 0
                    }
                    var message = {
                        "method": "emit",
                        "params": JSON.stringify(params)
                    };
                    if (window.webkit && window.webkit.messageHandlers) {
                        window.webkit.messageHandlers.interOp.postMessage(message);
                    } else if (WebViewJavascriptBridge) {
                        WebViewJavascriptBridge.postMessage(message)
                    }

                    // $M.fire(_this.MineView, 'socket.emit', { params: { type: 'imageOperate', operate: 'rotate', scale: _this.size.landscapeScale, angle: _this.rotateAngle, left: 0, top: 0 } });

                } else {

                    // $M.fire(_this.MineView, 'socket.emit', { params: { type: 'imageOperate', operate: 'rotate', scale: _this.size.landscapeScale, angle: _this.rotateAngle, left: _this.size.landscapeLeft, top: _this.size.landscapeTop } });

                    var params = {
                        type: 'imageOperate',
                        operate: 'rotate',
                        scale: _this.size.landscapeScale,
                        angle: _this.rotateAngle,
                        left: _this.size.landscapeLeft,
                        top: _this.size.landscapeTop
                    };
                    var message = {
                        "method": "emit",
                        "params": JSON.stringify(params)
                    };
                    if (window.webkit && window.webkit.messageHandlers) {
                        window.webkit.messageHandlers.interOp.postMessage(message);
                    } else if (WebViewJavascriptBridge) {
                        WebViewJavascriptBridge.postMessage(message)
                    }

                }

            });

            // 课堂互动事件
            $('#class-list-type > ul > li').on('touchend', function(e) {
                e.preventDefault();
                var $elem = $(this),
                    type = $elem.find('a').attr('id');

                if (type == 'vote') {
                    return;
                }

                if (type == 'discuss') {
                    type = 'class-' + type;
                }

                $M.openWindow({
                    url: '/view/teacher/' + type + '/' + type + '.html',
                    id: 'teacher-' + type,
                    extras: {
                        fromRes: true,
                        courseId: _this.courseId,
                        classId: _this.classId
                    }
                });

                $('.rollback > ul > li > a').removeClass('current');
                $('#pen').addClass('current');
                $('#class-list-type').removeClass('show');

                $('.mask_layer').hide();
            });

            //课堂互动的取消
            $('.class-list-type .icon-close').on('touchend', function() {
                $('#class-list-type').removeClass('show');
                $('#classRoom').removeClass('current');
                $('.mask_layer').hide();
            });

            // 工具栏事件
            $('#class-add').on('touchend', function(e) {
                var $elem = $(this),
                    $list = $('.rollback > ul > li > a'),
                    has = $('#class-add-list').hasClass('current');
                $('#mask_layer').show();
                $('#panel-wrap').removeClass('current');
                $('#class-list-type').removeClass('show');
                $list.removeClass('current');
                $('#class-add-list')[has ? 'removeClass' : 'addClass']('current');

                if (has) {
                    _this.setPen();
                    $('#pen').addClass('current');
                }

            });

            $('#class-add-list').on('touchend', '.icon-close', function() {
                $('#pen').addClass('current');
                $('#class-add-list').removeClass('current');
                $('#mask_layer').hide();
            });

            // 空白板
            $('#create-whiteboard').on('touchend', function() {
                $('#class-add-list').removeClass('current');
                $('#mask_layer').hide();
                _this.empty();
                $('.whiteborad-wrap').removeAttr('style');
                $('#whiteboard-img').html('');
                $('#class-add-list').removeClass('current');
                var params = { type: 'imageOperate', operate: 'reload', noInternet: false, img: '' };
                var message = {
                    "method": "emit",
                    "params": JSON.stringify(params)
                };
                if (window.webkit && window.webkit.messageHandlers) {
                    window.webkit.messageHandlers.interOp.postMessage(message);
                } else if (WebViewJavascriptBridge) {
                    WebViewJavascriptBridge.postMessage(message)
                }

            });

            // 选取照片
            $('#create-select-photo').on('touchend', function() {
                $('#class-add-list').removeClass('current');
                $('#mask_layer').hide();
                var message = { "method": "selectPicture" };
                if (window.webkit && window.webkit.messageHandlers) {
                    window.webkit.messageHandlers.interOp.postMessage(message);
                } else if (WebViewJavascriptBridge) {
                    WebViewJavascriptBridge.postMessage(message)
                }

                // plus.gallery.pick(function(e) {
                //     if (e.files.length > 1) {
                //         plus.nativeUI.toast('最多只能选择一张图片');
                //         return false;
                //     }
                //     plus.nativeUI.closeWaiting();
                //     whiteboard.empty();
                //     whiteboard.imgSrc = e.files[0];
                //     whiteboard.createImg(true);
                //     // _this.getPc(e.files[0]);
                // }, function() {}, { filter: "image", multiple: true });

            });

            // 拍摄照片
            $('#create-camera').on('touchend', function() {
                $('#class-add-list').removeClass('current');
                $('#mask_layer').hide();
                // var cmr = plus.camera.getCamera(),
                //     date = Number(new Date());
                // cmr.captureImage(function(file) {
                //     plus.zip.compressImage({
                //         src: file,
                //         dst: app.dir.cache + date + '.' + file.match(/[^\.]+$/)[0],
                //         overwrite: true,
                //         quality: 60
                //     }, function(e) {
                //         //_this.getPc(e.target, true);
                //         plus.nativeUI.closeWaiting();
                //         whiteboard.empty();
                //         whiteboard.imgSrc = e.target;
                //         whiteboard.createImg(true);
                //     }, function(e) {
                //         plus.nativeUI.toast('获取照片失败')
                //     });
                // });
                var message = { "method": "selectCamera" };
                if (window.webkit && window.webkit.messageHandlers) {
                    window.webkit.messageHandlers.interOp.postMessage(message);
                } else if (WebViewJavascriptBridge) {
                    WebViewJavascriptBridge.postMessage(message)
                }

                $('#class-add-list').removeClass('current');
            });

            window.addEventListener('getPcInfo', function(e) {
                //var pc = e.detail.info;
                if (e.detail.info) {
                    _this.PC = e.detail.info;
                }
                _this.uploadImg();
            }, false);

            // 缩放 缩小结束
            $('.whiteborad-wrap').on('pinchIn', function(e) {
                var $div = $('.whiteborad-wrap .whiteborad-img');

                e.preventDefault();

                if (_this.isScroll) return;

                _this.zoomRecord = _this.zoomRecordTemp;
                _this.isScaling = false;

                //图片缩小后 发送放大指令
                // $M.fire(_this.MineView, 'socket.emit', { params: { type: 'imageOperate', operate: 'zoom', scale: _this.zoomRecord, left: parseInt($div.css('left'), 10) / _this.zoomRecord, top: parseInt($div.css('top'), 10) / _this.zoomRecord } });
                var params = {
                    type: 'imageOperate',
                    operate: 'zoom',
                    scale: _this.zoomRecord,
                    left: parseInt($div.css('left'), 10) / _this.zoomRecord,
                    top: parseInt($div.css('top'), 10) / _this.zoomRecord
                };
                var message = {
                    "method": "emit",
                    "params": JSON.stringify(params)
                };
                if (window.webkit && window.webkit.messageHandlers) {
                    window.webkit.messageHandlers.interOp.postMessage(message);
                } else if (WebViewJavascriptBridge) {
                    WebViewJavascriptBridge.postMessage(message)
                }


                var scapeScale = 1;
                if (_this.rotateAngle == 90 || _this.rotateAngle == 270) {
                    scapeScale = _this.size.landscapeScale;
                }

                var cx = window.innerWidth * _this.zoomRecord / 2,
                    cy = (window.innerHeight - 40) * _this.zoomRecord / 2;

                var dx = cx - cx * Math.cos(_this.rotateAngle / 180 * Math.PI) + cy * Math.sin(_this.rotateAngle / 180 * Math.PI);
                var dy = cy - cy * Math.cos(_this.rotateAngle / 180 * Math.PI) - cx * Math.sin(_this.rotateAngle / 180 * Math.PI);

                _this.MARK.scaleAfterSet(_this.zoomRecord, parseInt($div.css('left'), 10), parseInt($div.css('top'), 10), scapeScale, dx, dy, _this.rotateAngle);
            });

            // 缩放中
            $('.whiteborad-wrap').on('pinching', function(e) {

                e.preventDefault();
                if (_this.isScroll) return;

                _this.zoomInertia(e);
            });

            //缩放放大结束
            $('.whiteborad-wrap').on('pinchOut', function(e) {

                var $div = $('.whiteborad-wrap .whiteborad-img');

                e.preventDefault();

                if (_this.isScroll) return;

                _this.zoomRecord = _this.zoomRecordTemp;
                _this.isScaling = false;

                //图片放大后 发送放大指令
                // $M.fire(_this.MineView, 'socket.emit', { params: { type: 'imageOperate', operate: 'zoom', scale: _this.zoomRecord, left: parseInt($div.css('left'), 10) / _this.zoomRecord, top: parseInt($div.css('top'), 10) / _this.zoomRecord } });

                var params = {
                    type: 'imageOperate',
                    operate: 'zoom',
                    scale: _this.zoomRecord,
                    left: parseInt($div.css('left'), 10) / _this.zoomRecord,
                    top: parseInt($div.css('top'), 10) / _this.zoomRecord
                };
                var message = {
                    "method": "emit",
                    "params": JSON.stringify(params)
                };
                if (window.webkit && window.webkit.messageHandlers) {
                    window.webkit.messageHandlers.interOp.postMessage(message);
                } else if (WebViewJavascriptBridge) {
                    WebViewJavascriptBridge.postMessage(message)
                }


                var scapeScale = 1;
                if (_this.rotateAngle == 90 || _this.rotateAngle == 270) {
                    scapeScale = _this.size.landscapeScale;
                }

                var cx = window.innerWidth * _this.zoomRecord / 2,
                    cy = (window.innerHeight - 40) * _this.zoomRecord / 2;

                var dx = cx - cx * Math.cos(_this.rotateAngle / 180 * Math.PI) + cy * Math.sin(_this.rotateAngle / 180 * Math.PI);
                var dy = cy - cy * Math.cos(_this.rotateAngle / 180 * Math.PI) - cx * Math.sin(_this.rotateAngle / 180 * Math.PI);

                _this.MARK.scaleAfterSet(_this.zoomRecord, parseInt($div.css('left'), 10), parseInt($div.css('top'), 10), scapeScale, dx, dy, _this.rotateAngle);
            });

            return this;
        },



        /**
         * 缩放图片
         * @return {this}
         */
        zoomInertia: function(e) {
            e.preventDefault();

            var _this = this,
                scale, nScale,
                left = 0, //图片的距离顶部的位置
                top = 0,
                scaleTopY = 0,
                scaleLeftX = 0, //图片距离左边缘的位置
                pointX, pointY, nPointX, nPointY, nMiddlePoint, middlePoint,
                isMove = false, //是否为平移图片
                $div = $('.whiteborad-wrap .whiteborad-img'),
                mark = _this.MARK;

            if (!_this.isScaling) {
                _this.isScaling = true;

                //缩放之前的图片的left 与 top 值
                _this.scalingLeft = parseInt($div.css('left'), 10);
                _this.scalingTop = parseInt($div.css('top'), 10);

                //图片缩放的起始位置
                _this.startPoints = e.touch.touches;

                //存储笔画的历史记录
                _this.historyMark[_this.historyPage] = mark.historyStroker;
            }

            //获取两点之间的位置
            var getPointsDistance = function(point1, point2) {
                var x = point1.x - point2.x;
                var y = point1.y - point2.y;

                return Math.sqrt(x * x + y * y);
            };

            //缩放的起始位置的以及中点
            pointX = (_this.startPoints[0].x + _this.startPoints[1].x) / 2;
            pointY = (_this.startPoints[0].y + _this.startPoints[1].y) / 2;
            middlePoint = { x: pointX, y: pointY };

            //缩放后的位置以及中点
            nPointX = (e.touch.touches[0].x + e.touch.touches[1].x) / 2;
            nPointY = (e.touch.touches[0].y + e.touch.touches[1].y) / 2;
            nMiddlePoint = { x: nPointX, y: nPointY };

            var d1 = getPointsDistance(_this.startPoints[0], _this.startPoints[1]);
            var d2 = getPointsDistance(e.touch.touches[0], e.touch.touches[1]);

            if (d1 + 3 > d2 && d1 - 3 < d2) {
                scale = 1;
                isMove = true;
            } else {
                scale = d2 / d1;
            }

            //放大后的倍数
            nScale = _this.zoomRecord * scale;

            if (nScale > 1) {
                //偏移位置的计算
                var cx = nPointX - pointX * scale;
                var cy = nPointY - pointY * scale;

                var dx = cx * Math.cos(_this.rotateAngle * Math.PI / 180) + cy * Math.sin(_this.rotateAngle * Math.PI / 180);
                var dy = cy * Math.cos(_this.rotateAngle * Math.PI / 180) - cx * Math.sin(_this.rotateAngle * Math.PI / 180);

                scaleLeftX = _this.scalingLeft * scale + dx;
                scaleTopY = _this.scalingTop * scale + dy;
            } else {
                nScale = 1;
                _this.zoomRecord = 1;

                if (_this.rotateAngle == 0 || _this.rotateAngle == 180) {
                    scaleLeftX = 0;
                    scaleTopY = 0;
                } else {
                    scaleLeftX = _this.size.landscapeLeft;
                    scaleTopY = _this.size.landscapeTop;
                }
            }

            //记录放大后的总的倍数
            _this.zoomRecordTemp = nScale;

            //清空之前的笔画
            _this.MARK.empty();

            $div.css('transition', '-webkit-transform 0ms ease 0s');
            $div.css('transform-origin', '0% 0%');

            var scapeScale = 1;
            if (_this.rotateAngle == 0 || _this.rotateAngle == 180) {
                $div.css('transform', 'scale(' + nScale + ')');
            } else {
                scapeScale = _this.size.landscapeScale;
                $div.css('transform', 'scale(' + nScale * scapeScale + ')');
            }

            var cx = window.innerWidth * nScale / 2,
                cy = (window.innerHeight - 40) * nScale / 2;

            var dx = cx - cx * Math.cos(_this.rotateAngle / 180 * Math.PI) + cy * Math.sin(_this.rotateAngle / 180 * Math.PI);
            var dy = cy - cy * Math.cos(_this.rotateAngle / 180 * Math.PI) - cx * Math.sin(_this.rotateAngle / 180 * Math.PI);
            $('.rotate-box').css('left', dx + 'px').css('top', dy + 'px');

            $div.css('left', scaleLeftX + 'px');
            $div.css('top', scaleTopY + 'px');

            _this.MARK.scaleAfterSet(nScale, scaleLeftX, scaleTopY, scapeScale, dx, dy, _this.rotateAngle);

            // 获取画板历史记录重绘路径
            if (_this.historyMark[_this.historyPage] && _this.MARK) {
                _this.MARK.historyStroker = _this.historyMark[_this.historyPage];
                _this.MARK.redraw();
            }

            //如果为平移图片的话 单独发送同屏的指令
            if (isMove) {
                var params = {
                    type: 'imageOperate',
                    operate: 'zoom',
                    scale: nScale,
                    left: parseInt($div.css('left'), 10) / nScale,
                    top: parseInt($div.css('top'), 10) / nScale
                };
                var message = {
                    "method": "emit",
                    "params": JSON.stringify(params)
                };
                if (window.webkit && window.webkit.messageHandlers) {
                    window.webkit.messageHandlers.interOp.postMessage(message);
                } else if (WebViewJavascriptBridge) {
                    WebViewJavascriptBridge.postMessage(message)
                }

                // $M.fire(_this.MineView, 'socket.emit', { params: { type: 'imageOperate', operate: 'zoom', scale: nScale, left: parseInt($div.css('left'), 10) / nScale, top: parseInt($div.css('top'), 10) / nScale } });
            }

            return this;
        },

        getPc: function(file, isUseCmr) {
            this.uploadFile = file;
            this.isUseCmr = isUseCmr;
            var view = plus.webview.getWebviewById('mine-list');
            $M.fire(view, 'getPcInfo', { source: 'teacher-whiteboard' });
            return this;
        },

        /**
         * 上传图片
         * @return {this}
         * @param {Object} file
         */


        /**
         * 初始化画布
         * @return {this}
         */
        mark: function() {
            var _this = this,
                $wrap = $('.whiteborad-wrap'),
                $eraser = $('#eraser-box'),
                color = _this.penStyle.color ? _this.penStyle.color : 'rgb(237, 69, 59)',
                line = _this.penStyle.line ? _this.penStyle.line : 1,
                $color;

            this.canvas = document.getElementById('whiteboard-canvas');
            this.canvas.width = parseInt($wrap.css('width'), 10);
            this.canvas.height = parseInt($wrap.css('height'), 10);

            // 笔迹的粗细 与 颜色的设置
            var $line = $(".line-" + line);

            $('#pen-line > a').removeClass('current');
            $line.addClass('current');

            $('#panel-wrap').removeClass('current');
            $('#class-add-list').removeClass('current');
            $('#class-list-type').removeClass('show');

            $('#pen-line-text').text('0' + line);

            $.each($("#color-list a"), function(i, v) {
                if ($(v).find('span').css('background-color') == color) {
                    $color = $(v);
                    return;
                }
            })

            if ($color) {
                $('#color-list > a').removeClass('current');
                $color.addClass('current');

                $('#panel-wrap').removeClass('current');
                $('#class-add-list').removeClass('current');
                $('#class-list-type').removeClass('show');

                $('#pen').css('color', color);
                $('#pen-line span').css('background-color', color);
            }

            this.MARK = Mark({
                canvas: this.canvas,
                color: color,
                style: {},
                line: {
                    Width: line,
                    Jons: 'round',
                    Cep: 'round'
                },
                before: function() {
                    var x = this.lastX,
                        y = this.lastY;

                    if (this.isEraser) {
                        $eraser.css({ display: 'none', top: y, left: x });
                    }
                },
                move: function() {
                    var x = this.lastX,
                        y = this.lastY;

                    if (this.isEraser) {
                        $eraser.css({ display: 'none', top: y, left: x });
                    }

                },
                after: function() {
                    $('#cancel').removeClass('disabled');
                    if (this.isEraser) {
                        $eraser.css({ display: 'none', top: -40, left: -40 });
                    }

                    var length = this.historyStroker.length,
                        val = this.historyStroker[length - 1],
                        send = {
                            type: 'imageOperate',
                            operate: 'pen',
                            points: length && val
                        };

                    if (!val) return;

                    if (this.isSinglePoint) return;

                    if (val.type === 'eraser') {
                        send.size = { width: 30, height: 30 };
                        send.points.color = '#000000';
                    } else {
                        send.width = this.context.lineWidth;
                        send.color = this.config.color;
                    }

                    // $M.fire(_this.MineView, 'socket.emit', { params: send });
                    var params = send;
                    var message = {
                        "method": "emit",
                        "params": JSON.stringify(params)
                    };
                    if (window.webkit && window.webkit.messageHandlers) {
                        window.webkit.messageHandlers.interOp.postMessage(message);
                    } else if (WebViewJavascriptBridge) {
                        WebViewJavascriptBridge.postMessage(message)
                    }
                }
            });

            return this;
        },

        /**
         * 创建图片
         * @return {this}
         */
        createImg: function(isNew) {
            var _this = this,
                width, height, imgScale, h, w, left = 0,
                top = 0,
                screenW, screenH, scrrenScale,
                $div = $('.whiteborad-wrap .whiteborad-img');

            this.zoomRecord = 1; //图片的放大倍数
            this.zoomRecordTemp = 1; //一次缩放的倍数

            // 设置背景色
            $('.whiteborad-wrap').css('background', '#000000');

            var img = new Image();
            img.src = this.imgSrc;
            img.onload = function() {
                    width = img.width;
                    height = img.height;
                    imgScale = height / width;
                    screenW = window.innerWidth;
                    screenH = window.innerHeight - 40;
                    scrrenScale = screenH / screenW;

                    //当屏幕的宽高比例 小于 图片的宽高比例时设置图片的宽高
                    if (scrrenScale < imgScale) {
                        w = parseInt(width * screenH / height);
                        h = screenH;
                    }

                    //当屏幕的宽高比例 大于 图片的宽高比例时设置图片的宽高
                    if (scrrenScale > imgScale) {
                        h = parseInt(height * screenW / width);
                        w = screenW;
                    }

                    if (screenW > w) {
                        left = Math.floor((screenW - w) / 2);
                    }

                    if (screenH - 40 > h) {
                        top = Math.floor((screenH - 40 - h) / 2);
                    }

                    $('#whiteboard-img').html('<img src="' + _this.imgSrc + '" style="height:' + h + 'px;width:' + w + 'px;left:' + left + 'px;top:' + top + 'px;position:absolute"/>');

                    var landscapeScale,
                        $img = $('.whiteborad-img').find('img'),
                        height = parseInt($img.css('height'), 10),
                        width = parseInt($img.css('width'), 10);

                    if (height / width > window.innerWidth / (window.innerHeight - 40)) {
                        landscapeScale = window.innerWidth / height;
                    } else {
                        landscapeScale = (window.innerHeight - 40) / width;
                    }

                    var landscapeLeft = window.innerWidth * (1 - landscapeScale) / 2;
                    var landscapeTop = (window.innerHeight - 40) * (1 - landscapeScale) / 2;

                    _this.size.landscapeScale = landscapeScale;
                    _this.size.landscapeLeft = landscapeLeft;
                    _this.size.landscapeTop = landscapeTop;

                    if (isNew) {
                        _this.zoomRecord = 1;

                        $div.css('transition', '-webkit-transform 0ms ease 0s');
                        $div.css('transform-origin', '0% 0%');
                        $div.css('transform', 'scale(1)');
                        $div.css('left', '0px');
                        $div.css('top', '0px');
                    }
                }
                //适当延迟是为了读取img的width与height属性 （不延迟无法读取）


            return this;
        },

        loadimg: function() {
            var message = { "method": "loadimg" };
            if (window.webkit && window.webkit.messageHandlers) {
                window.webkit.messageHandlers.interOp.postMessage(message);
            } else if (WebViewJavascriptBridge) {
                WebViewJavascriptBridge.postMessage(message)
            }

            return this;
        },
        setimgsrc: function(r) {
            var _this = this;
            _this.imgSrc = r;
            if (r) {
                _this.createImg(false);
                var params = { type: 'imageOperate', operate: 'reload', noInternet: false, img: r };
                var message = {
                    "method": "emit",
                    "params": JSON.stringify(params)
                };
                if (window.webkit && window.webkit.messageHandlers) {
                    window.webkit.messageHandlers.interOp.postMessage(message);
                } else if (WebViewJavascriptBridge) {
                    WebViewJavascriptBridge.postMessage(message)
                }

            }

            return this;
        },
        /**
         * 载入
         * @return {this}
         */
        init: function() {
            var _this = this;

            this.penInfo = window.localStorage['penInfo'];
            this.penStyle = this.penInfo ? JSON.parse(this.penInfo) : {};

            this.isPcLocal = false;
            this.pcLocalUrl = '';
            this.isRes = false;
            this.openClassId = '';
            this.isdesign = '';
            this.isLock = false;
            this.callback = null;
            this.isFromeFace = false;
            this.isFromeStrom = false;
            this.historyMark = {};
            this.historyPage = 1;
            this.isScaling = false; //标识是否已开始缩放
            this.scalingLeft = 0; //标识上次缩放时div的left属性值
            this.scalingTop = 0; //标识上次缩放时div的top属性值
            this.startPoints = {}; // 图片缩放的起始位置
            this.zoomRecord = 1; //图片的放大倍数
            this.zoomRecordTemp = 1; //一次缩放的倍数
            this.rotateAngle = 0; //旋转的角度的初始值
            this.size = {}; //存储旋转PPT是需要的基础信息

            // 判断图片是否存在
            if (this.imgSrc) {
                this.createImg(false);
            }

            setTimeout(function() {
                // 初始化白板及事件
                _this.mark().events();

                // 执行传来的回调
                // 先注释，备用
                if (_this.callback) {
                    var callback = new Function(_this.callback);
                    callback.apply(_this);
                }
            }, 800);

            this.loadimg();

            return this;
        }
    };




    whiteboard.init();
    window.whiteboard = whiteboard;

}(mui, Zepto));