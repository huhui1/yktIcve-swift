/**
 * 资源预览 - 文档
 * @param {Object} $M => mui
 * @param {Object} $  => quo
 * @name  zqyou
 * @date  2017-03-04
 * @return {Object}
 */
(function($M, $) {


    var preview = {
        /**
         * 获取资源预览
         * @return {this}
         */
        get: function() {
            var _this = this;

            _this.load(_this.resourceUrl);
            return this;
        },

        /**
         * 纯图片的PPT的播放
         * @return {this}
         */
        loadImgPPT: function(data) {
            var _this = this,
                word = ['doc', 'docx', 'txt', 'pdf'];
            // 初始化组件
            setTimeout(function() {
                _this.MP = MPreview({
                    data: data.imgs,
                    wrap: '#overlay',
                    penInfo: _this.penInfo,
                    from: _this.from,
                    title: data.title,
                    direction: word.indexOf(data.ext) > -1 ? 'top' : 'left',
                    placeholder: '/img/placeholder.gif',
                    close: function() {
                        // $M.fire(mineList, 'socket.emit', { params: { type: 'closeRes' } });
                        // $M.back();
                        var message = { "method": "back" };
                        WebViewJavascriptBridge.back();
                        // window.webkit.messageHandlers.interOp.postMessage(message);
                        return false;
                    },
                    page: function(page) {
                        _this.historyPage = page;
                        var params = { type: 'jumpPage', cellId: _this.cellId, classId: _this.classId, courseId: _this.courseId, page: page };
                        var message = {
                            "method": "emit",
                            "params": JSON.stringify(params)
                        };
                        WebViewJavascriptBridge.postMessage(message)
                            // window.webkit.messageHandlers.interOp.postMessage(message);
                            // $M.fire(mineList, 'socket.emit', { params: { type: 'jumpPage', cellId: _this.cellId, classId: _this.classId, courseId: _this.courseId, page: page } });
                    },
                    scale: function(scale, left, top) {
                        var params = { type: 'imageOperate', operate: 'zoom', scale: scale, left: left / scale, top: top / scale };
                        var message = {
                            "method": "emit",
                            "params": JSON.stringify(params)
                        };
                        WebViewJavascriptBridge.postMessage(message)
                            // window.webkit.messageHandlers.interOp.postMessage(message);
                            // $M.fire(mineList, 'socket.emit', { params: { type: 'imageOperate', operate: 'zoom', scale: scale, left: left / scale, top: top / scale } });
                    },
                    rotate: function(scale, angle, left, top) {
                        var params = { type: 'imageOperate', operate: 'rotate', scale: scale, angle: angle, left: left, top: top };
                        var message = {
                            "method": "emit",
                            "params": JSON.stringify(params)
                        };
                        WebViewJavascriptBridge.postMessage(message)
                            // window.webkit.messageHandlers.interOp.postMessage(message);
                            // $M.fire(mineList, 'socket.emit', { params: { type: 'imageOperate', operate: 'rotate', scale: scale, angle: angle, left: left, top: top } });
                    },
                    move: function(scale, x, y, screen) {
                        var params = { type: 'move', cellId: _this.cellId, classId: _this.classId, courseId: _this.courseId, scale: scale, x: x, y: y, screen: screen };
                        var message = {
                            "method": "emit",
                            "params": JSON.stringify(params)
                        };
                        WebViewJavascriptBridge.postMessage(message)
                            // window.webkit.messageHandlers.interOp.postMessage(message);
                            // $M.fire(mineList, 'socket.emit', { params: { type: 'move', cellId: _this.cellId, classId: _this.classId, courseId: _this.courseId, scale: scale, x: x, y: y, screen: screen } });
                    },
                    markBefore: function() {

                    },
                    markMove: function() {

                    },
                    markAfter: function() {
                        var length = this.historyStroker.length,
                            val = this.historyStroker[length - 1],
                            send = {
                                type: 'imageOperate',
                                operate: val && val.type,
                                points: length && val
                            };

                        if (!length) return;

                        if (this.isSinglePoint) return;

                        val.width = this.context.lineWidth;
                        val.color = this.context.color;

                        // 存储历史记录
                        _this.historyMark[_this.historyPage] = [];
                        _this.historyMark[_this.historyPage] = this.historyStroker;

                        if (val.type === 'eraser') {
                            send.size = { width: 30, height: 30 };
                        } else {
                            send.points.width = this.context.lineWidth;
                            send.points.color = this.config.color;
                            send.width = this.context.lineWidth;
                            send.color = this.config.color;
                        }
                        send.classId = _this.classId;
                        var params = send;
                        var message = {
                            "method": "emit",
                            "params": JSON.stringify(params)
                        };
                        WebViewJavascriptBridge.postMessage(message)
                            // window.webkit.messageHandlers.interOp.postMessage(message);
                            // $M.fire(mineList, 'socket.emit', { params: send });
                    },
                    markEmpty: function() {
                        var send = {
                            type: 'imageOperate',
                            operate: 'empty',
                            classId: _this.classId
                        };
                        var params = send;
                        var message = {
                            "method": "emit",
                            "params": JSON.stringify(params)
                        };
                        WebViewJavascriptBridge.postMessage(message)
                            // window.webkit.messageHandlers.interOp.postMessage(message);
                            // $M.fire(mineList, 'socket.emit', { params: send });
                    },
                    markCancel: function() {
                        var send = {
                            type: 'imageOperate',
                            operate: 'cancel',
                            classId: _this.classId
                        };
                        var params = send;
                        var message = {
                            "method": "emit",
                            "params": JSON.stringify(params)
                        };
                        WebViewJavascriptBridge.postMessage(message)
                            // window.webkit.messageHandlers.interOp.postMessage(message);
                            // $M.fire(mineList, 'socket.emit', { params: send });
                    },
                    whiteboard: function() {
                        $M.openWindow({
                            url: '/view/teacher/whiteboard/whiteboard.html',
                            id: 'teacher-whiteboard',
                            extras: {
                                fromRes: true,
                                courseId: _this.courseId,
                                classId: _this.classId
                            }
                        });

                        $('#class-add-list').removeClass('current');
                    },
                    selectPhoto: function() {


                        $('#class-add-list').removeClass('current');
                    },
                    camera: function() {

                        $('#class-add-list').removeClass('current');
                    },
                    selectWare: function() {
                        $M.openWindow({
                            url: '/view/teacher/select-courseware/select-courseware.html',
                            id: 'teacher-select-courseware',
                            extras: {
                                courseId: _this.courseId,
                                classId: _this.classId,
                                cellId: _this.cellId
                            }
                        });

                        $('#class-add-list').removeClass('current');
                    }
                });

                // 翻页事件
                _this.picker();

                // 判断是否有历史记录
                if (_this.HistoryList) {
                    _this.notice();
                }

            }, 800);
        },

        /**
         * 载入附件资源
         * @param {data} 附件信息
         * @return {this}
         */
        load: function(data) {
            data = JSON.parse(data);
            var _this = this,
                title = _this.title,
                url = data,
                hasZip = data.hasZip,
                R = {},
                ext = url && url.extension,
                imgExt = ['jpg', 'png', 'jpeg', 'gif', 'bmp'],
                word = ['doc', 'docx', 'txt', 'pdf'],
                ppt = ['ppt', 'pptx'];

            this.isPPTView = (ppt.indexOf(ext) > -1 && hasZip);

            // 判断是否是单张图片
            if (url.category != "img" && url.args && url.args.page_count > 0) {

                var imgs = [];

                // PPT 模式
                if (ppt.indexOf(ext) > -1 && url.isH5 == 1) {
                    setTimeout(function() {
                        _this.markTPL(url.h5PreviewUrl);

                        _this.mark().markEvent();
                    }, 800);
                }
            }

            return this;
        },

        /**
         * 关闭当前窗口
         * @return {this}
         */
        close: function() {
            var _this = this;



            return this;
        },

        /**
         * 绑定课堂互动
         * @return {this}
         */
        events: function() {
            var _this = this;

            // 活动
            $('#class-list-type > ul > li').on('touchend', function(e) {
                e.preventDefault();
                var $elem = $(this),
                    type = $elem.find('a').attr('id');

                if (type == 'vote') {
                    return;
                }

                $M.openWindow({
                    url: '/view/teacher/' + type + '/' + type + '.html',
                    id: 'teacher-' + type,
                    extras: {
                        fromRes: true,
                        courseOpenId: _this.courseOpenId,
                        openClassId: _this.openClassId
                    }
                });

                $('.rollback > ul > li > a').removeClass('current');
                $('#pen').addClass('current');
                $('#class-list-type').removeClass('show');
                $('.mask_layer').hide();
            });

            //课堂互动的取消
            $('.class-list-type .icon-close').on('touchend', function() {
                $('#class-list-type').removeClass('show');
                $('#classRoom').removeClass('current');
                $('.mask_layer').hide();
            });

            window.addEventListener('getOpenInfo', function() {
                var
                    presSettings,
                    animateIndex = -1,
                    screenW = window.innerWidth,
                    screenH = window.innerHeight,
                    screen = {};

                if (screenW > screenH) {
                    screen = { width: screenW, height: screenH };
                } else {
                    screen = { width: screenH + 20, height: screenW };
                }

                if (_this.iframeWindow) {
                    presSettings = _this.iframeWindow.presSettings;
                    animateIndex = _this.iframeWindow.getCurAnimateIndex(presSettings.CurrentSlide)
                }

                //  $M.fire(mineList, 'socket.emit', {
                //     params: {
                //         type: 'sendOpenInfo',
                //         cellId: _this.cellId,
                //         courseId: _this.courseId,
                //         classId: _this.classId,
                //         page: _this.historyPage,
                //         historys: _this.historyMark,
                //         animateIndex: animateIndex,
                //         screen: screen
                //     }
                // });
                var params = {
                    type: 'sendOpenInfo',
                    cellId: _this.cellId,
                    courseId: _this.courseId,
                    classId: _this.classId,
                    page: _this.historyPage,
                    historys: _this.historyMark,
                    animateIndex: animateIndex,
                    screen: screen
                };
                var message = {
                    "method": "emit",
                    "params": JSON.stringify(params)
                };
                WebViewJavascriptBridge.postMessage(message)
            }, false);

            // 获取PC信息
            window.addEventListener('getPcInfo', function(e) {
                var pc = e.detail.info;
                if (e.detail.info) {
                    _this.PC = e.detail.info;
                }
                _this.uploadImg();
            }, false);



            // 因旋转造成的样式的问题的修改（图片PPT或者图片从课件中选取）
            window.addEventListener('modifyAttr', function(e) {
                var attr = e.detail.attr,
                    data = JSON.parse(attr),
                    $li = $('.ui-MPreview-imglist li[data-index="' + data.index + '"]'),
                    $img = $li.find('img'),
                    type = e.detail.type || '';

                setTimeout(function() {
                    $('.ui-MPreview-wrap').css('width', data.wrapWidth).css('height', data.wrapHeight);
                    $('.ui-MPreview-view').css('top', data.viewTop).css('height', data.viewHeight);
                    $('.ui-MPreview-imglist').removeAttr('style').css('height', data.ulHeight).css('transform-origin', '50% 50% 0px');
                    $li.css('width', data.liWidth).css('height', data.liHeight);
                    $img.css('position', 'absolute').css('width', data.imgWidth).css('height', data.imgHeight).css('left', data.imgLeft).css('top', data.imgTop);
                }, type == 'video' ? 800 : 300);
            });


            // 缩放 缩小结束
            $('#overlay').on('pinchIn', '.ui-MPreview-view', function(e) {
                if (!$('#overlay .ui-MPreview-iframe').length) return;

                var $div = $('#overlay .ui-MPreview-iframe');

                e.preventDefault();

                if (_this.isScroll) return;

                _this.zoomRecord = _this.zoomRecordTemp;
                _this.isScaling = false;

                var params = { type: 'imageOperate', operate: 'zoom', scale: _this.zoomRecord, left: parseInt($div.css('left'), 10) / _this.zoomRecord, top: parseInt($div.css('top'), 10) / _this.zoomRecord };
                var message = {
                    "method": "emit",
                    "params": JSON.stringify(params)
                };
                WebViewJavascriptBridge.postMessage(message)
                    // window.webkit.messageHandlers.interOp.postMessage(message);
                    //图片缩小后 发送放大指令
                    // $M.fire(_this.MineView, 'socket.emit', { params: { type: 'imageOperate', operate: 'zoom', scale: _this.zoomRecord, left: parseInt($div.css('left'), 10) / _this.zoomRecord, top: parseInt($div.css('top'), 10) / _this.zoomRecord } });

                var scapeScale = 1;
                if (_this.rotateAngle == 90 || _this.rotateAngle == 270) {
                    scapeScale = _this.size.landscapeScale;
                }

                var cx = window.innerWidth　 * 　_this.zoomRecord / 2,
                    cy = (window.innerHeight - 40) * 　_this.zoomRecord / 2;

                var dx = cx - cx * Math.cos(_this.rotateAngle / 180 * Math.PI) + cy * Math.sin(_this.rotateAngle / 180 * Math.PI);
                var dy = cy - cy * Math.cos(_this.rotateAngle / 180 * Math.PI) - cx * Math.sin(_this.rotateAngle / 180 * Math.PI);

                _this.MARK.scaleAfterSet(_this.zoomRecord, parseInt($div.css('left'), 10), parseInt($div.css('top'), 10), scapeScale, dx, dy, _this.rotateAngle);
            });

            // 缩放中
            $('#overlay').on('pinching', '.ui-MPreview-view', function(e) {
                if (!$('#overlay .ui-MPreview-iframe').length) return;

                e.preventDefault();
                if (_this.isScroll) return;

                _this.zoomInertia(e);
            });

            //缩放放大结束
            $('#overlay').on('pinchOut', '.ui-MPreview-view', function(e) {
                if (!$('#overlay .ui-MPreview-iframe').length) return;

                var $div = $('#overlay .ui-MPreview-iframe');

                e.preventDefault();

                if (_this.isScroll) return;

                _this.zoomRecord = _this.zoomRecordTemp;
                _this.isScaling = false;

                var params = { type: 'imageOperate', operate: 'zoom', scale: _this.zoomRecord, left: parseInt($div.css('left'), 10) / _this.zoomRecord, top: parseInt($div.css('top'), 10) / _this.zoomRecord };
                var message = {
                    "method": "emit",
                    "params": JSON.stringify(params)
                };
                WebViewJavascriptBridge.postMessage(message)
                    // window.webkit.messageHandlers.interOp.postMessage(message);
                    //图片放大后 发送放大指令
                    // $M.fire(_this.MineView, 'socket.emit', { params: { type: 'imageOperate', operate: 'zoom', scale: _this.zoomRecord, left: parseInt($div.css('left'), 10) / _this.zoomRecord, top: parseInt($div.css('top'), 10) / _this.zoomRecord } });

                var scapeScale = 1;
                if (_this.rotateAngle == 90 || _this.rotateAngle == 270) {
                    scapeScale = _this.size.landscapeScale;
                }

                var cx = window.innerWidth　 * 　_this.zoomRecord / 2,
                    cy = (window.innerHeight - 40) * 　_this.zoomRecord / 2;

                var dx = cx - cx * Math.cos(_this.rotateAngle / 180 * Math.PI) + cy * Math.sin(_this.rotateAngle / 180 * Math.PI);
                var dy = cy - cy * Math.cos(_this.rotateAngle / 180 * Math.PI) - cx * Math.sin(_this.rotateAngle / 180 * Math.PI);

                _this.MARK.scaleAfterSet(_this.zoomRecord, parseInt($div.css('left'), 10), parseInt($div.css('top'), 10), scapeScale, dx, dy, _this.rotateAngle);
            });

            return this;
        },

        /**
         * 缩放图片
         * @return {this}
         */
        zoomInertia: function(e) {
            e.preventDefault();

            var _this = this,
                scale, nScale,
                left = 0, //图片的距离顶部的位置
                top = 0,
                scaleTopY = 0,
                scaleLeftX = 0, //图片距离左边缘的位置
                pointX, pointY, nPointX, nPointY, nMiddlePoint, middlePoint,
                isMove = false, //是否为平移图片
                $div = $('#overlay .img-box'),
                canvas = $div.prev().find('canvas')[0],
                mark = _this.MARK;

            if (!_this.isScaling) {
                _this.isScaling = true;

                //缩放之前的图片的left 与 top 值
                _this.scalingLeft = parseInt($div.css('left'), 10);
                _this.scalingTop = parseInt($div.css('top'), 10);

                //图片缩放的起始位置
                _this.startPoints = e.touch.touches;

                //存储笔画的历史记录
                _this.historyMark[_this.historyPage] = mark.historyStroker;
            }

            //获取两点之间的位置
            var getPointsDistance = function(point1, point2) {
                var x = point1.x - point2.x;
                var y = point1.y - point2.y;

                return Math.sqrt(x * x + y * y);
            };

            //缩放的起始位置的以及中点
            pointX = (this.startPoints[0].x + this.startPoints[1].x) / 2;
            pointY = (this.startPoints[0].y + this.startPoints[1].y) / 2;
            middlePoint = { x: pointX, y: pointY };

            //缩放后的位置以及中点
            nPointX = (e.touch.touches[0].x + e.touch.touches[1].x) / 2;
            nPointY = (e.touch.touches[0].y + e.touch.touches[1].y) / 2;
            nMiddlePoint = { x: nPointX, y: nPointY };

            var d1 = getPointsDistance(this.startPoints[0], this.startPoints[1]);
            var d2 = getPointsDistance(e.touch.touches[0], e.touch.touches[1]);

            if (d1 + 3 > d2 && d1 - 3 < d2) {
                scale = 1;
                isMove = true
            } else {
                scale = d2 / d1;
            }

            //放大后的倍数
            nScale = this.zoomRecord * scale;

            if (nScale > 1) {
                var cx = nPointX - pointX * scale;
                var cy = nPointY - pointY * scale;

                var dx = cx * Math.cos(this.rotateAngle * Math.PI / 180) + cy * Math.sin(this.rotateAngle * Math.PI / 180);
                var dy = cy * Math.cos(this.rotateAngle * Math.PI / 180) - cx * Math.sin(this.rotateAngle * Math.PI / 180);

                scaleLeftX = this.scalingLeft * scale + dx;
                scaleTopY = this.scalingTop * scale + dy;
            } else {
                nScale = 1;
                this.zoomRecord = 1;

                if (this.rotateAngle == 0 || this.rotateAngle == 180) {
                    scaleLeftX = 0;
                    scaleTopY = 0;
                } else {
                    scaleLeftX = this.size.landscapeLeft;
                    scaleTopY = this.size.landscapeTop;
                }
            }

            //记录放大后的总的倍数
            this.zoomRecordTemp = nScale;

            //清空之前的笔画
            _this.MARK.empty();

            $div.vendor('transition', '-webkit-transform 0ms ease 0s');
            $div.vendor('transform-origin', 'left top');

            var scapeScale = 1;
            if (this.rotateAngle == 0 || this.rotateAngle == 180) {
                $div.vendor('transform', 'scale(' + nScale + ')');
            } else {
                scapeScale = this.size.landscapeScale;
                $div.vendor('transform', 'scale(' + nScale * scapeScale + ')');
            }

            var cx = window.innerWidth　 * 　nScale / 2,
                cy = (window.innerHeight - 40) * 　nScale / 2;

            var dx = cx - cx * Math.cos(this.rotateAngle / 180 * Math.PI) + cy * Math.sin(this.rotateAngle / 180 * Math.PI);
            var dy = cy - cy * Math.cos(this.rotateAngle / 180 * Math.PI) - cx * Math.sin(this.rotateAngle / 180 * Math.PI);

            $('.rotate-box').css('left', dx + 'px').css('top', dy + 'px');

            $div.vendor('left', scaleLeftX + 'px');
            $div.vendor('top', scaleTopY + 'px');

            _this.MARK.scaleAfterSet(nScale, scaleLeftX, scaleTopY, scapeScale, dx, dy, this.rotateAngle);

            // 获取画板历史记录重绘路径
            if (_this.historyMark[_this.historyPage] && _this.MARK) {
                _this.MARK.historyStroker = this.historyMark[_this.historyPage];
                _this.MARK.redraw();
            }

            //如果为平移图片的话 单独发送同屏的指令
            if (isMove) {
                var params = { type: 'imageOperate', operate: 'zoom', scale: nScale, left: parseInt($div.css('left'), 10) / nScale, top: parseInt($div.css('top'), 10) / nScale };
                var message = {
                    "method": "emit",
                    "params": JSON.stringify(params)
                };
                WebViewJavascriptBridge.postMessage(message)
                    // window.webkit.messageHandlers.interOp.postMessage(message);
                    // $M.fire(_this.MineView, 'socket.emit', { params: { type: 'imageOperate', operate: 'zoom', scale: nScale, left: parseInt($div.css('left'), 10) / nScale, top: parseInt($div.css('top'), 10) / nScale } });
            }

            return this;
        },

        /**
         * 格式化数字
         * @param {Object} val
         */
        formatPage: function(val) {
            if (!val) {
                return val;
            }
            return val.toString().length < 2 ? '0' + val : val;
        },

        /**
         * 设置当前画笔状态
         * @return {this}
         */
        setPen: function() {
            if (!this.MARK) return this;
            this.MARK.setMethod('brush');
            return this;
        },

        /**
         * 设置当前画笔粗细
         * @return {this}
         */
        setPenLine: function(size) {
            if (!this.MARK || !size) return this;

            // 设置为画笔状态
            this.MARK.setMethod('brush');

            // 设置粗细
            this.MARK.setLineWidth(size);

            return this;
        },

        /**
         * 设置当前画笔颜色
         */
        setPenStyle: function(color) {
            if (!this.MARK || !color) return this;
            this.MARK.setMethod('brush');
            this.MARK.setColor(color);
            return this;
        },

        /**
         * 设置橡皮擦
         * @return {this}
         */
        setEraser: function() {
            if (!this.MARK) return this;
            this.MARK.setMethod('eraser');
            return this;
        },

        /**
         * 画笔记录撤销
         * @return {this}
         */
        markCancel: function() {
            if (!this.MARK) return this;
            var len = this.MARK.undo();
            if (len === 0) $('#cancel').addClass('disabled');
            this.setPenLine(this.penStyle.line).setPenStyle(this.penStyle.color);

            // 发送指令
            var send = {
                type: 'imageOperate',
                operate: 'cancel',
                classId: this.classId
            };
            var params = send;
            var message = {
                "method": "emit",
                "params": JSON.stringify(params)
            };
            WebViewJavascriptBridge.postMessage(message)
                // window.webkit.messageHandlers.interOp.postMessage(message);
                // $M.fire(this.MineView, 'socket.emit', { params: send });

            return this;
        },

        PPTClear: function() {
            var _this = this;

            _this.MARK.empty();

            $('#eraser').removeClass('current');
            $('#cancel').addClass('disabled');
            $('#pen').addClass('current');

            _this.setPen();
        },

        /**
         * 清楚所有
         * @return {this}
         */
        clearAll: function() {
            var _this = this;

            return this;
        },

        /**
         * 工具条
         * @return {this}
         */
        toolbar: function(elem) {
            var $elem = $(elem),
                $panel = $('#panel-wrap'),
                $list = $('.rollback > ul > li > a'),
                has = $elem.hasClass('current'),
                isOpen = $panel.hasClass('current');

            $('#class-add-list').removeClass('current');
            $('#class-list-type').removeClass('show');

            if (has) {
                // 已是选中状态 面板打开
                $panel[isOpen ? 'removeClass' : 'addClass']('current');
            } else {
                // 设置画笔状态
                $list.removeClass('current');
                $elem.addClass('current');
                this.setPen();
            }

            return this;
        },

        /**
         * 初始化画布
         * @return {this}
         */
        mark: function() {
            var _this = this,
                $wrap = $('.ui-MPreview-view'),
                $eraser = $('#eraser-box'),
                color = _this.penStyle.color ? _this.penStyle.color : 'rgb(237, 69, 59)',
                line = _this.penStyle.line ? _this.penStyle.line : 1,
                $color;

            this.canvas = document.getElementById('ppt-canvas');
            this.canvas.width = parseInt(window.innerWidth, 10);
            this.canvas.height = parseInt(window.innerHeight - 40, 10);

            // 笔迹的粗细 与 颜色的设置
            var $line = $(".line-" + line);

            $('#pen-line > a').removeClass('current');
            $line.addClass('current');

            $('#panel-wrap').removeClass('current');
            $('#class-add-list').removeClass('current');
            $('#class-list-type').removeClass('show');

            $('#pen-line-text').text('0' + line);

            $.each($("#color-list a"), function(i, v) {
                if ($(v).find('span').css('background-color') == color) {
                    $color = $(v);
                    return;
                }
            })

            if ($color) {
                $('#color-list > a').removeClass('current');
                $color.addClass('current');

                $('#panel-wrap').removeClass('current');
                $('#class-add-list').removeClass('current');
                $('#class-list-type').removeClass('show');

                $('#pen').css('color', color);
                $('#pen-line span').css('background-color', color);
            }

            this.MARK = Mark({
                canvas: this.canvas,
                color: color,
                style: {},
                line: {
                    Width: line,
                    Jons: 'round',
                    Cep: 'round'
                },
                before: function() {
                    var x = this.lastX,
                        y = this.lastY;

                    if (this.isEraser) {
                        $eraser.css('display', 'none');
                        $eraser.css('top', y + 'px');
                        $eraser.css('left', x + 'px');
                    }
                },
                move: function() {
                    var x = this.lastX,
                        y = this.lastY;

                    if (this.isEraser) {
                        $eraser.css('display', 'none');
                        $eraser.css('top', y + 'px');
                        $eraser.css('left', x + 'px');
                    }
                },
                after: function() {
                    $('#cancel').removeClass('disabled');
                    if (this.isEraser) {
                        $eraser.css('display', 'none');
                        $eraser.css('top', -40 + 'px');
                        $eraser.css('left', -40 + 'px');
                    }

                    var length = this.historyStroker.length,
                        val = this.historyStroker[length - 1],
                        send = {
                            type: 'imageOperate',
                            operate: 'pen',
                            points: length && val,
                            classId: _this.classId
                        };

                    if (!val) return;

                    if (this.isSinglePoint) return;

                    // 存储历史记录
                    _this.historyMark[_this.historyPage] = [];
                    _this.historyMark[_this.historyPage] = this.historyStroker;

                    if (val.type === 'eraser') {
                        send.size = { width: 30, height: 30 };
                        send.points.color = '#000000';
                    } else {
                        send.points.width = this.context.lineWidth;
                        send.points.color = this.config.color;
                        send.width = this.context.lineWidth;
                        send.color = this.config.color;
                    }
                    var params = send;
                    var message = {
                        "method": "emit",
                        "params": JSON.stringify(params)
                    };
                    WebViewJavascriptBridge.postMessage(message)
                        // window.webkit.messageHandlers.interOp.postMessage(message);
                        // $M.fire(_this.MineView, 'socket.emit', { params: send });
                }
            });

            return this;
        },

        /**
         * 标记画板模板
         * @return {this}
         */
        markTPL: function(url) {
            if (!url) {
                this.close();
            }

            var _this = this,
                interVal = null,
                // src = url.substr(0, url.lastIndexOf('/')),
                src = url,
                temp = src.match(/.@{1}\w+/),
                id = (temp == null ? '' : temp.length && temp[0]);

            // 创建下载完成后  载入 iframe
            var done = function(iframeSrc, val) {

                var
                    iframe = document.createElement('iframe');

                iframe.id = 'iframe';
                iframe.width = window.innerWidth;
                iframe.height = window.innerHeight - 40;
                iframe.src = src;
                iframe.style.display = 'none';
                iframe.style.cssText = 'overflow: hidden; width: ' + window.innerWidth + 'px; height: ' + (window.innerHeight - 40) + 'px; border: 0;';

                iframe.addEventListener('load', function() {

                    _this.iframeDocument = iframe.contentDocument;
                    _this.iframeWindow = iframe.contentWindow;

                    var callback = function() {
                        var action = function() {
                            // 设置页数
                            var options = '',
                                temp = '<option value="{{val}}">{{val}}</option>';
                            for (var i = 0; i < _this.TotalSlides; i++) {
                                options += temp.replace(/{{val}}/g, _this.formatPage(i + 1));
                            }

                            $('.ui-MPreview-currentPage').html(options);
                            $('.ui-MPreview-countPage').text(_this.formatPage(_this.TotalSlides));
                        };

                        _this.TotalSlides = _this.iframeWindow.presSettings.TotalSlides;
                        _this.CurrentSlide = _this.iframeWindow.presSettings.CurrentSlide;

                        action();

                        // 翻页事件
                        _this.picker();


                        iframe.style.display = 'block';
                        $('.ui-MPreview-loading').addClass('ui-MPreview-hide');

                        // 判断是否有历史记录
                        if (_this.HistoryList) {
                            _this.notice('mark');
                        }

                        var landscapeScale,
                            $player = $(iframe.contentDocument).find('#player'),
                            height = parseInt($player.css('height'), 10),
                            width = parseInt($player.css('width'), 10);

                        if (height / width > window.innerWidth / (window.innerHeight - 40)) {
                            landscapeScale = window.innerWidth / height;
                        } else {
                            landscapeScale = (window.innerHeight - 40) / width;
                        }

                        var landscapeLeft = window.innerWidth * (1 - landscapeScale) / 2;
                        var landscapeTop = (window.innerHeight - 40) * (1 - landscapeScale) / 2;

                        _this.size.landscapeScale = landscapeScale;
                        _this.size.landscapeLeft = landscapeLeft;
                        _this.size.landscapeTop = landscapeTop;
                    };

                    // 修正 IOS 下 iframe 内宽高问题;
                    if ($M.os.ios) {
                        _this.iframeWindow.innerWidth = window.innerWidth;
                        _this.iframeWindow.innerHeight = window.innerHeight - 40;
                    }

                    interVal = setInterval(function() {
                        if (_this.iframeWindow.presSettings.TotalSlides) {
                            callback();
                            clearInterval(interVal);
                        }
                    }, 50);

                }, false);
                $('#ui-MPreview-iframe').append(iframe);
            };



            // append 容器
            $('#overlay').html($('#ppt-html-tpl').html());
            if (!_this.isTeaching) {
                $('#class-add').addClass("mui-hidden");
            }
            done(src, false);
            //非课件打开资源隐藏白板  互动等功能
            if (_this.from == 'nofromware' || _this.from == 'select') {
                $('.rollback li:eq(1)').addClass('mui-hidden');
                $('.rollback li:eq(2)').addClass('mui-hidden');
                $('.rollback').css('width', '280px');
            }

            return this;
        },

        /**
         * 选择器
         * @return {this}
         */
        picker: function() {
            var _this = this,
                $picker = $('.ui-MPreview-currentPage');


            // 获取焦点
            $('.ui-MPreview-pages').on('tap', function() {
                $picker.focus();
            });

            $picker.on('change', function() {
                var value = Number($picker[0].value);

                // 跳转
                if (!_this.MP) {
                    var presentation = _this.iframeWindow.Presentation,
                        presSettings = _this.iframeWindow.presSettings,
                        getCurAnimateIndex = _this.iframeWindow.getCurAnimateIndex,
                        animateIndex;

                    // 存储历史记录
                    _this.historyMark[presSettings.CurrentSlide] = _this.MARK.historyStroker;
                    _this.PPTClear();

                    // 跳转
                    presentation.GotoSlide(value);
                    animateIndex = getCurAnimateIndex(presSettings.CurrentSlide);
                    _this.CurrentSlide = presSettings.CurrentSlide;
                    _this.historyPage = presSettings.CurrentSlide;

                    //重绘当前页历史记录
                    var currentHistory = _this.historyMark[presSettings.CurrentSlide];
                    _this.MARK.historyStroker = currentHistory || [];
                    _this.MARK.redraw();

                    $('#cancel')[_this.MARK.historyStroker.length ? 'removeClass' : 'addClass']('disabled');
                    _this.CurrentSlide = presSettings.CurrentSlide;

                } else {
                    _this.MP.go(value);
                }

                _this.historyPage = value;
                var params = { type: 'jumpPage', cellId: _this.cellId, courseId: _this.courseId, classId: _this.classId, page: value, animateIndex: animateIndex ? animateIndex : -1 };
                var message = {
                    "method": "emit",
                    "params": JSON.stringify(params)
                };
                WebViewJavascriptBridge.postMessage(message)

            });

            return this;
        },

        /**
         * 画板标记事件
         * @return {this}
         */
        markEvent: function() {
            var _this = this;

            // 工具栏事件
            _this.classAdd();

            // 画笔事件
            $('#pen').on('touchend', function(e) {
                e.preventDefault();
                _this.toolbar(this);
            });

            // 橡皮擦事件
            $('#eraser').on('touchend', function(e) {
                e.preventDefault();
                var $elem = $(this),
                    has = $elem.hasClass('current'),
                    $list = $('.rollback > ul > li > a'),
                    $wrap = $('#panel-wrap');

                $list.removeClass('current');
                $elem.addClass('current');

                $('#class-add-list').removeClass('current');
                $('#class-list-type').removeClass('show');
                $wrap.removeClass('current');

                _this[has ? 'clearAll' : 'setEraser']();
            });

            $('#cancel').on('touchstart', function(e) {
                $(this).addClass('current');
            });

            // 撤销事件
            $('#cancel').on('touchend', function(e) {
                e.preventDefault();

                var $elem = $(this),
                    $list = $('.rollback > ul > li > a'),
                    $wrap = $('#panel-wrap');

                $list.removeClass('current');
                $elem.removeClass('current');
                $('#pen').addClass('current');

                $('#class-add-list').removeClass('current');
                $('#class-list-type').removeClass('show');
                $wrap.removeClass('current');

                _this.markCancel();
            });

            // 设置画笔粗细
            $('#pen-line > a').on('touchend', function(e) {
                e.preventDefault();
                var $elem = $(this),
                    line = Number($elem.attr('class').replace('line-', '').replace('current', ''));

                $('#pen-line > a').removeClass('current');
                $elem.addClass('current');

                $('#panel-wrap').removeClass('current');
                $('#class-add-list').removeClass('current');
                $('#class-list-type').removeClass('show');

                $('#pen-line-text').text('0' + line);
                _this.setPenLine(line);
                _this.penStyle.line = line;
                window.localStorage["penInfo"] = JSON.stringify(_this.penStyle);
            });

            // 设置画笔颜色
            $('#color-list > a').on('touchend', function(e) {
                e.preventDefault();

                var $elem = $(this),
                    color = $elem.find('span').css('background-color');

                $('#color-list > a').removeClass('current');
                $elem.addClass('current');

                $('#panel-wrap').removeClass('current');
                $('#class-add-list').removeClass('current');
                $('#class-list-type').removeClass('show');

                $('#pen').css('color', color);
                $('#pen-line span').css('background-color', color);

                _this.setPenStyle(color);
                _this.penStyle.color = color;
                window.localStorage["penInfo"] = JSON.stringify(_this.penStyle);
            });

            // 设置课堂互动
            $('#classRoom').on('touchend', function() {
                var $elem = $(this),
                    $list = $('.rollback > ul > li > a'),
                    has = $elem.hasClass('current');

                $('#panel-wrap').removeClass('current');
                $('#class-add-list').removeClass('current');

                $list.removeClass('current');
                $elem[has ? 'removeClass' : 'addClass']('current');

                //遮罩层的显示
                $('.mask_layer').show();
                $('#class-list-type')[has ? 'removeClass' : 'addClass']('show');
                if (has) {
                    _this.setPen();
                    $('#pen').addClass('current');
                }
            });

            //旋转
            $('#rotate').on('touchend', function() {
                _this.rotateAngle += 90;
                _this.rotateAngle = _this.rotateAngle % 360;

                var cx = window.innerWidth / 2,
                    cy = (window.innerHeight - 40) / 2;

                var dx = cx - cx * Math.cos(_this.rotateAngle / 180 * Math.PI) + cy * Math.sin(_this.rotateAngle / 180 * Math.PI);
                var dy = cy - cy * Math.cos(_this.rotateAngle / 180 * Math.PI) - cx * Math.sin(_this.rotateAngle / 180 * Math.PI);

                $('.rotate-box').css('left', dx + 'px').css('top', dy + 'px').css('-webkit-transform-origin', '0% 0%').css('-webkit-transform', 'rotate(' + _this.rotateAngle + 'deg)');

                if (_this.rotateAngle == 0 || _this.rotateAngle == 180) {
                    $('.img-box').css('left', '0px').css('top', '0px').css('-webkit-transform-origin', '0% 0%').css('-webkit-transform', 'scale(1)');
                } else {
                    $('.img-box').css('left', _this.size.landscapeLeft + 'px').css('top', _this.size.landscapeTop + 'px').css('-webkit-transform-origin', '0% 0%').css('-webkit-transform', 'scale(' + _this.size.landscapeScale + ')');
                }

                _this.zoomRecord = 1;

                //存储笔画的历史记录
                _this.historyMark[_this.index] = _this.MARK.historyStroker;

                _this.MARK.empty();

                var cx = window.innerWidth　 * 　1 / 2,
                    cy = (window.innerHeight - 40) * 　1 / 2;

                var dx = cx - cx * Math.cos(_this.rotateAngle / 180 * Math.PI) + cy * Math.sin(_this.rotateAngle / 180 * Math.PI);
                var dy = cy - cy * Math.cos(_this.rotateAngle / 180 * Math.PI) - cx * Math.sin(_this.rotateAngle / 180 * Math.PI);

                if (_this.rotateAngle == 0 || _this.rotateAngle == 180) {
                    _this.MARK.scaleAfterSet(1, 0, 0, 1, dx, dy, _this.rotateAngle);
                } else {
                    _this.MARK.scaleAfterSet(1, _this.size.landscapeLeft, _this.size.landscapeTop, _this.size.landscapeScale, dx, dy, _this.rotateAngle);
                }

                // 获取画板历史记录重绘路径
                if (_this.historyMark[_this.index] && _this.historyMark[_this.index] && _this.MARK) {
                    _this.MARK.historyStroker = _this.historyMark[_this.index];
                    _this.MARK.redraw();
                }

                if (_this.rotateAngle == 0 || _this.rotateAngle == 180) {
                    var params = { type: 'imageOperate', operate: 'rotate', scale: _this.size.landscapeScale, angle: _this.rotateAngle, left: 0, top: 0 };
                    var message = {
                        "method": "emit",
                        "params": JSON.stringify(params)
                    };
                    WebViewJavascriptBridge.postMessage(message)
                        // window.webkit.messageHandlers.interOp.postMessage(message);
                        //  $M.fire(_this.MineView, 'socket.emit', { params: { type: 'imageOperate', operate: 'rotate', scale: _this.size.landscapeScale, angle: _this.rotateAngle, left: 0, top: 0 } });

                } else {
                    var params = { type: 'imageOperate', operate: 'rotate', scale: _this.size.landscapeScale, angle: _this.rotateAngle, left: _this.size.landscapeLeft, top: _this.size.landscapeTop };
                    var message = {
                        "method": "emit",
                        "params": JSON.stringify(params)
                    };
                    WebViewJavascriptBridge.postMessage(message)
                        // window.webkit.messageHandlers.interOp.postMessage(message);
                        // $M.fire(_this.MineView, 'socket.emit', { params: { type: 'imageOperate', operate: 'rotate', scale: _this.size.landscapeScale, angle: _this.rotateAngle, left: _this.size.landscapeLeft, top: _this.size.landscapeTop } });

                }

            });

            // 关闭
            $('.ui-MPreview-back').on('touchend', function() {
                WebViewJavascriptBridge.back();
                // $M.fire(_this.MineView, 'socket.emit', { params: { type: 'closeRes' } });
                var message = { "method": "back" };
                // window.webkit.messageHandlers.interOp.postMessage(message);
                // $M.back();
            });

            //上一页
            $('.ui-MPreview-arrowLeft').on('touchend', function() {
                var $ele = $(this);
                $ele.removeClass('ui-MPreview-static').addClass('ui-MPreview-touched');
                // _this.iframeWindow.postMessage('prevSlide()', "*");
                setTimeout(function() {
                    var presentation = _this.iframeWindow.Presentation,
                        presSettings = _this.iframeWindow.presSettings,
                        getCurAnimateIndex = _this.iframeWindow.getCurAnimateIndex,
                        index, currentHistory, animateIndex;

                    if (!presentation || !presSettings) return;

                    animateIndex = getCurAnimateIndex(presSettings.CurrentSlide);

                    var params = { type: 'pptView', cellId: _this.cellId, classId: _this.classId, courseId: _this.courseId, direction: 'prev', page: presSettings.CurrentSlide, animateIndex: animateIndex };
                    var message = {
                        "method": "emit",
                        "params": JSON.stringify(params)
                    };
                    WebViewJavascriptBridge.postMessage(message)
                        // window.webkit.messageHandlers.interOp.postMessage(message);
                        // 发送指令
                        // $M.fire(_this.MineView, 'socket.emit', { params: { type: 'pptView', cellId: _this.cellId, classId: _this.classId, courseId: _this.courseId, direction: 'prev', page: presSettings.CurrentSlide, animateIndex: animateIndex } });

                    // 操作
                    presentation.Prev();

                    // 判断上一页操作
                    if (_this.CurrentSlide !== presSettings.CurrentSlide) {
                        _this.historyPage = presSettings.CurrentSlide;
                        $('.ui-MPreview-currentPage')[0].value = _this.formatPage(presSettings.CurrentSlide);

                        index = _this.CurrentSlide;

                        // 存储历史记录
                        _this.historyMark[index] = _this.MARK.historyStroker;
                        _this.PPTClear();

                        //重绘当前页历史记录
                        currentHistory = _this.historyMark[presSettings.CurrentSlide];
                        _this.MARK.historyStroker = currentHistory || [];
                        _this.MARK.redraw();

                        $('#cancel')[_this.MARK.historyStroker.length ? 'removeClass' : 'addClass']('disabled');
                        _this.CurrentSlide = presSettings.CurrentSlide;
                    }
                    $ele.removeClass('ui-MPreview-touched').addClass('ui-MPreview-static');
                }, 100);
            });

            //下一页
            $('.ui-MPreview-arrowRight').on('touchend', function() {
                var $ele = $(this);
                $ele.removeClass('ui-MPreview-static').addClass('ui-MPreview-touched');

                setTimeout(function() {
                    // _this.iframeWindow.postMessage('nextSlide()', "*");
                    var presentation = _this.iframeWindow.Presentation,
                        presSettings = _this.iframeWindow.presSettings,
                        getCurAnimateIndex = _this.iframeWindow.getCurAnimateIndex,
                        index, currentHistory, animateIndex;

                    if (!presentation || !presSettings) return;

                    animateIndex = getCurAnimateIndex(1);

                    var params = { type: 'pptView', classId: _this.classId, cellId: _this.cellId, courseId: _this.courseId, direction: 'next', page: presSettings.CurrentSlide, animateIndex: animateIndex };
                    var message = {
                        "method": "emit",
                        "params": JSON.stringify(params)
                    };
                    WebViewJavascriptBridge.postMessage(message)
                        // window.webkit.messageHandlers.interOp.postMessage(message);
                        // 发送指令
                        // $M.fire(_this.MineView, 'socket.emit', { params: { type: 'pptView', classId: _this.classId, cellId: _this.cellId, courseId: _this.courseId, direction: 'next', page: presSettings.CurrentSlide, animateIndex: animateIndex } });

                    // 操作
                    presentation.Next();

                    // 判断下一页操作
                    if (_this.CurrentSlide !== presSettings.CurrentSlide) {
                        _this.historyPage = presSettings.CurrentSlide;
                        $('.ui-MPreview-currentPage')[0].value = _this.formatPage(presSettings.CurrentSlide);

                        index = _this.CurrentSlide;

                        // 存储历史记录
                        _this.historyMark[index] = _this.MARK.historyStroker;
                        _this.PPTClear();

                        //重绘当前页历史记录
                        currentHistory = _this.historyMark[presSettings.CurrentSlide];
                        _this.MARK.historyStroker = currentHistory || [];
                        _this.MARK.redraw();

                        $('#cancel')[_this.MARK.historyStroker.length ? 'removeClass' : 'addClass']('disabled');
                        _this.CurrentSlide = presSettings.CurrentSlide;
                    }

                    $ele.removeClass('ui-MPreview-touched').addClass('ui-MPreview-static');
                }, 100);
            });

            return this;
        },

        /**
         * 历史记录通知
         * @return {this}
         */
        notice: function(type) {
            var _this = this;

            if (!this.HistoryList) {
                return;
            }

            var item = this.HistoryList;
            if (Number(item.value) === 1) {
                return;
            }



            return this;
        },

        /**
         * toolbar 操作
         * @return {this}
         */
        classAdd: function() {
            var _this = this;

            $('#class-add').on('touchend', function(e) {
                // var $elem = $(this),
                //     $list = $('.rollback > ul > li > a'),
                //     has = $('#class-add-list').hasClass('current');

                // $('.mask_layer').show();
                // $('#panel-wrap').removeClass('current');
                // $('#class-list-type').removeClass('show');
                // $list.removeClass('current');
                // $('#class-add-list')[has ? 'removeClass' : 'addClass']('current');

                // if (has) {
                //     _this.setPen();
                //     $('#pen').addClass('current');
                //     $('.mask_layer').show();
                // }

                preview.pageindex = $('.ui-MPreview-currentPage').val()
                WebViewJavascriptBridge.showFaceMS()

            });

            $('#class-BBS').on('touchend', function(e) {

                WebViewJavascriptBridge.showBBS()

            });
            $('#down').on('touchend', function(e) {

                WebViewJavascriptBridge.down()

            });
            // 空白板
            $('#create-whiteboard').on('touchend', function() {
                $M.openWindow({
                    url: '/view/teacher/whiteboard/whiteboard.html',
                    id: 'teacher-whiteboard',
                    extras: {
                        fromRes: true,
                        isLock: true
                    }
                });
                $('#mask_layer').hide();
                $('#class-add-list').removeClass('current');
            });

            // 选取照片
            $('#create-select-photo').on('touchend', function() {

                $('#class-add-list').removeClass('current');
                $('#mask_layer').hide();
            });

            // 拍摄照片
            $('#create-camera').on('touchend', function() {

                $('#class-add-list').removeClass('current');
                $('#mask_layer').hide();
            });
            //关闭
            $('#overlay').on('touchend', '.icon-close', function() {
                $('#class-list-type').removeClass('show');
                $('#pen').addClass('current');
                $('#class-add-list').removeClass('current');
                $('#mask_layer').hide();
            });

            return this;
        },
        getPc: function(file, isUseCmr) {
            this.uploadFile = file;
            this.isUseCmr = isUseCmr;

            return this;
        },

        /**
         * 上传图片
         * @return {this}
         * @param {Object} file
         */
        uploadImg: function() {
            var _this = this,
                uploadName, fullPath,
                file = this.uploadFile,
                isUseCmr = this.isUseCmr;

            // 获取扩展名
            var index = file.lastIndexOf('/'),
                filename = file.substring(index + 1);

            // 上传出错处理
            var postError = function(msg) {

            };

            // 上传成功, 打开新窗口
            var done = function(params) {
                //暂时投屏方法

                var pcLocalUrl = params.pcLocalUrl + params.filename;

                $M.openWindow({
                    url: '/view/teacher/whiteboard/whiteboard.html',
                    id: 'teacher-whiteboard',
                    extras: {
                        fromRes: true,
                        isLock: true,
                        isPcLocal: params.ispc,
                        filename: params.filename,
                        img: params.url,
                        pcLocalUrl: pcLocalUrl,

                    }
                });
            };


            return this;
        },
        seturl: function(data, cellId, isTeaching) {
            var _this = this;
            _this.resourceUrl = data;
            _this.cellId = cellId;
            _this.isTeaching = isTeaching;
            _this.get().events();
            return this;
        },
        setbackMSG: function() {
            var _this = this;
            var params = {
                type: 'jumpPage',
                classId: _this.openClassId,
                cellId: _this.cellId,
                courseId: _this.openClassId,

                page: Number(_this.pageindex)
            };

            var message = {
                "method": "emit",
                "params": JSON.stringify(params)
            };
            setTimeout(function() {
                WebViewJavascriptBridge.postMessage(message)
            }, 500);

            return this;
        },


        /**
         * 载入
         * @return {null}
         */
        init: function() {

            var _this = this;
            this.isfirst = true;
            //  this.penInfo = window.localStorage['penInfo'];
            this.penStyle = this.penInfo ? JSON.parse(this.penInfo) : {};
            this.historyMark = {};
            this.historyPage = 1;
            this.HistoryList = null;
            this.next = 0;
            this.isTeaching = false;
            this.resourceUrl = "";
            this.cellId = "";
            this.pageindex = 1;
            this.isScaling = false; //标识是否已开始缩放
            this.scalingLeft = 0; //标识上次缩放时div的left属性值
            this.scalingTop = 0; //标识上次缩放时div的top属性值
            this.startPoints = {}; // 图片缩放的起始位置
            this.zoomRecord = 1; //图片的放大倍数
            this.zoomRecordTemp = 1; //一次缩放的倍数
            this.rotateAngle = 0; //旋转的角度的初始值
            this.size = {}; //存储旋转PPT是需要的基础信息

        },
    };


    preview.init();
    window.preview = preview;

}(mui, $$));