//
//  common.swift
//  云课堂2
//
//  Created by 志辉教育 on 2018/5/30.
//  Copyright © 2018年 zqyou. All rights reserved.
//

import UIKit
import Alamofire
import SwiftyJSON
import CoreData
import SCLAlertView
import Photos
import UserNotifications
import SDWebImage
import SystemConfiguration
import SystemConfiguration.CaptiveNetwork

class common: UIView {

    /*
    // Only override draw() if you perform custom drawing.
    // An empty implementation adversely affects performance during animation.
    override func draw(_ rect: CGRect) {
        // Drawing code
    }
    */
    static let share = common()
    enum regexStr: String{
        case d = "\\d+" //匹配数字 [0-9]
        case W = "\\W" //匹配任意不是字母，数字，下划线，汉字的字符[^\w]
        case dW = "\\d|\\W"
        case hf = "回复"
    }
    static let docTypeArray = ["其他", "视频", "音频", "图片", "文档", "ppt", "zip"];
    static let docTypeArrayLetter = ["", "video", "mp3", "img", "office", "ppt", "zip"];
    public func isX() -> Bool {
        
        if UIScreen.main.bounds.height == 812 {
            
            return true
            
        }
        return false
        
    }
    
    public func returnSafeAreaLineHeight() -> Int {
        
        var HX = 0;
        if UIScreen.main.bounds.height == 812 {
            
            HX = -25
            
        }
        return HX
        
    }
    
    //根据汉子字母
    func getLetter(strInput:String?) -> String {
        
        if strInput != nil && strInput != "" {
            var ms:NSMutableString? = NSMutableString.init(string: strInput!)
            
            CFStringTransform(ms, UnsafeMutablePointer.init(bitPattern: 0), kCFStringTransformMandarinLatin, false)
            CFStringTransform(ms, UnsafeMutablePointer.init(bitPattern: 0), kCFStringTransformStripDiacritics, false)
            
            var pyArr:[String]? = ms?.components(separatedBy: " ")
            if pyArr != nil && (pyArr?.count)! > 0 {
                
                let strResult = (pyArr![0] as NSString).substring(to: pyArr![0].count)
                
                return strResult.uppercased()
            }
            
            ms = nil
            pyArr = nil
        }
        
        return strInput!;
    }
    //富文本设置
    func  setAttributeString(str:String, color:UIColor,fontSize:CGFloat,range:NSRange) -> NSAttributedString{
        let attributeString = NSMutableAttributedString(string:str)
        attributeString.addAttribute(NSAttributedStringKey.foregroundColor, value:color,
                                     range: range)
        return attributeString
    }
    
    //富文本行间距
    func setAttributeLine(text:String) -> NSAttributedString {
        let paraph = NSMutableParagraphStyle()
        paraph.lineSpacing  = 5
        paraph.headIndent = 5
        paraph.firstLineHeadIndent = 5
        let attributes = [NSAttributedStringKey.font:UIFont.italicSystemFont(ofSize: 14),
                          NSAttributedStringKey.paragraphStyle: paraph]
        
        return NSAttributedString(string: text,attributes: attributes)
    }

    //设置图片sdImg
    func setSDImg(str:String,imgview:UIImageView){
        imgview.isHidden = false
        let urls = str.components(separatedBy: "?")
        imgview.sd_setImage(with: URL(string: urls[0]), placeholderImage: UIImage(named: "default_slider_img.png"))
        
    }

  
    
    //根据正则表达式改变文字颜色
    func changeTextChange(regex: regexStr, text: String, color: UIColor) -> NSMutableAttributedString{
        
        let attributeString = NSMutableAttributedString(string: text)
        
        do {
            let regexExpression = try NSRegularExpression(pattern: regex.rawValue, options: NSRegularExpression.Options())
            let result = regexExpression.matches(in: text, options: NSRegularExpression.MatchingOptions(), range: NSMakeRange(0, text.count))
            for item in result {
                attributeString.addAttribute(NSAttributedStringKey.foregroundColor, value: color, range: item.range)
            }
        } catch {
            print("Failed with error: \(error)")
        }
        
        return attributeString
    }
    //自定义暂无数据
    func setTableFootView_noData(_ tableView: UITableView,list:NSArray){
        
        let view = UIView.init(frame: CGRect.init(x: 0, y: 0, width: tableView.frame.width, height: 300))
        
//        let imgview = UIImageView.init(frame: CGRect.init(x: 0, y: 0, width: 200, height: 300))
//
//        imgview.image =  UIImage.init(named: "data-none.png")
//
//        imgview.contentMode = .scaleAspectFit
//        imgview.center = view.center
//        view.addSubview(imgview);
        //        let imgview = UIImageView.init(frame: CGRect.init(x: 0, y: 0, width: 200, height: 300))
        //
        //        imgview.image =  UIImage.init(named: "data-none.png")
        let lab = UILabel.init(frame: CGRect.init(x: 0, y: 0, width: 200, height: 300))
        lab.center = view.center
        lab.font = UIFont.init(name: "iconfont", size: 120);
        lab.textAlignment = .center
        lab.text = "\u{e752}"
        lab.textColor = UIColor.lightGray
        view.addSubview(lab);
        
        if(list.count  == 0 ){
            tableView.tableFooterView  = view
            
        }else{
            tableView.tableFooterView =  UIView.init(frame: CGRect.zero)
        }
        
    }
    //自定义暂无数据
    func setTableFootView_noData(_ tableView: UITableView,list:Array<Any>){

        let view = UIView.init(frame: CGRect.init(x: 0, y: 0, width: tableView.frame.width, height: 300))


        let lab = UILabel.init(frame: CGRect.init(x: 0, y: 0, width: 200, height: 300))
        lab.center = view.center
        lab.font = UIFont.init(name: "iconfont", size: 80);
        lab.textAlignment = .center
        lab.text = "\u{e752}"
        lab.textColor = UIColor.lightGray

        view.addSubview(lab);


        if(list.count  == 0 ){
            tableView.tableFooterView  = view

        }else{
            tableView.tableFooterView =  UIView.init(frame: CGRect.zero)
        }

    }


    //Rx自定义暂无数据
    func setTableFootView_noData(_ tableView: UITableView,count:Int) -> UIView{

        let view = UIView.init(frame: CGRect.init(x: 0, y: 0, width: tableView.frame.width, height: 300))

        let lab = UILabel.init(frame: CGRect.init(x: 0, y: 0, width: 200, height: 300))
        lab.center = view.center
        lab.font = UIFont.init(name: "iconfont", size: 120);
        lab.textAlignment = .center
        lab.text = "\u{e752}"
        lab.textColor = UIColor.lightGray
        view.addSubview(lab);

        if(count  == 0 ){
          return  view

        }else{
          return  UIView.init(frame: CGRect.zero)
        }

    }
    

    //加载html
    func loadHtml(str:String) -> NSAttributedString{

        let textHtml = try! NSAttributedString(
            data: str.data(using: String.Encoding(rawValue: String.Encoding.unicode.rawValue), allowLossyConversion: true)!,
            options:[NSAttributedString.DocumentReadingOptionKey.documentType: NSAttributedString.DocumentType.html], documentAttributes: nil)
        
        return textHtml
    }
  
    //计算高度
    func getHeightForView(text:NSAttributedString, font:UIFont, width:CGFloat) -> CGFloat{

        let label:UILabel = UILabel(frame: CGRect(x: 0, y: 0, width: width, height: CGFloat.greatestFiniteMagnitude))
        label.numberOfLines = 0
        label.lineBreakMode = NSLineBreakMode.byWordWrapping
        label.font = font
        label.attributedText = text
        label.sizeToFit()

        return label.frame.height
    }
    //JSONString转换为字典
    func getDictionaryFromJSONString(jsonString:String) ->NSDictionary{
        
        let jsonData:Data = jsonString.data(using: .utf8)!
        
        let dict = try? JSONSerialization.jsonObject(with: jsonData, options: .mutableContainers)
        if dict != nil {
            return dict as! NSDictionary
        }
        return NSDictionary()
        
    }
    ///判断是否为数字
    func isPurnInt(string: String) -> Bool {
        
        let scan: Scanner = Scanner(string: string)
        
        var val:Int = 0
        
        return scan.scanInt(&val) && scan.isAtEnd
        
    }
    /// 根据00:00:00时间格式，转换成秒
    func getSecondsFromTimeStr(timeStr:String) -> Int {
        if timeStr.isEmpty {
            return 0
        }
        
        let timeArry = timeStr.replacingOccurrences(of: "：", with: ":").components(separatedBy: ":")
        var seconds:Int = 0
        
        if timeArry.count > 0 && isPurnInt(string: timeArry[0]){
            let hh = Int(timeArry[0])
            if hh! > 0 {
                seconds += hh!*60*60
            }
        }
        if timeArry.count > 1 && isPurnInt(string: timeArry[1]){
            let mm = Int(timeArry[1])
            if mm! > 0 {
                seconds += mm!*60
            }
        }
        
        if timeArry.count > 2 && isPurnInt(string: timeArry[2]){
            let ss = Int(timeArry[2])
            if ss! > 0 {
                seconds += ss!
            }
        }
        
        return seconds
        
    }
    
    //防止键盘遮挡
    func animateViewMoving (up:Bool, moveValue :CGFloat,view:UIView){
        let movementDuration:TimeInterval = 0.3
        let movement:CGFloat = ( up ? -moveValue : moveValue)
        UIView.beginAnimations( "animateView", context: nil)
        UIView.setAnimationBeginsFromCurrentState(true)
        UIView.setAnimationDuration(movementDuration )
        view.frame = view.frame.offsetBy(dx: 0,  dy: movement)
        UIView.commitAnimations()
    }

    //定义返回
    func setBackButtonItem (item:UIBarButtonItem)  {

        item.setTitleTextAttributes([NSAttributedStringKey.font: UIFont(name: "iconfont", size: 16.0) as Any], for:.normal)
        item.setTitleTextAttributes([NSAttributedStringKey.font: UIFont(name: "iconfont", size: 16.0) as Any], for:.selected)

    }
    //定义删除
    func setdeleteButtonItem (item:UIBarButtonItem)  {
        
        item.setTitleTextAttributes([NSAttributedStringKey.font: UIFont(name: "iconfont", size: 22.0) as Any], for:.normal)
        item.setTitleTextAttributes([NSAttributedStringKey.font: UIFont(name: "iconfont", size: 22.0) as Any], for:.selected)
        
    }
    
    //老师我的学习自定义
    func setteacherStudyButtonItem (item:UIBarButtonItem)  {
        
        item.setTitleTextAttributes([NSAttributedStringKey.font: UIFont(name: "iconfont", size: 25.0) as Any], for:.normal)
        item.setTitleTextAttributes([NSAttributedStringKey.font: UIFont(name: "iconfont", size: 25.0) as Any], for:.selected)
        
    }

    //添加工具栏
    func AddToolKeyboardDoneBar() -> UIToolbar {
        let toolBar:UIToolbar = UIToolbar(frame: CGRect(x: 0, y: 0, width: UIScreen.main.bounds.width, height: 35))
        toolBar.tintColor = UIColor.bg
        toolBar.sizeToFit()
        toolBar.isUserInteractionEnabled = true;
        return toolBar
    }

    //获取上传与预览地址
    func getUploadUrl(){

        Alamofire.request(appAPI.get_url_upload, method: .post,  encoding: URLEncoding.default).responseJSON { response in

            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{
                    appAPI.uploadUrl = json["url"].stringValue;
                    let arrayurl = json["prefixUrl"].stringValue.components(separatedBy: "?");
                    appAPI.prefixUrl = arrayurl[0];

                }else{
                    ZKProgressHUD.showError(json["msg"].stringValue);
                }

            }else{
                ZKProgressHUD.showError("网络环境异常请稍后再试！");
            }
        }

    }

    //获取当前版本号，是否强制更新
    func getIOSAppVersion(){
        let urlString = "http://itunes.apple.com/app//id1259019562?l=zh&ls=1&mt=8"
        let url = NSURL(string: urlString)
        Alamofire.request(appAPI.AppVersion_getIOSAppVersion, method: .post,  encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let json = JSON(value)
                if json["code"] == 1{
                    //取当前版本号
                    let currentVersion = Bundle.main.infoDictionary!["CFBundleShortVersionString"] as! String
                    if(json["data"]["appVersionInfo"]["isForce"].boolValue){
                        if(json["data"]["appVersionInfo"]["versionCode"].stringValue != currentVersion){
                            //自定义提示框样式
                            let appearance = SCLAlertView.SCLAppearance(
                                showCloseButton: false //不显示关闭按钮
                            )

                            //使用自定义样式的提示框
                            let alert = SCLAlertView(appearance: appearance)

                            alert.addButton("立即更新") {
                                //前往Appstore

                                UIApplication.shared.openURL(url! as URL)
                            }
                            alert.showInfo("温馨提示", subTitle: "发现新版本，是否更新？")
                        }
                    }else{
                        if(json["data"]["appVersionInfo"]["versionCode"].stringValue != currentVersion){
                            let alert = SCLAlertView()
                            alert.addButton("立即更新") {
                                //前往Appstore

                                UIApplication.shared.openURL(url! as URL)
                            }
                            alert.showInfo("温馨提示", subTitle: "发现新版本，是否更新？",closeButtonTitle: "以后再说")
                    }
                 }
              }
            }else{
                //ZKProgressHUD.showError("网络环境异常请稍后再试！");
            }
        }
    }

    //是否有相册权限
    func isAuthorizePhotos() -> Bool{
        let status = PHPhotoLibrary.authorizationStatus()
        var isAuthorize = false
        switch status {
        case .authorized:
            isAuthorize = true
        default:
            isAuthorize = false
        }
        return isAuthorize
    }
    //判断相册是否开启
    func authorizePhotos(){
        let status = PHPhotoLibrary.authorizationStatus()

        switch status {
        case .authorized:
            print("kaiqi le ")

        case .notDetermined:
            // 请求授权
            PHPhotoLibrary.requestAuthorization({ (status) -> Void in
                DispatchQueue.main.async(execute: { () -> Void in
                    _ = self.authorizePhotos()
                })
            })

        default: ()
        DispatchQueue.main.async(execute: { () -> Void in


            let alert = SCLAlertView()
            alert.addButton("设置") {
                let url = URL(string: UIApplicationOpenSettingsURLString)
                if let url = url, UIApplication.shared.canOpenURL(url) {

                    UIApplication.shared.openURL(url)

                }
            }
            alert.showInfo("照片访问受限", subTitle: "点击“设置”，允许访问您的照片",closeButtonTitle: "取消")
        })
        }
    }
    //判断相机是否开启
    func authorizeCamera() ->Bool{
        //检测相机是否可用
        var isAuthorize = false
        let authStatus:AVAuthorizationStatus = AVCaptureDevice.authorizationStatus(for: AVMediaType.video)
        if(authStatus == AVAuthorizationStatus.denied || authStatus == AVAuthorizationStatus.restricted) {
            isAuthorize = false
        }else {
            isAuthorize = true
        }
        return isAuthorize
    }
    //打开设置，提示开启开启相机
    func openCamera(){

        let alert = SCLAlertView()
        alert.addButton("设置") {
            let url = URL(string: UIApplicationOpenSettingsURLString)
            if let url = url, UIApplication.shared.canOpenURL(url) {

                UIApplication.shared.openURL(url)

            }
        }
        alert.showInfo("相机访问受限", subTitle: "点击“设置”，开启相机权限",closeButtonTitle: "取消")
    }
    //判断通知是否开启
    func authorizeNotice(){
        if #available(iOS 10.0, *) {
            UNUserNotificationCenter.current().getNotificationSettings {
                settings in
                switch settings.authorizationStatus {
                case .authorized:
                    return
                case .notDetermined:
                    //请求授权
                    UNUserNotificationCenter.current()
                        .requestAuthorization(options: [.alert, .sound, .badge]) {
                            (accepted, error) in
                            if !accepted {
                                print("用户不允许消息通知。")
                            }
                    }
                case .denied:
                    DispatchQueue.main.async(execute: { () -> Void in

                        let alert = SCLAlertView()
                        alert.addButton("设置") {
                            let url = URL(string: UIApplicationOpenSettingsURLString)
                            if let url = url, UIApplication.shared.canOpenURL(url) {

                                    UIApplication.shared.openURL(url)

                            }
                        }
                        alert.showInfo("消息推送已关闭", subTitle: "想要及时获取消息。点击“设置”，开启通知。",closeButtonTitle: "取消")
                    })
                }
            }
        } else {
            // Fallback on earlier versions
        }
    }

    func  isCreatTable(){
        let cx = SQLiteManagerMask()
        cx.tableLampCreate()
        cx.insertData(_userId: Account.defaultAccount.id!, _isbrowseDiscuss: false, _isbrowseQrcode: false, _isbrowserefresh: false, _isbrowserequireInfo: false, _isbrowseTest: false, _isbrowselessonmore: false, _isbrowselessonTuwen: false, _isbrowselessonaudioDiscuss: false, _isbrowselessonVideoDiscuss: false, _isbrowselessonH5PPTDiscuss: false, _isbrowselessonPPTDiscuss: false)
    }
    //画线
    func drawline(lab:UILabel,width:CGFloat)->CAShapeLayer{
        let shapeLayer:CAShapeLayer = CAShapeLayer()
        shapeLayer.bounds = lab.bounds
        shapeLayer.position = CGPoint(x: lab.frame.width / 2, y: lab.frame.height / 2)
        shapeLayer.fillColor = UIColor.clear.cgColor
        shapeLayer.strokeColor = UIColor.colorWithHex(hexColor: 0x8F8F8F).cgColor
        shapeLayer.lineWidth = 0.3
        shapeLayer.lineJoin = kCALineJoinRound
        shapeLayer.lineDashPhase = 0
        shapeLayer.lineDashPattern = [NSNumber(value: 2), NSNumber(value: 2)]
        let path:CGMutablePath = CGMutablePath()
        path.move(to: CGPoint(x: 0, y: 0))
        path.addLine(to: CGPoint(x: width, y: 0))
        shapeLayer.path = path
        return shapeLayer
    }
    func setFootView (msg:String) ->UIView{
        
        let foot = UILabel.init(frame: CGRect.init(x: 0, y: 0, width: 0, height: 55));
        foot.text = "┉┉┉┉┉┉  \(msg)  ┉┉┉┉┉┉";
        foot.font = UIFont.systemFont(ofSize: 12);
        foot.textAlignment = NSTextAlignment.center;
        foot.textColor = UIColor.gray;
        foot.backgroundColor =  UIColor.init(red: 243/255, green: 243/255, blue: 243/255, alpha: 243/255);
        return foot;
        
    }
    func getJSONStringFromDictionary(dictionary:NSDictionary) -> String {
        if (!JSONSerialization.isValidJSONObject(dictionary)) {
            // ZKProgressHUD.showError("创建失败！请稍后再试！");
            return ""
        }
        let data : NSData! = try? JSONSerialization.data(withJSONObject: dictionary, options: []) as NSData!
        let JSONString = NSString(data:data as Data,encoding: String.Encoding.utf8.rawValue)
        return JSONString! as String
        
    }

    //unit 转换
    func formatFileSize(bytes:Float64) -> String{
        var strSize = "0 B", i = 0,size = bytes;
        let unit = ["B","KB","M","G"];
        
        if(bytes > 0){
            while size / 1024 >= 1
            {
                size =  size / 1024;
                i  = i + 1;
            }
            strSize = "\(String(format: "%.1f", size) )\(unit[i])";
        }
        return strSize;
    }

    //设置图片圆角，与阴影
    func setImgshadowlayer(cornerRadius:CGFloat,shadowOpacity:Float,borderWidth:CGFloat,shadowPathcornerRadius:CGFloat,size:CGSize,imgview:UIImageView) -> UIImageView{
            let shadowPath = UIBezierPath(roundedRect: bounds, cornerRadius: shadowPathcornerRadius)
            imgview.layer.masksToBounds = false
            imgview.layer.cornerRadius = cornerRadius
            imgview.layer.shadowColor = UIColor.white.cgColor
            imgview.layer.shadowOffset = size
            imgview.layer.shadowOpacity = shadowOpacity
            imgview.layer.shadowPath = shadowPath.cgPath
            imgview.layer.borderColor = UIColor.colorWithHex(hexColor: 0x32bd73).cgColor
            imgview.layer.borderWidth = borderWidth
            imgview.clipsToBounds = true
           return imgview
    }
    // 获取wifi名称
    ///
    /// - Returns: <#return value description#>
    func getUsedSSID() -> String {
        let interfaces = CNCopySupportedInterfaces()
        var ssid = "4G"
        if interfaces != nil {
            let interfacesArray = CFBridgingRetain(interfaces) as! Array<AnyObject>
            if interfacesArray.count > 0 {
                let interfaceName = interfacesArray[0] as! CFString
                let ussafeInterfaceData = CNCopyCurrentNetworkInfo(interfaceName)
                if (ussafeInterfaceData != nil) {
                    let interfaceData = ussafeInterfaceData as! Dictionary<String, Any>
                    ssid = interfaceData["SSID"]! as! String
                }
            }
        }
        return ssid
    }
    func heightForTextView(textView: UITextView, fixedWidth: CGFloat) -> CGFloat {
        let size = CGSize(width: fixedWidth, height: CGFloat.greatestFiniteMagnitude)
        let constraint = textView.sizeThatFits(size)
        return constraint.height
    }
    
    //获取系统当前时间
    func getNowdate() -> Int{
        // 创建一个日期格式器
        let now = Date()
        let dformatter = DateFormatter()
        dformatter.dateFormat = "yyyy年MM月dd日 HH:mm:ss"
        print("当前日期时间：\(dformatter.string(from: now))")
        
        //当前时间的时间戳
        let timeInterval:TimeInterval = now.timeIntervalSince1970
        let timeStamp = Int(timeInterval)
        print("当前时间的时间戳：\(timeStamp)")
        return timeStamp
    }
    
    func returntime(timeStart:Int,timeEnd:Int) ->Int{
        let seconds = timeEnd - timeStart
        return seconds
    }
    
    
    
    func setStatusLable (color:UIColor,text:String) ->UIView{
        
        let lable = UILabel.init(frame: CGRect.init(x: 10, y: 15, width: 40, height: 18));
        lable.backgroundColor =  color;
        lable.text = text;
        lable.layer.cornerRadius = 8;
        lable.clipsToBounds = true;
        lable.textAlignment = NSTextAlignment.center;
        lable.font =  UIFont.init(name: "iconfont", size: 10)
        lable.textColor = UIColor.white;
        return lable;
        
    }

    func replaceHtml(){
        let path = Bundle.main.path(forResource: "previewRes", ofType: ".html",
                                    inDirectory: "HTML5/src");
        let s = "##################$$$$$$$$$$$$$$$$$$"
        var str:NSString?=nil

        do{

            str=try NSString(contentsOfFile: path!,encoding: String.Encoding.ascii.rawValue)

        }catch{



        }
        print("1%%%%%%###########\(str!)" )


        do{

            try NSString.init(string: s).write(toFile: path!, atomically: true, encoding: String.Encoding.ascii.rawValue)

        }catch{

        }

        do{

            str=try NSString(contentsOfFile: path!,encoding: String.Encoding.ascii.rawValue)

        }catch{



        }
         print("2%%%%%%###########\(str!)" )

    }


    //绘制虚线边框
    func addDashdeBorderLayer(byView view:UIView, color:UIColor,lineWidth width:CGFloat){
        let shapeLayer = CAShapeLayer()
        let size = view.frame.size

        let shapeRect = CGRect.init(x: 1, y: 2, width: size.width + 1, height: size.height + 1)
        shapeLayer.bounds = shapeRect
        shapeLayer.position = CGPoint(x: size.width*0.5, y: size.height*0.5)
        shapeLayer.fillColor = UIColor.clear.cgColor
        shapeLayer.strokeColor = color.cgColor
        shapeLayer.lineWidth = width
        shapeLayer.lineJoin = kCALineJoinRound
        //
        shapeLayer.lineDashPattern = [3,4]
        let path = UIBezierPath(roundedRect: shapeRect, cornerRadius: 5)
        shapeLayer.path = path.cgPath
        view.layer.addSublayer(shapeLayer)

    }



    ///图片压缩方法
    func resetImgSize(sourceImage : UIImage,maxImageLenght : CGFloat,maxSizeKB : CGFloat) -> Data {

        var maxSize = maxSizeKB

        var maxImageSize = maxImageLenght



        if (maxSize <= 0.0) {

            maxSize = 1024.0;

        }

        if (maxImageSize <= 0.0)  {

            maxImageSize = 1024.0;

        }

        //先调整分辨率

        var newSize = CGSize.init(width: sourceImage.size.width, height: sourceImage.size.height)

        let tempHeight = newSize.height / maxImageSize;

        let tempWidth = newSize.width / maxImageSize;

        if (tempWidth > 1.0 && tempWidth > tempHeight) {

            newSize = CGSize.init(width: sourceImage.size.width / tempWidth, height: sourceImage.size.height / tempWidth)

        }

        else if (tempHeight > 1.0 && tempWidth < tempHeight){

            newSize = CGSize.init(width: sourceImage.size.width / tempHeight, height: sourceImage.size.height / tempHeight)

        }

        UIGraphicsBeginImageContext(newSize)

        sourceImage.draw(in: CGRect.init(x: 0, y: 0, width: newSize.width, height: newSize.height))

        let newImage = UIGraphicsGetImageFromCurrentImageContext()

        UIGraphicsEndImageContext()

        var imageData = UIImageJPEGRepresentation(newImage!, 1.0)

        var sizeOriginKB : CGFloat = CGFloat((imageData?.count)!) / 1024.0;

        //调整大小

        var resizeRate = 0.9;

        while (sizeOriginKB > maxSize && resizeRate > 0.1) {

            imageData = UIImageJPEGRepresentation(newImage!,CGFloat(resizeRate));

            sizeOriginKB = CGFloat((imageData?.count)!) / 1024.0;

            resizeRate -= 0.1;

        }

        return imageData!

    }


    /// 调用方法更新时长和页数
    ///
    /// - Parameters:
    ///   - cellId: 课件ID
    ///   - pageNum: 文件 页数 默认 0
    ///   - seconds: 视频时长 默认 0
    func updateDataByCell(cellId:String,pageNum:Int,seconds:Int){

        /// 格式 zjy+','+时长+','+页数 并Base64加密 回传  当时长或页数没有直接补0
        let cellData =  self.base64Encoding(plainString:"zjy,\(seconds),\(pageNum)")
        let dict = ["cellId":cellId,
                    "cellData":cellData,
                    "sourceType":3] as [String : Any]

        Alamofire.request(appAPI.AssistTeacher_updateDataByCell, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let r = JSON(value)
                if r["code"] == 1{

                }
            }else{
                ZKProgressHUD.showMessage("网络异常请稍后再试！");
            }
        }

    }

    /// swift Base64处理

    /**

     *   编码

     */

    func base64Encoding(plainString:String)->String

    {

        let plainData = plainString.data(using: String.Encoding.utf8)

        let base64String = plainData?.base64EncodedString(options: NSData.Base64EncodingOptions.init(rawValue: 0))

        return base64String!

    }



    /**

     *   解码

     */

    func base64Decoding(encodedString:String)->String

    {

        let decodedData = NSData(base64Encoded: encodedString, options: NSData.Base64DecodingOptions.init(rawValue: 0))

        let decodedString = NSString(data: decodedData! as Data, encoding: String.Encoding.utf8.rawValue)! as String

        return decodedString

    }
    /**
     
     *   用于记录登录日志
     
     */
    func saveUserLog(){
        var account = Account.defaultAccount
        if Account.defaultAccount.loginTime == nil{
            //保存并记录日志
            account.loginTime = self.getNowdate()
            Account.saveAccount(account)
            if Account.defaultAccount.id != nil{
               self.keepUserLog()
            }
        }else{
            if self.getNowdate() - 86400  >= Account.defaultAccount.loginTime!{
               self.keepUserLog()
               account.loginTime = self.getNowdate()
               Account.saveAccount(account)
            }
        }
    }
    func keepUserLog(){
        //取当前版本号
        let currentVersion = Bundle.main.infoDictionary!["CFBundleShortVersionString"] as! String
        let dict = ["userId":Account.defaultAccount.id!,
                    "sourceType":3,
                    "appVersion":currentVersion,
                    "clientId":GeTuiSdk.clientId()] as [String : Any]
        
        Alamofire.request(appAPI.MobileLogin_saveUserLog, method: .post, parameters: dict, encoding: URLEncoding.default).responseJSON { response in
            if let value = response.result.value {
                let r = JSON(value)
                if r["code"] == 1{
                    //记录登录日志成功
                }
            }else{
                ZKProgressHUD.showMessage("网络异常请稍后再试！");
            }
        }

    }


    //调用的方法
    //   common.share.getCurrentVC(rootVC:   common.share.getPresentedVC(rootVC: self)).present(userIconAlert, animated: true, completion: nil)
    func getPresentedVC(rootVC:UIViewController) -> UIViewController {
        var rootVC = rootVC;
        while (rootVC.presentedViewController != nil) {
            rootVC = self.getPresentedVC(rootVC: rootVC.presentedViewController!)
        }
        return rootVC ;
    }

    func getCurrentVC(rootVC:UIViewController) -> UIViewController {
        if rootVC.isKind(of: UINavigationController.self) {
            let rootVCC = rootVC as! UINavigationController;
            return  rootVCC.topViewController!
        } else if rootVC.isKind(of: UITabBarController.self) {
            let rootVCC = rootVC as! UITabBarController;
            return  rootVCC.selectedViewController!
        } else {
            return rootVC
        }
    }
    //加载html 缓存中地址
    func fileURLForBuggyWKWebView8(fileURL: NSURL) throws -> NSURL {


        let urls = fileURL.description.components(separatedBy: "HTML5/")

        // Some safety checks
        var error:NSError? = nil;
        if (!fileURL.isFileURL || !fileURL.checkResourceIsReachableAndReturnError(&error)) {
            throw error ?? NSError(
                domain: "BuggyWKWebViewDomain",
                code: 1001,
                userInfo: [NSLocalizedDescriptionKey: NSLocalizedString("URL must be a file URL.", comment:"")])
        }
        
        // Create "/temp/www" directory
        let fm = FileManager.default
        let tmpDirURL = NSURL.fileURL(withPath: NSTemporaryDirectory()).appendingPathComponent("www")
        try! fm.createDirectory(at: tmpDirURL, withIntermediateDirectories: true, attributes: nil)


        let dstURL = tmpDirURL.appendingPathComponent(urls.last!)
        let exist = fm.fileExists(atPath: NSTemporaryDirectory() + "/www/" + urls.last! )

        if(!exist){
            try fileURLForBuggyWKWebViewDirectory()
            try fileURLForBuggyWKWebViewFile()
        }

        return dstURL as NSURL
    }

     //创建文件夹
    func fileURLForBuggyWKWebViewDirectory() throws{

        var error:NSError? = nil;

        let fm = FileManager.default



        let fileArray = fm.subpaths(atPath: Bundle.main.bundlePath + "/HTML5")
        for fn in fileArray!{



            let fileURL = NSURL.init(fileURLWithPath: Bundle.main.bundlePath + "/HTML5/" + fn)

            if (!fileURL.isFileURL || !fileURL.checkResourceIsReachableAndReturnError(&error)) {
                throw error ?? NSError(
                    domain: "BuggyWKWebViewDomain",
                    code: 1001,
                    userInfo: [NSLocalizedDescriptionKey: NSLocalizedString("URL must be a file URL.", comment:"")])
            }

            let pathSpilt = fn.split(separator: "/")

            let ss =    pathSpilt.filter({!$0.contains(".")}).joined(separator: "/")
            let tmpDirURL = NSURL.fileURL(withPath: NSTemporaryDirectory()).appendingPathComponent("www").appendingPathComponent(ss)

            let exist = fm.fileExists(atPath: NSTemporaryDirectory() + "/www/" + ss)

            if (exist){
                continue
            }
            //withIntermediateDirectories为ture表示路径中间如果有不存在的文件夹都会创建
           try! fm.createDirectory(at: tmpDirURL, withIntermediateDirectories: true, attributes: nil)


        }
    }


    //移动文件夹的文件
    func fileURLForBuggyWKWebViewFile() throws{


        var error:NSError? = nil;

        let fm = FileManager.default

        let fileArray = fm.subpaths(atPath: Bundle.main.bundlePath + "/HTML5")
        for fn in fileArray!{

            let fileURL = NSURL.init(fileURLWithPath: Bundle.main.bundlePath + "/HTML5/" + fn)

            if (!fileURL.isFileURL || !fileURL.checkResourceIsReachableAndReturnError(&error)) {
                throw error ?? NSError(
                    domain: "BuggyWKWebViewDomain",
                    code: 1001,
                    userInfo: [NSLocalizedDescriptionKey: NSLocalizedString("URL must be a file URL.", comment:"")])
            }

            let pathSpilt = fn.split(separator: "/")

            //去除文件夹
            if(!(pathSpilt.last?.contains("."))!){
                continue
            }

            let tmpDirURL = NSURL.fileURL(withPath: NSTemporaryDirectory()).appendingPathComponent("www").appendingPathComponent(fn)

            let exist = fm.fileExists(atPath: NSTemporaryDirectory() + "/www/" + fn)

             //去除已存在
            if (exist){
                continue
            }

//            try fm.removeItem(at: tmpDirURL)
            try fm.copyItem(at: fileURL as URL, to: tmpDirURL)

        }
    }

}
